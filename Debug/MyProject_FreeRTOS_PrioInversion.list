
MyProject_FreeRTOS_PrioInversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a4  08005444  08005444  00006444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057e8  080057e8  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057e8  080057e8  000067e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057f0  080057f0  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057f0  080057f0  000067f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080057f4  080057f4  000067f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080057f8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08005808  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08005808  000079d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fbb  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028e4  00000000  00000000  00017ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001a8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000afe  00000000  00000000  0001b730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003336  00000000  00000000  0001c22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8bf  00000000  00000000  0001f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5fc  00000000  00000000  0002ee23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be41f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b28  00000000  00000000  000be464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  000c1f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800542c 	.word	0x0800542c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800542c 	.word	0x0800542c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <log_message>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// 시리얼 로그 출력 함수
void log_message(const char* msg) {
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 100);
 8000524:	6878      	ldr	r0, [r7, #4]
 8000526:	f7ff fe5b 	bl	80001e0 <strlen>
 800052a:	4603      	mov	r3, r0
 800052c:	b29a      	uxth	r2, r3
 800052e:	2364      	movs	r3, #100	@ 0x64
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	4803      	ldr	r0, [pc, #12]	@ (8000540 <log_message+0x24>)
 8000534:	f001 fac6 	bl	8001ac4 <HAL_UART_Transmit>
}
 8000538:	bf00      	nop
 800053a:	3708      	adds	r7, #8
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	2000002c 	.word	0x2000002c

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800054a:	f000 fadd 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054e:	f000 f853 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000552:	f000 f8e7 	bl	8000724 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000556:	f000 f8bb 	bl	80006d0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  log_message("--- 우선순위 역전 시나리오 시작 ---\r\n\r\n");
 800055a:	481c      	ldr	r0, [pc, #112]	@ (80005cc <main+0x88>)
 800055c:	f7ff ffde 	bl	800051c <log_message>

  // 뮤텍스 생성
  sharedMutex = xSemaphoreCreateMutex();
 8000560:	2001      	movs	r0, #1
 8000562:	f002 f9de 	bl	8002922 <xQueueCreateMutex>
 8000566:	4603      	mov	r3, r0
 8000568:	4a19      	ldr	r2, [pc, #100]	@ (80005d0 <main+0x8c>)
 800056a:	6013      	str	r3, [r2, #0]

  // 3개의 태스크(직원) 생성
  xTaskCreate(LowPrioTask,    "LowPrioTask_B",  256, NULL, LOW_PRIORITY,    NULL);
 800056c:	2300      	movs	r3, #0
 800056e:	9301      	str	r3, [sp, #4]
 8000570:	2301      	movs	r3, #1
 8000572:	9300      	str	r3, [sp, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800057a:	4916      	ldr	r1, [pc, #88]	@ (80005d4 <main+0x90>)
 800057c:	4816      	ldr	r0, [pc, #88]	@ (80005d8 <main+0x94>)
 800057e:	f002 ff61 	bl	8003444 <xTaskCreate>
  xTaskCreate(HighPrioTask,   "HighPrioTask_A", 256, NULL, HIGH_PRIORITY,   NULL);
 8000582:	2300      	movs	r3, #0
 8000584:	9301      	str	r3, [sp, #4]
 8000586:	2303      	movs	r3, #3
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2300      	movs	r3, #0
 800058c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000590:	4912      	ldr	r1, [pc, #72]	@ (80005dc <main+0x98>)
 8000592:	4813      	ldr	r0, [pc, #76]	@ (80005e0 <main+0x9c>)
 8000594:	f002 ff56 	bl	8003444 <xTaskCreate>
  xTaskCreate(MediumPrioTask, "MediumPrioTask_C", 256, NULL, MEDIUM_PRIORITY, NULL);
 8000598:	2300      	movs	r3, #0
 800059a:	9301      	str	r3, [sp, #4]
 800059c:	2302      	movs	r3, #2
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	2300      	movs	r3, #0
 80005a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005a6:	490f      	ldr	r1, [pc, #60]	@ (80005e4 <main+0xa0>)
 80005a8:	480f      	ldr	r0, [pc, #60]	@ (80005e8 <main+0xa4>)
 80005aa:	f002 ff4b 	bl	8003444 <xTaskCreate>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005ae:	f001 fe79 	bl	80022a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b2:	4a0e      	ldr	r2, [pc, #56]	@ (80005ec <main+0xa8>)
 80005b4:	2100      	movs	r1, #0
 80005b6:	480e      	ldr	r0, [pc, #56]	@ (80005f0 <main+0xac>)
 80005b8:	f001 febe 	bl	8002338 <osThreadNew>
 80005bc:	4603      	mov	r3, r0
 80005be:	4a0d      	ldr	r2, [pc, #52]	@ (80005f4 <main+0xb0>)
 80005c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005c2:	f001 fe93 	bl	80022ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c6:	bf00      	nop
 80005c8:	e7fd      	b.n	80005c6 <main+0x82>
 80005ca:	bf00      	nop
 80005cc:	08005450 	.word	0x08005450
 80005d0:	20000078 	.word	0x20000078
 80005d4:	08005484 	.word	0x08005484
 80005d8:	08000801 	.word	0x08000801
 80005dc:	08005494 	.word	0x08005494
 80005e0:	08000885 	.word	0x08000885
 80005e4:	080054a4 	.word	0x080054a4
 80005e8:	080008e9 	.word	0x080008e9
 80005ec:	080057ac 	.word	0x080057ac
 80005f0:	0800093d 	.word	0x0800093d
 80005f4:	20000074 	.word	0x20000074

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b094      	sub	sp, #80	@ 0x50
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	2230      	movs	r2, #48	@ 0x30
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f004 fed6 	bl	80053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemClock_Config+0xd0>)
 8000622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000624:	4a28      	ldr	r2, [pc, #160]	@ (80006c8 <SystemClock_Config+0xd0>)
 8000626:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800062a:	6413      	str	r3, [r2, #64]	@ 0x40
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemClock_Config+0xd0>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000630:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000638:	2300      	movs	r3, #0
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemClock_Config+0xd4>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000644:	4a21      	ldr	r2, [pc, #132]	@ (80006cc <SystemClock_Config+0xd4>)
 8000646:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	@ (80006cc <SystemClock_Config+0xd4>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800066c:	2310      	movs	r3, #16
 800066e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000670:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000674:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000676:	2304      	movs	r3, #4
 8000678:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800067a:	2307      	movs	r3, #7
 800067c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067e:	f107 0320 	add.w	r3, r7, #32
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fd36 	bl	80010f4 <HAL_RCC_OscConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800068e:	f000 f95d 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000692:	230f      	movs	r3, #15
 8000694:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000696:	2302      	movs	r3, #2
 8000698:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069a:	2300      	movs	r3, #0
 800069c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80006a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2102      	movs	r1, #2
 80006ae:	4618      	mov	r0, r3
 80006b0:	f000 ff98 	bl	80015e4 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006ba:	f000 f947 	bl	800094c <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	@ 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006d4:	4b11      	ldr	r3, [pc, #68]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	@ (8000720 <MX_USART2_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	@ (800071c <MX_USART2_UART_Init+0x4c>)
 8000708:	f001 f98c 	bl	8001a24 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f91b 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	2000002c 	.word	0x2000002c
 8000720:	40004400 	.word	0x40004400

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	613b      	str	r3, [r7, #16]
 800073e:	4b2d      	ldr	r3, [pc, #180]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	4a2c      	ldr	r2, [pc, #176]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	6313      	str	r3, [r2, #48]	@ 0x30
 800074a:	4b2a      	ldr	r3, [pc, #168]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	613b      	str	r3, [r7, #16]
 8000754:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	4a25      	ldr	r2, [pc, #148]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000760:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000764:	6313      	str	r3, [r2, #48]	@ 0x30
 8000766:	4b23      	ldr	r3, [pc, #140]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	6313      	str	r3, [r2, #48]	@ 0x30
 8000782:	4b1c      	ldr	r3, [pc, #112]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]
 800078c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b18      	ldr	r3, [pc, #96]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 8000798:	f043 0302 	orr.w	r3, r3, #2
 800079c:	6313      	str	r3, [r2, #48]	@ 0x30
 800079e:	4b15      	ldr	r3, [pc, #84]	@ (80007f4 <MX_GPIO_Init+0xd0>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a2:	f003 0302 	and.w	r3, r3, #2
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	4812      	ldr	r0, [pc, #72]	@ (80007f8 <MX_GPIO_Init+0xd4>)
 80007b0:	f000 fc86 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	480c      	ldr	r0, [pc, #48]	@ (80007fc <MX_GPIO_Init+0xd8>)
 80007cc:	f000 faf4 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007d0:	2320      	movs	r3, #32
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	4804      	ldr	r0, [pc, #16]	@ (80007f8 <MX_GPIO_Init+0xd4>)
 80007e8:	f000 fae6 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007ec:	bf00      	nop
 80007ee:	3728      	adds	r7, #40	@ 0x28
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800
 80007f8:	40020000 	.word	0x40020000
 80007fc:	40020800 	.word	0x40020800

08000800 <LowPrioTask>:
/* USER CODE BEGIN 4 */
/**
  * @brief  B직원(낮음): 뮤텍스를 점유하고 긴 작업을 수행
  */
void LowPrioTask(void *argument)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  log_message("B직원(낮음): 업무 시작. 화장실 열쇠(뮤텍스)를 획득합니다.\r\n");
 8000808:	4818      	ldr	r0, [pc, #96]	@ (800086c <LowPrioTask+0x6c>)
 800080a:	f7ff fe87 	bl	800051c <log_message>
  xSemaphoreTake(sharedMutex, portMAX_DELAY);
 800080e:	4b18      	ldr	r3, [pc, #96]	@ (8000870 <LowPrioTask+0x70>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f04f 31ff 	mov.w	r1, #4294967295
 8000816:	4618      	mov	r0, r3
 8000818:	f002 fb1e 	bl	8002e58 <xQueueSemaphoreTake>

  log_message("B직원(낮음): [열쇠 획득] 5초가 걸리는 중요한 서류 작업을 시작합니다...\r\n");
 800081c:	4815      	ldr	r0, [pc, #84]	@ (8000874 <LowPrioTask+0x74>)
 800081e:	f7ff fe7d 	bl	800051c <log_message>

  // 오래 걸리는 작업을 1초 단위로 쪼개서 표현
  for (int i = 0; i < 5; i++) {
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e009      	b.n	800083c <LowPrioTask+0x3c>
    log_message("  B직원(낮음): ...서류 작업 진행 중...\r\n");
 8000828:	4813      	ldr	r0, [pc, #76]	@ (8000878 <LowPrioTask+0x78>)
 800082a:	f7ff fe77 	bl	800051c <log_message>
    vTaskDelay(pdMS_TO_TICKS(1000));
 800082e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000832:	f002 ffc1 	bl	80037b8 <vTaskDelay>
  for (int i = 0; i < 5; i++) {
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b04      	cmp	r3, #4
 8000840:	ddf2      	ble.n	8000828 <LowPrioTask+0x28>
  }

  log_message("B직원(낮음): [업무 완료] 5초 작업 끝. 열쇠를 반납합니다.\r\n");
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <LowPrioTask+0x7c>)
 8000844:	f7ff fe6a 	bl	800051c <log_message>
  xSemaphoreGive(sharedMutex);
 8000848:	4b09      	ldr	r3, [pc, #36]	@ (8000870 <LowPrioTask+0x70>)
 800084a:	6818      	ldr	r0, [r3, #0]
 800084c:	2300      	movs	r3, #0
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	f002 f87f 	bl	8002954 <xQueueGenericSend>

  log_message("B직원(낮음): 퇴근!\r\n");
 8000856:	480a      	ldr	r0, [pc, #40]	@ (8000880 <LowPrioTask+0x80>)
 8000858:	f7ff fe60 	bl	800051c <log_message>
  vTaskDelete(NULL);
 800085c:	2000      	movs	r0, #0
 800085e:	f002 ff37 	bl	80036d0 <vTaskDelete>
}
 8000862:	bf00      	nop
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	080054b8 	.word	0x080054b8
 8000870:	20000078 	.word	0x20000078
 8000874:	0800550c 	.word	0x0800550c
 8000878:	08005570 	.word	0x08005570
 800087c:	080055a4 	.word	0x080055a4
 8000880:	080055f4 	.word	0x080055f4

08000884 <HighPrioTask>:

/**
  * @brief  A직원(높음): 가장 급하지만, 낮은 우선순위의 태스크가 점유한 뮤텍스를 기다림
  */
void HighPrioTask(void *argument)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  // B직원이 먼저 뮤텍스를 잡을 시간을 줌
  vTaskDelay(pdMS_TO_TICKS(100));
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f002 ff93 	bl	80037b8 <vTaskDelay>

  log_message("!! A직원(높음): 출근! 화장실이 매우 급합니다! (뮤텍스 획득 시도)\r\n");
 8000892:	4811      	ldr	r0, [pc, #68]	@ (80008d8 <HighPrioTask+0x54>)
 8000894:	f7ff fe42 	bl	800051c <log_message>

  // 여기서 LowPrioTask가 뮤텍스를 반납할 때까지 계속 대기 (Blocked)
  xSemaphoreTake(sharedMutex, portMAX_DELAY);
 8000898:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <HighPrioTask+0x58>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f04f 31ff 	mov.w	r1, #4294967295
 80008a0:	4618      	mov	r0, r3
 80008a2:	f002 fad9 	bl	8002e58 <xQueueSemaphoreTake>

  log_message("!! A직원(높음): [열쇠 획득] 드디어 들어왔다! 1초만에 용무 완료.\r\n");
 80008a6:	480e      	ldr	r0, [pc, #56]	@ (80008e0 <HighPrioTask+0x5c>)
 80008a8:	f7ff fe38 	bl	800051c <log_message>
  vTaskDelay(pdMS_TO_TICKS(1000));
 80008ac:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b0:	f002 ff82 	bl	80037b8 <vTaskDelay>
  xSemaphoreGive(sharedMutex);
 80008b4:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <HighPrioTask+0x58>)
 80008b6:	6818      	ldr	r0, [r3, #0]
 80008b8:	2300      	movs	r3, #0
 80008ba:	2200      	movs	r2, #0
 80008bc:	2100      	movs	r1, #0
 80008be:	f002 f849 	bl	8002954 <xQueueGenericSend>

  log_message("!! A직원(높음): 퇴근!\r\n");
 80008c2:	4808      	ldr	r0, [pc, #32]	@ (80008e4 <HighPrioTask+0x60>)
 80008c4:	f7ff fe2a 	bl	800051c <log_message>
  vTaskDelete(NULL);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f002 ff01 	bl	80036d0 <vTaskDelete>
}
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08005610 	.word	0x08005610
 80008dc:	20000078 	.word	0x20000078
 80008e0:	0800566c 	.word	0x0800566c
 80008e4:	080056c4 	.word	0x080056c4

080008e8 <MediumPrioTask>:

/**
  * @brief  C직원(중간): 뮤텍스와 무관하며, CPU를 계속 사용
  */
void MediumPrioTask(void *argument)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b084      	sub	sp, #16
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]
  // 다른 태스크들이 자리를 잡을 시간을 줌
  vTaskDelay(pdMS_TO_TICKS(200));
 80008f0:	20c8      	movs	r0, #200	@ 0xc8
 80008f2:	f002 ff61 	bl	80037b8 <vTaskDelay>

  log_message("  C직원(중간): 제 자리에서 CPU를 쓰는 작업을 시작합니다.\r\n");
 80008f6:	480e      	ldr	r0, [pc, #56]	@ (8000930 <MediumPrioTask+0x48>)
 80008f8:	f7ff fe10 	bl	800051c <log_message>

  // 12번 반복하며 자신의 일을 함
  for (int i = 0; i < 12; i++) {
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	e009      	b.n	8000916 <MediumPrioTask+0x2e>
    log_message("    C직원(중간): 나는 바쁘다! CPU 작업 중! 💻\r\n");
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MediumPrioTask+0x4c>)
 8000904:	f7ff fe0a 	bl	800051c <log_message>
    vTaskDelay(pdMS_TO_TICKS(500));
 8000908:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800090c:	f002 ff54 	bl	80037b8 <vTaskDelay>
  for (int i = 0; i < 12; i++) {
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	3301      	adds	r3, #1
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2b0b      	cmp	r3, #11
 800091a:	ddf2      	ble.n	8000902 <MediumPrioTask+0x1a>
  }

  log_message("  C직원(중간): 퇴근!\r\n");
 800091c:	4806      	ldr	r0, [pc, #24]	@ (8000938 <MediumPrioTask+0x50>)
 800091e:	f7ff fdfd 	bl	800051c <log_message>
  vTaskDelete(NULL);
 8000922:	2000      	movs	r0, #0
 8000924:	f002 fed4 	bl	80036d0 <vTaskDelete>
}
 8000928:	bf00      	nop
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	080056e4 	.word	0x080056e4
 8000934:	08005734 	.word	0x08005734
 8000938:	08005774 	.word	0x08005774

0800093c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000944:	2001      	movs	r0, #1
 8000946:	f001 fd89 	bl	800245c <osDelay>
 800094a:	e7fb      	b.n	8000944 <StartDefaultTask+0x8>

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b12      	ldr	r3, [pc, #72]	@ (80009ac <HAL_MspInit+0x54>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a11      	ldr	r2, [pc, #68]	@ (80009ac <HAL_MspInit+0x54>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0f      	ldr	r3, [pc, #60]	@ (80009ac <HAL_MspInit+0x54>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b0b      	ldr	r3, [pc, #44]	@ (80009ac <HAL_MspInit+0x54>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a0a      	ldr	r2, [pc, #40]	@ (80009ac <HAL_MspInit+0x54>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b08      	ldr	r3, [pc, #32]	@ (80009ac <HAL_MspInit+0x54>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000996:	2200      	movs	r2, #0
 8000998:	210f      	movs	r1, #15
 800099a:	f06f 0001 	mvn.w	r0, #1
 800099e:	f000 f9e2 	bl	8000d66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009a2:	bf00      	nop
 80009a4:	3708      	adds	r7, #8
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40023800 	.word	0x40023800

080009b0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	@ 0x28
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b8:	f107 0314 	add.w	r3, r7, #20
 80009bc:	2200      	movs	r2, #0
 80009be:	601a      	str	r2, [r3, #0]
 80009c0:	605a      	str	r2, [r3, #4]
 80009c2:	609a      	str	r2, [r3, #8]
 80009c4:	60da      	str	r2, [r3, #12]
 80009c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a19      	ldr	r2, [pc, #100]	@ (8000a34 <HAL_UART_MspInit+0x84>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d12b      	bne.n	8000a2a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]
 80009d6:	4b18      	ldr	r3, [pc, #96]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a17      	ldr	r2, [pc, #92]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b15      	ldr	r3, [pc, #84]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009f6:	4a10      	ldr	r2, [pc, #64]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000a38 <HAL_UART_MspInit+0x88>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a0a:	230c      	movs	r3, #12
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a1a:	2307      	movs	r3, #7
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	@ (8000a3c <HAL_UART_MspInit+0x8c>)
 8000a26:	f000 f9c7 	bl	8000db8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a2a:	bf00      	nop
 8000a2c:	3728      	adds	r7, #40	@ 0x28
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	40004400 	.word	0x40004400
 8000a38:	40023800 	.word	0x40023800
 8000a3c:	40020000 	.word	0x40020000

08000a40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <NMI_Handler+0x4>

08000a48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <HardFault_Handler+0x4>

08000a50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a54:	bf00      	nop
 8000a56:	e7fd      	b.n	8000a54 <MemManage_Handler+0x4>

08000a58 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5c:	bf00      	nop
 8000a5e:	e7fd      	b.n	8000a5c <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr

08000a76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a76:	b580      	push	{r7, lr}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a7a:	f000 f897 	bl	8000bac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a7e:	f003 fb1f 	bl	80040c0 <xTaskGetSchedulerState>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d001      	beq.n	8000a8c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a88:	f004 fa16 	bl	8004eb8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f004 fc71 	bl	80053c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd2d 	bl	8000544 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000af8:	080057f8 	.word	0x080057f8
  ldr r2, =_sbss
 8000afc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b00:	200049d0 	.word	0x200049d0

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f90d 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff ff0c 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f917 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f8ed 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	2000007c 	.word	0x2000007c

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000007c 	.word	0x2000007c

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e159      	b.n	8001088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8148 	bne.w	8001082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a2 	beq.w	8001082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b57      	ldr	r3, [pc, #348]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a56      	ldr	r2, [pc, #344]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b54      	ldr	r3, [pc, #336]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a52      	ldr	r2, [pc, #328]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x202>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	@ (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fe>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a47      	ldr	r2, [pc, #284]	@ (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fa>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a46      	ldr	r2, [pc, #280]	@ (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1f6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1f2>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a24      	ldr	r2, [pc, #144]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1a      	ldr	r2, [pc, #104]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f aea2 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d101      	bne.n	8001106 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e267      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f003 0301 	and.w	r3, r3, #1
 800110e:	2b00      	cmp	r3, #0
 8001110:	d075      	beq.n	80011fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001112:	4b88      	ldr	r3, [pc, #544]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 030c 	and.w	r3, r3, #12
 800111a:	2b04      	cmp	r3, #4
 800111c:	d00c      	beq.n	8001138 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800111e:	4b85      	ldr	r3, [pc, #532]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001126:	2b08      	cmp	r3, #8
 8001128:	d112      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800112a:	4b82      	ldr	r3, [pc, #520]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001132:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001136:	d10b      	bne.n	8001150 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001138:	4b7e      	ldr	r3, [pc, #504]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d05b      	beq.n	80011fc <HAL_RCC_OscConfig+0x108>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d157      	bne.n	80011fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	e242      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001158:	d106      	bne.n	8001168 <HAL_RCC_OscConfig+0x74>
 800115a:	4b76      	ldr	r3, [pc, #472]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a75      	ldr	r2, [pc, #468]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001160:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001164:	6013      	str	r3, [r2, #0]
 8001166:	e01d      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001170:	d10c      	bne.n	800118c <HAL_RCC_OscConfig+0x98>
 8001172:	4b70      	ldr	r3, [pc, #448]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a6f      	ldr	r2, [pc, #444]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001178:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800117c:	6013      	str	r3, [r2, #0]
 800117e:	4b6d      	ldr	r3, [pc, #436]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a6c      	ldr	r2, [pc, #432]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001184:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001188:	6013      	str	r3, [r2, #0]
 800118a:	e00b      	b.n	80011a4 <HAL_RCC_OscConfig+0xb0>
 800118c:	4b69      	ldr	r3, [pc, #420]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a68      	ldr	r2, [pc, #416]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001192:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b66      	ldr	r3, [pc, #408]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a65      	ldr	r2, [pc, #404]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800119e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d013      	beq.n	80011d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fd12 	bl	8000bd4 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011b4:	f7ff fd0e 	bl	8000bd4 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b64      	cmp	r3, #100	@ 0x64
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e207      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0xc0>
 80011d2:	e014      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fcfe 	bl	8000bd4 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011dc:	f7ff fcfa 	bl	8000bd4 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b64      	cmp	r3, #100	@ 0x64
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e1f3      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ee:	4b51      	ldr	r3, [pc, #324]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0xe8>
 80011fa:	e000      	b.n	80011fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d063      	beq.n	80012d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800120a:	4b4a      	ldr	r3, [pc, #296]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 800120c:	689b      	ldr	r3, [r3, #8]
 800120e:	f003 030c 	and.w	r3, r3, #12
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00b      	beq.n	800122e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001216:	4b47      	ldr	r3, [pc, #284]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800121e:	2b08      	cmp	r3, #8
 8001220:	d11c      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001222:	4b44      	ldr	r3, [pc, #272]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d116      	bne.n	800125c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800122e:	4b41      	ldr	r3, [pc, #260]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d005      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d001      	beq.n	8001246 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e1c7      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001246:	4b3b      	ldr	r3, [pc, #236]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	691b      	ldr	r3, [r3, #16]
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	4937      	ldr	r1, [pc, #220]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001256:	4313      	orrs	r3, r2
 8001258:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800125a:	e03a      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d020      	beq.n	80012a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001264:	4b34      	ldr	r3, [pc, #208]	@ (8001338 <HAL_RCC_OscConfig+0x244>)
 8001266:	2201      	movs	r2, #1
 8001268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126a:	f7ff fcb3 	bl	8000bd4 <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001272:	f7ff fcaf 	bl	8000bd4 <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1a8      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001284:	4b2b      	ldr	r3, [pc, #172]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d0f0      	beq.n	8001272 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001290:	4b28      	ldr	r3, [pc, #160]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691b      	ldr	r3, [r3, #16]
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4925      	ldr	r1, [pc, #148]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80012a0:	4313      	orrs	r3, r2
 80012a2:	600b      	str	r3, [r1, #0]
 80012a4:	e015      	b.n	80012d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012a6:	4b24      	ldr	r3, [pc, #144]	@ (8001338 <HAL_RCC_OscConfig+0x244>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc92 	bl	8000bd4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012b4:	f7ff fc8e 	bl	8000bd4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e187      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1f0      	bne.n	80012b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d036      	beq.n	800134c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	695b      	ldr	r3, [r3, #20]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d016      	beq.n	8001314 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <HAL_RCC_OscConfig+0x248>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012ec:	f7ff fc72 	bl	8000bd4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fc6e 	bl	8000bd4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e167      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001306:	4b0b      	ldr	r3, [pc, #44]	@ (8001334 <HAL_RCC_OscConfig+0x240>)
 8001308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d0f0      	beq.n	80012f4 <HAL_RCC_OscConfig+0x200>
 8001312:	e01b      	b.n	800134c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001314:	4b09      	ldr	r3, [pc, #36]	@ (800133c <HAL_RCC_OscConfig+0x248>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131a:	f7ff fc5b 	bl	8000bd4 <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001320:	e00e      	b.n	8001340 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001322:	f7ff fc57 	bl	8000bd4 <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d907      	bls.n	8001340 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e150      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001334:	40023800 	.word	0x40023800
 8001338:	42470000 	.word	0x42470000
 800133c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001340:	4b88      	ldr	r3, [pc, #544]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001342:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001344:	f003 0302 	and.w	r3, r3, #2
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1ea      	bne.n	8001322 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	f000 8097 	beq.w	8001488 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800135e:	4b81      	ldr	r3, [pc, #516]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001362:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d10f      	bne.n	800138a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60bb      	str	r3, [r7, #8]
 800136e:	4b7d      	ldr	r3, [pc, #500]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a7c      	ldr	r2, [pc, #496]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b7a      	ldr	r3, [pc, #488]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001386:	2301      	movs	r3, #1
 8001388:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138a:	4b77      	ldr	r3, [pc, #476]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001392:	2b00      	cmp	r3, #0
 8001394:	d118      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001396:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a73      	ldr	r2, [pc, #460]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 800139c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013a2:	f7ff fc17 	bl	8000bd4 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013aa:	f7ff fc13 	bl	8000bd4 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e10c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001568 <HAL_RCC_OscConfig+0x474>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d106      	bne.n	80013de <HAL_RCC_OscConfig+0x2ea>
 80013d0:	4b64      	ldr	r3, [pc, #400]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d4:	4a63      	ldr	r2, [pc, #396]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6713      	str	r3, [r2, #112]	@ 0x70
 80013dc:	e01c      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	2b05      	cmp	r3, #5
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x30c>
 80013e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013ea:	4a5e      	ldr	r2, [pc, #376]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80013f2:	4b5c      	ldr	r3, [pc, #368]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013f6:	4a5b      	ldr	r2, [pc, #364]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0x324>
 8001400:	4b58      	ldr	r3, [pc, #352]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001402:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001404:	4a57      	ldr	r2, [pc, #348]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001406:	f023 0301 	bic.w	r3, r3, #1
 800140a:	6713      	str	r3, [r2, #112]	@ 0x70
 800140c:	4b55      	ldr	r3, [pc, #340]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800140e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001410:	4a54      	ldr	r2, [pc, #336]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 0304 	bic.w	r3, r3, #4
 8001416:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d015      	beq.n	800144c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001420:	f7ff fbd8 	bl	8000bd4 <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001426:	e00a      	b.n	800143e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001428:	f7ff fbd4 	bl	8000bd4 <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001436:	4293      	cmp	r3, r2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e0cb      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800143e:	4b49      	ldr	r3, [pc, #292]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001440:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	2b00      	cmp	r3, #0
 8001448:	d0ee      	beq.n	8001428 <HAL_RCC_OscConfig+0x334>
 800144a:	e014      	b.n	8001476 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fbc2 	bl	8000bd4 <HAL_GetTick>
 8001450:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001452:	e00a      	b.n	800146a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001454:	f7ff fbbe 	bl	8000bd4 <HAL_GetTick>
 8001458:	4602      	mov	r2, r0
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e0b5      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146a:	4b3e      	ldr	r3, [pc, #248]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800146c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1ee      	bne.n	8001454 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800147c:	4b39      	ldr	r3, [pc, #228]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800147e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001480:	4a38      	ldr	r2, [pc, #224]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001482:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001486:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	699b      	ldr	r3, [r3, #24]
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80a1 	beq.w	80015d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001492:	4b34      	ldr	r3, [pc, #208]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b08      	cmp	r3, #8
 800149c:	d05c      	beq.n	8001558 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	699b      	ldr	r3, [r3, #24]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d141      	bne.n	800152a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b31      	ldr	r3, [pc, #196]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb92 	bl	8000bd4 <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb8e 	bl	8000bd4 <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e087      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b27      	ldr	r3, [pc, #156]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69da      	ldr	r2, [r3, #28]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a1b      	ldr	r3, [r3, #32]
 80014da:	431a      	orrs	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e0:	019b      	lsls	r3, r3, #6
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	085b      	lsrs	r3, r3, #1
 80014ea:	3b01      	subs	r3, #1
 80014ec:	041b      	lsls	r3, r3, #16
 80014ee:	431a      	orrs	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	491b      	ldr	r1, [pc, #108]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014fc:	4b1b      	ldr	r3, [pc, #108]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 80014fe:	2201      	movs	r2, #1
 8001500:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001502:	f7ff fb67 	bl	8000bd4 <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800150a:	f7ff fb63 	bl	8000bd4 <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b02      	cmp	r3, #2
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e05c      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800151c:	4b11      	ldr	r3, [pc, #68]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x416>
 8001528:	e054      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800152a:	4b10      	ldr	r3, [pc, #64]	@ (800156c <HAL_RCC_OscConfig+0x478>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001530:	f7ff fb50 	bl	8000bd4 <HAL_GetTick>
 8001534:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001538:	f7ff fb4c 	bl	8000bd4 <HAL_GetTick>
 800153c:	4602      	mov	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e045      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_RCC_OscConfig+0x470>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x444>
 8001556:	e03d      	b.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	699b      	ldr	r3, [r3, #24]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d107      	bne.n	8001570 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e038      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
 8001564:	40023800 	.word	0x40023800
 8001568:	40007000 	.word	0x40007000
 800156c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001570:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_RCC_OscConfig+0x4ec>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d028      	beq.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001588:	429a      	cmp	r2, r3
 800158a:	d121      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001596:	429a      	cmp	r2, r3
 8001598:	d11a      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800159a:	68fa      	ldr	r2, [r7, #12]
 800159c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015a0:	4013      	ands	r3, r2
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d111      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	085b      	lsrs	r3, r3, #1
 80015b8:	3b01      	subs	r3, #1
 80015ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d107      	bne.n	80015d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d001      	beq.n	80015d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	e000      	b.n	80015d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40023800 	.word	0x40023800

080015e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0cc      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015f8:	4b68      	ldr	r3, [pc, #416]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f003 0307 	and.w	r3, r3, #7
 8001600:	683a      	ldr	r2, [r7, #0]
 8001602:	429a      	cmp	r2, r3
 8001604:	d90c      	bls.n	8001620 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001606:	4b65      	ldr	r3, [pc, #404]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800160e:	4b63      	ldr	r3, [pc, #396]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	429a      	cmp	r2, r3
 800161a:	d001      	beq.n	8001620 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e0b8      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d020      	beq.n	800166e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	2b00      	cmp	r3, #0
 8001636:	d005      	beq.n	8001644 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001638:	4b59      	ldr	r3, [pc, #356]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	4a58      	ldr	r2, [pc, #352]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800163e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001642:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b00      	cmp	r3, #0
 800164e:	d005      	beq.n	800165c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001650:	4b53      	ldr	r3, [pc, #332]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	4a52      	ldr	r2, [pc, #328]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001656:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800165a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800165c:	4b50      	ldr	r3, [pc, #320]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	494d      	ldr	r1, [pc, #308]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	4313      	orrs	r3, r2
 800166c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	2b00      	cmp	r3, #0
 8001678:	d044      	beq.n	8001704 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b01      	cmp	r3, #1
 8001680:	d107      	bne.n	8001692 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001682:	4b47      	ldr	r3, [pc, #284]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d119      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	e07f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	685b      	ldr	r3, [r3, #4]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d003      	beq.n	80016a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800169e:	2b03      	cmp	r3, #3
 80016a0:	d107      	bne.n	80016b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a2:	4b3f      	ldr	r3, [pc, #252]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d109      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e06f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016b2:	4b3b      	ldr	r3, [pc, #236]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d101      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e067      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016c2:	4b37      	ldr	r3, [pc, #220]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f023 0203 	bic.w	r2, r3, #3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	4934      	ldr	r1, [pc, #208]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016d4:	f7ff fa7e 	bl	8000bd4 <HAL_GetTick>
 80016d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016da:	e00a      	b.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016dc:	f7ff fa7a 	bl	8000bd4 <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ea:	4293      	cmp	r3, r2
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e04f      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016f2:	4b2b      	ldr	r3, [pc, #172]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f003 020c 	and.w	r2, r3, #12
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	429a      	cmp	r2, r3
 8001702:	d1eb      	bne.n	80016dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001704:	4b25      	ldr	r3, [pc, #148]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0307 	and.w	r3, r3, #7
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	429a      	cmp	r2, r3
 8001710:	d20c      	bcs.n	800172c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001712:	4b22      	ldr	r3, [pc, #136]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	683a      	ldr	r2, [r7, #0]
 8001716:	b2d2      	uxtb	r2, r2
 8001718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800171a:	4b20      	ldr	r3, [pc, #128]	@ (800179c <HAL_RCC_ClockConfig+0x1b8>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	683a      	ldr	r2, [r7, #0]
 8001724:	429a      	cmp	r2, r3
 8001726:	d001      	beq.n	800172c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e032      	b.n	8001792 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0304 	and.w	r3, r3, #4
 8001734:	2b00      	cmp	r3, #0
 8001736:	d008      	beq.n	800174a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001738:	4b19      	ldr	r3, [pc, #100]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	4916      	ldr	r1, [pc, #88]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	2b00      	cmp	r3, #0
 8001754:	d009      	beq.n	800176a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001756:	4b12      	ldr	r3, [pc, #72]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	691b      	ldr	r3, [r3, #16]
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	490e      	ldr	r1, [pc, #56]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001766:	4313      	orrs	r3, r2
 8001768:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800176a:	f000 f821 	bl	80017b0 <HAL_RCC_GetSysClockFreq>
 800176e:	4602      	mov	r2, r0
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_RCC_ClockConfig+0x1bc>)
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	091b      	lsrs	r3, r3, #4
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	490a      	ldr	r1, [pc, #40]	@ (80017a4 <HAL_RCC_ClockConfig+0x1c0>)
 800177c:	5ccb      	ldrb	r3, [r1, r3]
 800177e:	fa22 f303 	lsr.w	r3, r2, r3
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001784:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001786:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <HAL_RCC_ClockConfig+0x1c8>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7ff f9de 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 8001790:	2300      	movs	r3, #0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3710      	adds	r7, #16
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40023c00 	.word	0x40023c00
 80017a0:	40023800 	.word	0x40023800
 80017a4:	080057d0 	.word	0x080057d0
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004

080017b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017b4:	b094      	sub	sp, #80	@ 0x50
 80017b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017c0:	2300      	movs	r3, #0
 80017c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017c8:	4b79      	ldr	r3, [pc, #484]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	f003 030c 	and.w	r3, r3, #12
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d00d      	beq.n	80017f0 <HAL_RCC_GetSysClockFreq+0x40>
 80017d4:	2b08      	cmp	r3, #8
 80017d6:	f200 80e1 	bhi.w	800199c <HAL_RCC_GetSysClockFreq+0x1ec>
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d002      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x34>
 80017de:	2b04      	cmp	r3, #4
 80017e0:	d003      	beq.n	80017ea <HAL_RCC_GetSysClockFreq+0x3a>
 80017e2:	e0db      	b.n	800199c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017e4:	4b73      	ldr	r3, [pc, #460]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80017e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017e8:	e0db      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017ea:	4b73      	ldr	r3, [pc, #460]	@ (80019b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80017ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ee:	e0d8      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017f0:	4b6f      	ldr	r3, [pc, #444]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017fa:	4b6d      	ldr	r3, [pc, #436]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001806:	4b6a      	ldr	r3, [pc, #424]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	099b      	lsrs	r3, r3, #6
 800180c:	2200      	movs	r2, #0
 800180e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001810:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001812:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001818:	633b      	str	r3, [r7, #48]	@ 0x30
 800181a:	2300      	movs	r3, #0
 800181c:	637b      	str	r3, [r7, #52]	@ 0x34
 800181e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001822:	4622      	mov	r2, r4
 8001824:	462b      	mov	r3, r5
 8001826:	f04f 0000 	mov.w	r0, #0
 800182a:	f04f 0100 	mov.w	r1, #0
 800182e:	0159      	lsls	r1, r3, #5
 8001830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001834:	0150      	lsls	r0, r2, #5
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4621      	mov	r1, r4
 800183c:	1a51      	subs	r1, r2, r1
 800183e:	6139      	str	r1, [r7, #16]
 8001840:	4629      	mov	r1, r5
 8001842:	eb63 0301 	sbc.w	r3, r3, r1
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	f04f 0200 	mov.w	r2, #0
 800184c:	f04f 0300 	mov.w	r3, #0
 8001850:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001854:	4659      	mov	r1, fp
 8001856:	018b      	lsls	r3, r1, #6
 8001858:	4651      	mov	r1, sl
 800185a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800185e:	4651      	mov	r1, sl
 8001860:	018a      	lsls	r2, r1, #6
 8001862:	4651      	mov	r1, sl
 8001864:	ebb2 0801 	subs.w	r8, r2, r1
 8001868:	4659      	mov	r1, fp
 800186a:	eb63 0901 	sbc.w	r9, r3, r1
 800186e:	f04f 0200 	mov.w	r2, #0
 8001872:	f04f 0300 	mov.w	r3, #0
 8001876:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800187a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800187e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001882:	4690      	mov	r8, r2
 8001884:	4699      	mov	r9, r3
 8001886:	4623      	mov	r3, r4
 8001888:	eb18 0303 	adds.w	r3, r8, r3
 800188c:	60bb      	str	r3, [r7, #8]
 800188e:	462b      	mov	r3, r5
 8001890:	eb49 0303 	adc.w	r3, r9, r3
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	f04f 0200 	mov.w	r2, #0
 800189a:	f04f 0300 	mov.w	r3, #0
 800189e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018a2:	4629      	mov	r1, r5
 80018a4:	024b      	lsls	r3, r1, #9
 80018a6:	4621      	mov	r1, r4
 80018a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018ac:	4621      	mov	r1, r4
 80018ae:	024a      	lsls	r2, r1, #9
 80018b0:	4610      	mov	r0, r2
 80018b2:	4619      	mov	r1, r3
 80018b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018b6:	2200      	movs	r2, #0
 80018b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018c0:	f7fe fc96 	bl	80001f0 <__aeabi_uldivmod>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4613      	mov	r3, r2
 80018ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018cc:	e058      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ce:	4b38      	ldr	r3, [pc, #224]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	099b      	lsrs	r3, r3, #6
 80018d4:	2200      	movs	r2, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	4611      	mov	r1, r2
 80018da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80018de:	623b      	str	r3, [r7, #32]
 80018e0:	2300      	movs	r3, #0
 80018e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018e8:	4642      	mov	r2, r8
 80018ea:	464b      	mov	r3, r9
 80018ec:	f04f 0000 	mov.w	r0, #0
 80018f0:	f04f 0100 	mov.w	r1, #0
 80018f4:	0159      	lsls	r1, r3, #5
 80018f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018fa:	0150      	lsls	r0, r2, #5
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4641      	mov	r1, r8
 8001902:	ebb2 0a01 	subs.w	sl, r2, r1
 8001906:	4649      	mov	r1, r9
 8001908:	eb63 0b01 	sbc.w	fp, r3, r1
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001918:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800191c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001920:	ebb2 040a 	subs.w	r4, r2, sl
 8001924:	eb63 050b 	sbc.w	r5, r3, fp
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	00eb      	lsls	r3, r5, #3
 8001932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001936:	00e2      	lsls	r2, r4, #3
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	4643      	mov	r3, r8
 800193e:	18e3      	adds	r3, r4, r3
 8001940:	603b      	str	r3, [r7, #0]
 8001942:	464b      	mov	r3, r9
 8001944:	eb45 0303 	adc.w	r3, r5, r3
 8001948:	607b      	str	r3, [r7, #4]
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	f04f 0300 	mov.w	r3, #0
 8001952:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001956:	4629      	mov	r1, r5
 8001958:	028b      	lsls	r3, r1, #10
 800195a:	4621      	mov	r1, r4
 800195c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001960:	4621      	mov	r1, r4
 8001962:	028a      	lsls	r2, r1, #10
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800196a:	2200      	movs	r2, #0
 800196c:	61bb      	str	r3, [r7, #24]
 800196e:	61fa      	str	r2, [r7, #28]
 8001970:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001974:	f7fe fc3c 	bl	80001f0 <__aeabi_uldivmod>
 8001978:	4602      	mov	r2, r0
 800197a:	460b      	mov	r3, r1
 800197c:	4613      	mov	r3, r2
 800197e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001980:	4b0b      	ldr	r3, [pc, #44]	@ (80019b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	0c1b      	lsrs	r3, r3, #16
 8001986:	f003 0303 	and.w	r3, r3, #3
 800198a:	3301      	adds	r3, #1
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001990:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001992:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001994:	fbb2 f3f3 	udiv	r3, r2, r3
 8001998:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800199a:	e002      	b.n	80019a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800199e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3750      	adds	r7, #80	@ 0x50
 80019a8:	46bd      	mov	sp, r7
 80019aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	007a1200 	.word	0x007a1200

080019bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000000 	.word	0x20000000

080019d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019d8:	f7ff fff0 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b05      	ldr	r3, [pc, #20]	@ (80019f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	0a9b      	lsrs	r3, r3, #10
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	4903      	ldr	r1, [pc, #12]	@ (80019f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40023800 	.word	0x40023800
 80019f8:	080057e0 	.word	0x080057e0

080019fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a00:	f7ff ffdc 	bl	80019bc <HAL_RCC_GetHCLKFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	4b05      	ldr	r3, [pc, #20]	@ (8001a1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	0b5b      	lsrs	r3, r3, #13
 8001a0c:	f003 0307 	and.w	r3, r3, #7
 8001a10:	4903      	ldr	r1, [pc, #12]	@ (8001a20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a12:	5ccb      	ldrb	r3, [r1, r3]
 8001a14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	080057e0 	.word	0x080057e0

08001a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e042      	b.n	8001abc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d106      	bne.n	8001a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7fe ffb0 	bl	80009b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2224      	movs	r2, #36	@ 0x24
 8001a54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f973 	bl	8001d54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	691a      	ldr	r2, [r3, #16]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68da      	ldr	r2, [r3, #12]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2220      	movs	r2, #32
 8001ab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	603b      	str	r3, [r7, #0]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b20      	cmp	r3, #32
 8001ae2:	d175      	bne.n	8001bd0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <HAL_UART_Transmit+0x2c>
 8001aea:	88fb      	ldrh	r3, [r7, #6]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d101      	bne.n	8001af4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e06e      	b.n	8001bd2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2200      	movs	r2, #0
 8001af8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2221      	movs	r2, #33	@ 0x21
 8001afe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b02:	f7ff f867 	bl	8000bd4 <HAL_GetTick>
 8001b06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	88fa      	ldrh	r2, [r7, #6]
 8001b0c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	88fa      	ldrh	r2, [r7, #6]
 8001b12:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b1c:	d108      	bne.n	8001b30 <HAL_UART_Transmit+0x6c>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d104      	bne.n	8001b30 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	61bb      	str	r3, [r7, #24]
 8001b2e:	e003      	b.n	8001b38 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b38:	e02e      	b.n	8001b98 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	2200      	movs	r2, #0
 8001b42:	2180      	movs	r1, #128	@ 0x80
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f000 f848 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d005      	beq.n	8001b5c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	2220      	movs	r2, #32
 8001b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e03a      	b.n	8001bd2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b5c:	69fb      	ldr	r3, [r7, #28]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10b      	bne.n	8001b7a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	881b      	ldrh	r3, [r3, #0]
 8001b66:	461a      	mov	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	3302      	adds	r3, #2
 8001b76:	61bb      	str	r3, [r7, #24]
 8001b78:	e007      	b.n	8001b8a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	781a      	ldrb	r2, [r3, #0]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	3b01      	subs	r3, #1
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b9c:	b29b      	uxth	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1cb      	bne.n	8001b3a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	2140      	movs	r1, #64	@ 0x40
 8001bac:	68f8      	ldr	r0, [r7, #12]
 8001bae:	f000 f814 	bl	8001bda <UART_WaitOnFlagUntilTimeout>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d005      	beq.n	8001bc4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2220      	movs	r2, #32
 8001bbc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e006      	b.n	8001bd2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	e000      	b.n	8001bd2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001bd0:	2302      	movs	r3, #2
  }
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3720      	adds	r7, #32
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b086      	sub	sp, #24
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	60f8      	str	r0, [r7, #12]
 8001be2:	60b9      	str	r1, [r7, #8]
 8001be4:	603b      	str	r3, [r7, #0]
 8001be6:	4613      	mov	r3, r2
 8001be8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bea:	e03b      	b.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf2:	d037      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bf4:	f7fe ffee 	bl	8000bd4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	6a3a      	ldr	r2, [r7, #32]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d302      	bcc.n	8001c0a <UART_WaitOnFlagUntilTimeout+0x30>
 8001c04:	6a3b      	ldr	r3, [r7, #32]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e03a      	b.n	8001c84 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0304 	and.w	r3, r3, #4
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d023      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	2b80      	cmp	r3, #128	@ 0x80
 8001c20:	d020      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c22:	68bb      	ldr	r3, [r7, #8]
 8001c24:	2b40      	cmp	r3, #64	@ 0x40
 8001c26:	d01d      	beq.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	2b08      	cmp	r3, #8
 8001c34:	d116      	bne.n	8001c64 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	617b      	str	r3, [r7, #20]
 8001c4a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f000 f81d 	bl	8001c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2208      	movs	r2, #8
 8001c56:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e00f      	b.n	8001c84 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	68ba      	ldr	r2, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	bf0c      	ite	eq
 8001c74:	2301      	moveq	r3, #1
 8001c76:	2300      	movne	r3, #0
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d0b4      	beq.n	8001bec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b095      	sub	sp, #84	@ 0x54
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c9e:	e853 3f00 	ldrex	r3, [r3]
 8001ca2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ca6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001cb4:	643a      	str	r2, [r7, #64]	@ 0x40
 8001cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cba:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cbc:	e841 2300 	strex	r3, r2, [r1]
 8001cc0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e5      	bne.n	8001c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	3314      	adds	r3, #20
 8001cce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	e853 3f00 	ldrex	r3, [r3]
 8001cd6:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	3314      	adds	r3, #20
 8001ce6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001ce8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001cf0:	e841 2300 	strex	r3, r2, [r1]
 8001cf4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e5      	bne.n	8001cc8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d119      	bne.n	8001d38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	330c      	adds	r3, #12
 8001d0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	e853 3f00 	ldrex	r3, [r3]
 8001d12:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f023 0310 	bic.w	r3, r3, #16
 8001d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	330c      	adds	r3, #12
 8001d22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d24:	61ba      	str	r2, [r7, #24]
 8001d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d28:	6979      	ldr	r1, [r7, #20]
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	e841 2300 	strex	r3, r2, [r1]
 8001d30:	613b      	str	r3, [r7, #16]
   return(result);
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1e5      	bne.n	8001d04 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2200      	movs	r2, #0
 8001d44:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d46:	bf00      	nop
 8001d48:	3754      	adds	r7, #84	@ 0x54
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d58:	b0c0      	sub	sp, #256	@ 0x100
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d70:	68d9      	ldr	r1, [r3, #12]
 8001d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	ea40 0301 	orr.w	r3, r0, r1
 8001d7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	431a      	orrs	r2, r3
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001dac:	f021 010c 	bic.w	r1, r1, #12
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dba:	430b      	orrs	r3, r1
 8001dbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001dbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dce:	6999      	ldr	r1, [r3, #24]
 8001dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	ea40 0301 	orr.w	r3, r0, r1
 8001dda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b8f      	ldr	r3, [pc, #572]	@ (8002020 <UART_SetConfig+0x2cc>)
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d005      	beq.n	8001df4 <UART_SetConfig+0xa0>
 8001de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4b8d      	ldr	r3, [pc, #564]	@ (8002024 <UART_SetConfig+0x2d0>)
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d104      	bne.n	8001dfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001df4:	f7ff fe02 	bl	80019fc <HAL_RCC_GetPCLK2Freq>
 8001df8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001dfc:	e003      	b.n	8001e06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dfe:	f7ff fde9 	bl	80019d4 <HAL_RCC_GetPCLK1Freq>
 8001e02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e0a:	69db      	ldr	r3, [r3, #28]
 8001e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e10:	f040 810c 	bne.w	800202c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e18:	2200      	movs	r2, #0
 8001e1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e26:	4622      	mov	r2, r4
 8001e28:	462b      	mov	r3, r5
 8001e2a:	1891      	adds	r1, r2, r2
 8001e2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e2e:	415b      	adcs	r3, r3
 8001e30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e36:	4621      	mov	r1, r4
 8001e38:	eb12 0801 	adds.w	r8, r2, r1
 8001e3c:	4629      	mov	r1, r5
 8001e3e:	eb43 0901 	adc.w	r9, r3, r1
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e56:	4690      	mov	r8, r2
 8001e58:	4699      	mov	r9, r3
 8001e5a:	4623      	mov	r3, r4
 8001e5c:	eb18 0303 	adds.w	r3, r8, r3
 8001e60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e64:	462b      	mov	r3, r5
 8001e66:	eb49 0303 	adc.w	r3, r9, r3
 8001e6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e82:	460b      	mov	r3, r1
 8001e84:	18db      	adds	r3, r3, r3
 8001e86:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e88:	4613      	mov	r3, r2
 8001e8a:	eb42 0303 	adc.w	r3, r2, r3
 8001e8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e98:	f7fe f9aa 	bl	80001f0 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4b61      	ldr	r3, [pc, #388]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	011c      	lsls	r4, r3, #4
 8001eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001eb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001eb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ec8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001ecc:	4641      	mov	r1, r8
 8001ece:	eb12 0a01 	adds.w	sl, r2, r1
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	eb43 0b01 	adc.w	fp, r3, r1
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ee4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ee8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001eec:	4692      	mov	sl, r2
 8001eee:	469b      	mov	fp, r3
 8001ef0:	4643      	mov	r3, r8
 8001ef2:	eb1a 0303 	adds.w	r3, sl, r3
 8001ef6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001efa:	464b      	mov	r3, r9
 8001efc:	eb4b 0303 	adc.w	r3, fp, r3
 8001f00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	18db      	adds	r3, r3, r3
 8001f1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f1e:	4613      	mov	r3, r2
 8001f20:	eb42 0303 	adc.w	r3, r2, r3
 8001f24:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f2e:	f7fe f95f 	bl	80001f0 <__aeabi_uldivmod>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	4611      	mov	r1, r2
 8001f38:	4b3b      	ldr	r3, [pc, #236]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2264      	movs	r2, #100	@ 0x64
 8001f42:	fb02 f303 	mul.w	r3, r2, r3
 8001f46:	1acb      	subs	r3, r1, r3
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f4e:	4b36      	ldr	r3, [pc, #216]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001f50:	fba3 2302 	umull	r2, r3, r3, r2
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	005b      	lsls	r3, r3, #1
 8001f58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f5c:	441c      	add	r4, r3
 8001f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f62:	2200      	movs	r2, #0
 8001f64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001f6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f70:	4642      	mov	r2, r8
 8001f72:	464b      	mov	r3, r9
 8001f74:	1891      	adds	r1, r2, r2
 8001f76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f78:	415b      	adcs	r3, r3
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f80:	4641      	mov	r1, r8
 8001f82:	1851      	adds	r1, r2, r1
 8001f84:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f86:	4649      	mov	r1, r9
 8001f88:	414b      	adcs	r3, r1
 8001f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f98:	4659      	mov	r1, fp
 8001f9a:	00cb      	lsls	r3, r1, #3
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	00ca      	lsls	r2, r1, #3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	4642      	mov	r2, r8
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fb4:	464b      	mov	r3, r9
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	eb42 0303 	adc.w	r3, r2, r3
 8001fbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001fcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001fd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	18db      	adds	r3, r3, r3
 8001fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fda:	4613      	mov	r3, r2
 8001fdc:	eb42 0303 	adc.w	r3, r2, r3
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001fe2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fe6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001fea:	f7fe f901 	bl	80001f0 <__aeabi_uldivmod>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	460b      	mov	r3, r1
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <UART_SetConfig+0x2d4>)
 8001ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	2164      	movs	r1, #100	@ 0x64
 8001ffc:	fb01 f303 	mul.w	r3, r1, r3
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	3332      	adds	r3, #50	@ 0x32
 8002006:	4a08      	ldr	r2, [pc, #32]	@ (8002028 <UART_SetConfig+0x2d4>)
 8002008:	fba2 2303 	umull	r2, r3, r2, r3
 800200c:	095b      	lsrs	r3, r3, #5
 800200e:	f003 0207 	and.w	r2, r3, #7
 8002012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4422      	add	r2, r4
 800201a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800201c:	e106      	b.n	800222c <UART_SetConfig+0x4d8>
 800201e:	bf00      	nop
 8002020:	40011000 	.word	0x40011000
 8002024:	40011400 	.word	0x40011400
 8002028:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800202c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002030:	2200      	movs	r2, #0
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002036:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800203a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800203e:	4642      	mov	r2, r8
 8002040:	464b      	mov	r3, r9
 8002042:	1891      	adds	r1, r2, r2
 8002044:	6239      	str	r1, [r7, #32]
 8002046:	415b      	adcs	r3, r3
 8002048:	627b      	str	r3, [r7, #36]	@ 0x24
 800204a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800204e:	4641      	mov	r1, r8
 8002050:	1854      	adds	r4, r2, r1
 8002052:	4649      	mov	r1, r9
 8002054:	eb43 0501 	adc.w	r5, r3, r1
 8002058:	f04f 0200 	mov.w	r2, #0
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	00eb      	lsls	r3, r5, #3
 8002062:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002066:	00e2      	lsls	r2, r4, #3
 8002068:	4614      	mov	r4, r2
 800206a:	461d      	mov	r5, r3
 800206c:	4643      	mov	r3, r8
 800206e:	18e3      	adds	r3, r4, r3
 8002070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002074:	464b      	mov	r3, r9
 8002076:	eb45 0303 	adc.w	r3, r5, r3
 800207a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800207e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800208a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	f04f 0300 	mov.w	r3, #0
 8002096:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800209a:	4629      	mov	r1, r5
 800209c:	008b      	lsls	r3, r1, #2
 800209e:	4621      	mov	r1, r4
 80020a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020a4:	4621      	mov	r1, r4
 80020a6:	008a      	lsls	r2, r1, #2
 80020a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020ac:	f7fe f8a0 	bl	80001f0 <__aeabi_uldivmod>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4b60      	ldr	r3, [pc, #384]	@ (8002238 <UART_SetConfig+0x4e4>)
 80020b6:	fba3 2302 	umull	r2, r3, r3, r2
 80020ba:	095b      	lsrs	r3, r3, #5
 80020bc:	011c      	lsls	r4, r3, #4
 80020be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020c2:	2200      	movs	r2, #0
 80020c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80020cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	1891      	adds	r1, r2, r2
 80020d6:	61b9      	str	r1, [r7, #24]
 80020d8:	415b      	adcs	r3, r3
 80020da:	61fb      	str	r3, [r7, #28]
 80020dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020e0:	4641      	mov	r1, r8
 80020e2:	1851      	adds	r1, r2, r1
 80020e4:	6139      	str	r1, [r7, #16]
 80020e6:	4649      	mov	r1, r9
 80020e8:	414b      	adcs	r3, r1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	f04f 0200 	mov.w	r2, #0
 80020f0:	f04f 0300 	mov.w	r3, #0
 80020f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020f8:	4659      	mov	r1, fp
 80020fa:	00cb      	lsls	r3, r1, #3
 80020fc:	4651      	mov	r1, sl
 80020fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002102:	4651      	mov	r1, sl
 8002104:	00ca      	lsls	r2, r1, #3
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	4603      	mov	r3, r0
 800210c:	4642      	mov	r2, r8
 800210e:	189b      	adds	r3, r3, r2
 8002110:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002114:	464b      	mov	r3, r9
 8002116:	460a      	mov	r2, r1
 8002118:	eb42 0303 	adc.w	r3, r2, r3
 800211c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	67bb      	str	r3, [r7, #120]	@ 0x78
 800212a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002138:	4649      	mov	r1, r9
 800213a:	008b      	lsls	r3, r1, #2
 800213c:	4641      	mov	r1, r8
 800213e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002142:	4641      	mov	r1, r8
 8002144:	008a      	lsls	r2, r1, #2
 8002146:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800214a:	f7fe f851 	bl	80001f0 <__aeabi_uldivmod>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4611      	mov	r1, r2
 8002154:	4b38      	ldr	r3, [pc, #224]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002156:	fba3 2301 	umull	r2, r3, r3, r1
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	2264      	movs	r2, #100	@ 0x64
 800215e:	fb02 f303 	mul.w	r3, r2, r3
 8002162:	1acb      	subs	r3, r1, r3
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	3332      	adds	r3, #50	@ 0x32
 8002168:	4a33      	ldr	r2, [pc, #204]	@ (8002238 <UART_SetConfig+0x4e4>)
 800216a:	fba2 2303 	umull	r2, r3, r2, r3
 800216e:	095b      	lsrs	r3, r3, #5
 8002170:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002174:	441c      	add	r4, r3
 8002176:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800217a:	2200      	movs	r2, #0
 800217c:	673b      	str	r3, [r7, #112]	@ 0x70
 800217e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002180:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002184:	4642      	mov	r2, r8
 8002186:	464b      	mov	r3, r9
 8002188:	1891      	adds	r1, r2, r2
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	415b      	adcs	r3, r3
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002194:	4641      	mov	r1, r8
 8002196:	1851      	adds	r1, r2, r1
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	4649      	mov	r1, r9
 800219c:	414b      	adcs	r3, r1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	f04f 0200 	mov.w	r2, #0
 80021a4:	f04f 0300 	mov.w	r3, #0
 80021a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021ac:	4659      	mov	r1, fp
 80021ae:	00cb      	lsls	r3, r1, #3
 80021b0:	4651      	mov	r1, sl
 80021b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021b6:	4651      	mov	r1, sl
 80021b8:	00ca      	lsls	r2, r1, #3
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	4603      	mov	r3, r0
 80021c0:	4642      	mov	r2, r8
 80021c2:	189b      	adds	r3, r3, r2
 80021c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021c6:	464b      	mov	r3, r9
 80021c8:	460a      	mov	r2, r1
 80021ca:	eb42 0303 	adc.w	r3, r2, r3
 80021ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80021d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80021da:	667a      	str	r2, [r7, #100]	@ 0x64
 80021dc:	f04f 0200 	mov.w	r2, #0
 80021e0:	f04f 0300 	mov.w	r3, #0
 80021e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80021e8:	4649      	mov	r1, r9
 80021ea:	008b      	lsls	r3, r1, #2
 80021ec:	4641      	mov	r1, r8
 80021ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021f2:	4641      	mov	r1, r8
 80021f4:	008a      	lsls	r2, r1, #2
 80021f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80021fa:	f7fd fff9 	bl	80001f0 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002204:	fba3 1302 	umull	r1, r3, r3, r2
 8002208:	095b      	lsrs	r3, r3, #5
 800220a:	2164      	movs	r1, #100	@ 0x64
 800220c:	fb01 f303 	mul.w	r3, r1, r3
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	3332      	adds	r3, #50	@ 0x32
 8002216:	4a08      	ldr	r2, [pc, #32]	@ (8002238 <UART_SetConfig+0x4e4>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	095b      	lsrs	r3, r3, #5
 800221e:	f003 020f 	and.w	r2, r3, #15
 8002222:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4422      	add	r2, r4
 800222a:	609a      	str	r2, [r3, #8]
}
 800222c:	bf00      	nop
 800222e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002232:	46bd      	mov	sp, r7
 8002234:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002238:	51eb851f 	.word	0x51eb851f

0800223c <__NVIC_SetPriority>:
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	4603      	mov	r3, r0
 8002244:	6039      	str	r1, [r7, #0]
 8002246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224c:	2b00      	cmp	r3, #0
 800224e:	db0a      	blt.n	8002266 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	490c      	ldr	r1, [pc, #48]	@ (8002288 <__NVIC_SetPriority+0x4c>)
 8002256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225a:	0112      	lsls	r2, r2, #4
 800225c:	b2d2      	uxtb	r2, r2
 800225e:	440b      	add	r3, r1
 8002260:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002264:	e00a      	b.n	800227c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	b2da      	uxtb	r2, r3
 800226a:	4908      	ldr	r1, [pc, #32]	@ (800228c <__NVIC_SetPriority+0x50>)
 800226c:	79fb      	ldrb	r3, [r7, #7]
 800226e:	f003 030f 	and.w	r3, r3, #15
 8002272:	3b04      	subs	r3, #4
 8002274:	0112      	lsls	r2, r2, #4
 8002276:	b2d2      	uxtb	r2, r2
 8002278:	440b      	add	r3, r1
 800227a:	761a      	strb	r2, [r3, #24]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr
 8002288:	e000e100 	.word	0xe000e100
 800228c:	e000ed00 	.word	0xe000ed00

08002290 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002294:	2100      	movs	r1, #0
 8002296:	f06f 0004 	mvn.w	r0, #4
 800229a:	f7ff ffcf 	bl	800223c <__NVIC_SetPriority>
#endif
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
	...

080022a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022aa:	f3ef 8305 	mrs	r3, IPSR
 80022ae:	603b      	str	r3, [r7, #0]
  return(result);
 80022b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022b6:	f06f 0305 	mvn.w	r3, #5
 80022ba:	607b      	str	r3, [r7, #4]
 80022bc:	e00c      	b.n	80022d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022be:	4b0a      	ldr	r3, [pc, #40]	@ (80022e8 <osKernelInitialize+0x44>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022c6:	4b08      	ldr	r3, [pc, #32]	@ (80022e8 <osKernelInitialize+0x44>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80022cc:	2300      	movs	r3, #0
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	e002      	b.n	80022d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022d8:	687b      	ldr	r3, [r7, #4]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	20000080 	.word	0x20000080

080022ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022f2:	f3ef 8305 	mrs	r3, IPSR
 80022f6:	603b      	str	r3, [r7, #0]
  return(result);
 80022f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d003      	beq.n	8002306 <osKernelStart+0x1a>
    stat = osErrorISR;
 80022fe:	f06f 0305 	mvn.w	r3, #5
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	e010      	b.n	8002328 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002306:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <osKernelStart+0x48>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d109      	bne.n	8002322 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800230e:	f7ff ffbf 	bl	8002290 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002312:	4b08      	ldr	r3, [pc, #32]	@ (8002334 <osKernelStart+0x48>)
 8002314:	2202      	movs	r2, #2
 8002316:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002318:	f001 fa84 	bl	8003824 <vTaskStartScheduler>
      stat = osOK;
 800231c:	2300      	movs	r3, #0
 800231e:	607b      	str	r3, [r7, #4]
 8002320:	e002      	b.n	8002328 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002328:	687b      	ldr	r3, [r7, #4]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3708      	adds	r7, #8
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000080 	.word	0x20000080

08002338 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b08e      	sub	sp, #56	@ 0x38
 800233c:	af04      	add	r7, sp, #16
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002344:	2300      	movs	r3, #0
 8002346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002348:	f3ef 8305 	mrs	r3, IPSR
 800234c:	617b      	str	r3, [r7, #20]
  return(result);
 800234e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002350:	2b00      	cmp	r3, #0
 8002352:	d17e      	bne.n	8002452 <osThreadNew+0x11a>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d07b      	beq.n	8002452 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800235a:	2380      	movs	r3, #128	@ 0x80
 800235c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800235e:	2318      	movs	r3, #24
 8002360:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002362:	2300      	movs	r3, #0
 8002364:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d045      	beq.n	80023fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d002      	beq.n	8002380 <osThreadNew+0x48>
        name = attr->name;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d002      	beq.n	800238e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	699b      	ldr	r3, [r3, #24]
 800238c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800238e:	69fb      	ldr	r3, [r7, #28]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <osThreadNew+0x6e>
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b38      	cmp	r3, #56	@ 0x38
 8002398:	d805      	bhi.n	80023a6 <osThreadNew+0x6e>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d001      	beq.n	80023aa <osThreadNew+0x72>
        return (NULL);
 80023a6:	2300      	movs	r3, #0
 80023a8:	e054      	b.n	8002454 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d003      	beq.n	80023ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	089b      	lsrs	r3, r3, #2
 80023b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00e      	beq.n	80023e0 <osThreadNew+0xa8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b5b      	cmp	r3, #91	@ 0x5b
 80023c8:	d90a      	bls.n	80023e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d006      	beq.n	80023e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	695b      	ldr	r3, [r3, #20]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d002      	beq.n	80023e0 <osThreadNew+0xa8>
        mem = 1;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	e010      	b.n	8002402 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10c      	bne.n	8002402 <osThreadNew+0xca>
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d108      	bne.n	8002402 <osThreadNew+0xca>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691b      	ldr	r3, [r3, #16]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d104      	bne.n	8002402 <osThreadNew+0xca>
          mem = 0;
 80023f8:	2300      	movs	r3, #0
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	e001      	b.n	8002402 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d110      	bne.n	800242a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002410:	9202      	str	r2, [sp, #8]
 8002412:	9301      	str	r3, [sp, #4]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	9300      	str	r3, [sp, #0]
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	6a3a      	ldr	r2, [r7, #32]
 800241c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800241e:	68f8      	ldr	r0, [r7, #12]
 8002420:	f000 ffb0 	bl	8003384 <xTaskCreateStatic>
 8002424:	4603      	mov	r3, r0
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	e013      	b.n	8002452 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800242a:	69bb      	ldr	r3, [r7, #24]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d110      	bne.n	8002452 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	b29a      	uxth	r2, r3
 8002434:	f107 0310 	add.w	r3, r7, #16
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 fffe 	bl	8003444 <xTaskCreate>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d001      	beq.n	8002452 <osThreadNew+0x11a>
            hTask = NULL;
 800244e:	2300      	movs	r3, #0
 8002450:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002452:	693b      	ldr	r3, [r7, #16]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3728      	adds	r7, #40	@ 0x28
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002464:	f3ef 8305 	mrs	r3, IPSR
 8002468:	60bb      	str	r3, [r7, #8]
  return(result);
 800246a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <osDelay+0x1c>
    stat = osErrorISR;
 8002470:	f06f 0305 	mvn.w	r3, #5
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	e007      	b.n	8002488 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002478:	2300      	movs	r3, #0
 800247a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d002      	beq.n	8002488 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f001 f998 	bl	80037b8 <vTaskDelay>
    }
  }

  return (stat);
 8002488:	68fb      	ldr	r3, [r7, #12]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3710      	adds	r7, #16
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
	...

08002494 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4a07      	ldr	r2, [pc, #28]	@ (80024c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80024a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	4a06      	ldr	r2, [pc, #24]	@ (80024c4 <vApplicationGetIdleTaskMemory+0x30>)
 80024aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2280      	movs	r2, #128	@ 0x80
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000084 	.word	0x20000084
 80024c4:	200000e0 	.word	0x200000e0

080024c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80024d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <vApplicationGetTimerTaskMemory+0x30>)
 80024de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024e6:	601a      	str	r2, [r3, #0]
}
 80024e8:	bf00      	nop
 80024ea:	3714      	adds	r7, #20
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	200002e0 	.word	0x200002e0
 80024f8:	2000033c 	.word	0x2000033c

080024fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f103 0208 	add.w	r2, r3, #8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f04f 32ff 	mov.w	r2, #4294967295
 8002514:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f103 0208 	add.w	r2, r3, #8
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f103 0208 	add.w	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002556:	b480      	push	{r7}
 8002558:	b085      	sub	sp, #20
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
 800255e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	68fa      	ldr	r2, [r7, #12]
 800256a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	689a      	ldr	r2, [r3, #8]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3714      	adds	r7, #20
 8002596:	46bd      	mov	sp, r7
 8002598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259c:	4770      	bx	lr

0800259e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800259e:	b480      	push	{r7}
 80025a0:	b085      	sub	sp, #20
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	6078      	str	r0, [r7, #4]
 80025a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025b4:	d103      	bne.n	80025be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e00c      	b.n	80025d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	3308      	adds	r3, #8
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	e002      	b.n	80025cc <vListInsert+0x2e>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d2f6      	bcs.n	80025c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	683a      	ldr	r2, [r7, #0]
 80025e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	1c5a      	adds	r2, r3, #1
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	601a      	str	r2, [r3, #0]
}
 8002604:	bf00      	nop
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6892      	ldr	r2, [r2, #8]
 8002626:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6852      	ldr	r2, [r2, #4]
 8002630:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	429a      	cmp	r2, r3
 800263a:	d103      	bne.n	8002644 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	689a      	ldr	r2, [r3, #8]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2200      	movs	r2, #0
 8002648:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	1e5a      	subs	r2, r3, #1
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
}
 8002658:	4618      	mov	r0, r3
 800265a:	3714      	adds	r7, #20
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10b      	bne.n	8002690 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800267c:	f383 8811 	msr	BASEPRI, r3
 8002680:	f3bf 8f6f 	isb	sy
 8002684:	f3bf 8f4f 	dsb	sy
 8002688:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800268a:	bf00      	nop
 800268c:	bf00      	nop
 800268e:	e7fd      	b.n	800268c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002690:	f002 fb82 	bl	8004d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	68f9      	ldr	r1, [r7, #12]
 800269e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	441a      	add	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2200      	movs	r2, #0
 80026ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681a      	ldr	r2, [r3, #0]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026c0:	3b01      	subs	r3, #1
 80026c2:	68f9      	ldr	r1, [r7, #12]
 80026c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026c6:	fb01 f303 	mul.w	r3, r1, r3
 80026ca:	441a      	add	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	22ff      	movs	r2, #255	@ 0xff
 80026d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	22ff      	movs	r2, #255	@ 0xff
 80026dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d114      	bne.n	8002710 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01a      	beq.n	8002724 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	3310      	adds	r3, #16
 80026f2:	4618      	mov	r0, r3
 80026f4:	f001 fb24 	bl	8003d40 <xTaskRemoveFromEventList>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d012      	beq.n	8002724 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80026fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002734 <xQueueGenericReset+0xd0>)
 8002700:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	e009      	b.n	8002724 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	3310      	adds	r3, #16
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff fef1 	bl	80024fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	3324      	adds	r3, #36	@ 0x24
 800271e:	4618      	mov	r0, r3
 8002720:	f7ff feec 	bl	80024fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002724:	f002 fb6a 	bl	8004dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002728:	2301      	movs	r3, #1
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	e000ed04 	.word	0xe000ed04

08002738 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08e      	sub	sp, #56	@ 0x38
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
 8002744:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d10b      	bne.n	8002764 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800274c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002750:	f383 8811 	msr	BASEPRI, r3
 8002754:	f3bf 8f6f 	isb	sy
 8002758:	f3bf 8f4f 	dsb	sy
 800275c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800275e:	bf00      	nop
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800276a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800276e:	f383 8811 	msr	BASEPRI, r3
 8002772:	f3bf 8f6f 	isb	sy
 8002776:	f3bf 8f4f 	dsb	sy
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800277c:	bf00      	nop
 800277e:	bf00      	nop
 8002780:	e7fd      	b.n	800277e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d002      	beq.n	800278e <xQueueGenericCreateStatic+0x56>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <xQueueGenericCreateStatic+0x5a>
 800278e:	2301      	movs	r3, #1
 8002790:	e000      	b.n	8002794 <xQueueGenericCreateStatic+0x5c>
 8002792:	2300      	movs	r3, #0
 8002794:	2b00      	cmp	r3, #0
 8002796:	d10b      	bne.n	80027b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800279c:	f383 8811 	msr	BASEPRI, r3
 80027a0:	f3bf 8f6f 	isb	sy
 80027a4:	f3bf 8f4f 	dsb	sy
 80027a8:	623b      	str	r3, [r7, #32]
}
 80027aa:	bf00      	nop
 80027ac:	bf00      	nop
 80027ae:	e7fd      	b.n	80027ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d102      	bne.n	80027bc <xQueueGenericCreateStatic+0x84>
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <xQueueGenericCreateStatic+0x88>
 80027bc:	2301      	movs	r3, #1
 80027be:	e000      	b.n	80027c2 <xQueueGenericCreateStatic+0x8a>
 80027c0:	2300      	movs	r3, #0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10b      	bne.n	80027de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	61fb      	str	r3, [r7, #28]
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	e7fd      	b.n	80027da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80027de:	2350      	movs	r3, #80	@ 0x50
 80027e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	2b50      	cmp	r3, #80	@ 0x50
 80027e6:	d00b      	beq.n	8002800 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	61bb      	str	r3, [r7, #24]
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	e7fd      	b.n	80027fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002800:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00d      	beq.n	8002828 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800280c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800280e:	2201      	movs	r2, #1
 8002810:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002814:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	4613      	mov	r3, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68b9      	ldr	r1, [r7, #8]
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 f840 	bl	80028a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800282a:	4618      	mov	r0, r3
 800282c:	3730      	adds	r7, #48	@ 0x30
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002832:	b580      	push	{r7, lr}
 8002834:	b08a      	sub	sp, #40	@ 0x28
 8002836:	af02      	add	r7, sp, #8
 8002838:	60f8      	str	r0, [r7, #12]
 800283a:	60b9      	str	r1, [r7, #8]
 800283c:	4613      	mov	r3, r2
 800283e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d10b      	bne.n	800285e <xQueueGenericCreate+0x2c>
	__asm volatile
 8002846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800284a:	f383 8811 	msr	BASEPRI, r3
 800284e:	f3bf 8f6f 	isb	sy
 8002852:	f3bf 8f4f 	dsb	sy
 8002856:	613b      	str	r3, [r7, #16]
}
 8002858:	bf00      	nop
 800285a:	bf00      	nop
 800285c:	e7fd      	b.n	800285a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	3350      	adds	r3, #80	@ 0x50
 800286c:	4618      	mov	r0, r3
 800286e:	f002 fbb5 	bl	8004fdc <pvPortMalloc>
 8002872:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d011      	beq.n	800289e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	3350      	adds	r3, #80	@ 0x50
 8002882:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800288c:	79fa      	ldrb	r2, [r7, #7]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4613      	mov	r3, r2
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	68b9      	ldr	r1, [r7, #8]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f805 	bl	80028a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800289e:	69bb      	ldr	r3, [r7, #24]
	}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3720      	adds	r7, #32
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
 80028b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d103      	bne.n	80028c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e002      	b.n	80028ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80028d6:	2101      	movs	r1, #1
 80028d8:	69b8      	ldr	r0, [r7, #24]
 80028da:	f7ff fec3 	bl	8002664 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}

080028ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b082      	sub	sp, #8
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800290e:	2300      	movs	r3, #0
 8002910:	2200      	movs	r2, #0
 8002912:	2100      	movs	r1, #0
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f000 f81d 	bl	8002954 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800292c:	2301      	movs	r3, #1
 800292e:	617b      	str	r3, [r7, #20]
 8002930:	2300      	movs	r3, #0
 8002932:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002934:	79fb      	ldrb	r3, [r7, #7]
 8002936:	461a      	mov	r2, r3
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	6978      	ldr	r0, [r7, #20]
 800293c:	f7ff ff79 	bl	8002832 <xQueueGenericCreate>
 8002940:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002942:	68f8      	ldr	r0, [r7, #12]
 8002944:	f7ff ffd3 	bl	80028ee <prvInitialiseMutex>

		return xNewQueue;
 8002948:	68fb      	ldr	r3, [r7, #12]
	}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08e      	sub	sp, #56	@ 0x38
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002962:	2300      	movs	r3, #0
 8002964:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800296a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <xQueueGenericSend+0x34>
	__asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d103      	bne.n	8002996 <xQueueGenericSend+0x42>
 800298e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <xQueueGenericSend+0x46>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <xQueueGenericSend+0x48>
 800299a:	2300      	movs	r3, #0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d10b      	bne.n	80029b8 <xQueueGenericSend+0x64>
	__asm volatile
 80029a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029a4:	f383 8811 	msr	BASEPRI, r3
 80029a8:	f3bf 8f6f 	isb	sy
 80029ac:	f3bf 8f4f 	dsb	sy
 80029b0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80029b2:	bf00      	nop
 80029b4:	bf00      	nop
 80029b6:	e7fd      	b.n	80029b4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d103      	bne.n	80029c6 <xQueueGenericSend+0x72>
 80029be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <xQueueGenericSend+0x76>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e000      	b.n	80029cc <xQueueGenericSend+0x78>
 80029ca:	2300      	movs	r3, #0
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10b      	bne.n	80029e8 <xQueueGenericSend+0x94>
	__asm volatile
 80029d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029d4:	f383 8811 	msr	BASEPRI, r3
 80029d8:	f3bf 8f6f 	isb	sy
 80029dc:	f3bf 8f4f 	dsb	sy
 80029e0:	623b      	str	r3, [r7, #32]
}
 80029e2:	bf00      	nop
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029e8:	f001 fb6a 	bl	80040c0 <xTaskGetSchedulerState>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d102      	bne.n	80029f8 <xQueueGenericSend+0xa4>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <xQueueGenericSend+0xa8>
 80029f8:	2301      	movs	r3, #1
 80029fa:	e000      	b.n	80029fe <xQueueGenericSend+0xaa>
 80029fc:	2300      	movs	r3, #0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10b      	bne.n	8002a1a <xQueueGenericSend+0xc6>
	__asm volatile
 8002a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a06:	f383 8811 	msr	BASEPRI, r3
 8002a0a:	f3bf 8f6f 	isb	sy
 8002a0e:	f3bf 8f4f 	dsb	sy
 8002a12:	61fb      	str	r3, [r7, #28]
}
 8002a14:	bf00      	nop
 8002a16:	bf00      	nop
 8002a18:	e7fd      	b.n	8002a16 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002a1a:	f002 f9bd 	bl	8004d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <xQueueGenericSend+0xdc>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d129      	bne.n	8002a84 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002a30:	683a      	ldr	r2, [r7, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a36:	f000 fb37 	bl	80030a8 <prvCopyDataToQueue>
 8002a3a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d010      	beq.n	8002a66 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a46:	3324      	adds	r3, #36	@ 0x24
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f001 f979 	bl	8003d40 <xTaskRemoveFromEventList>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d013      	beq.n	8002a7c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002a54:	4b3f      	ldr	r3, [pc, #252]	@ (8002b54 <xQueueGenericSend+0x200>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
 8002a64:	e00a      	b.n	8002a7c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d007      	beq.n	8002a7c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002a6c:	4b39      	ldr	r3, [pc, #228]	@ (8002b54 <xQueueGenericSend+0x200>)
 8002a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a72:	601a      	str	r2, [r3, #0]
 8002a74:	f3bf 8f4f 	dsb	sy
 8002a78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002a7c:	f002 f9be 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e063      	b.n	8002b4c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d103      	bne.n	8002a92 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002a8a:	f002 f9b7 	bl	8004dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	e05c      	b.n	8002b4c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d106      	bne.n	8002aa6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 f9b3 	bl	8003e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002aa6:	f002 f9a9 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002aaa:	f000 ff23 	bl	80038f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002aae:	f002 f973 	bl	8004d98 <vPortEnterCritical>
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002ab8:	b25b      	sxtb	r3, r3
 8002aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002abe:	d103      	bne.n	8002ac8 <xQueueGenericSend+0x174>
 8002ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ace:	b25b      	sxtb	r3, r3
 8002ad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad4:	d103      	bne.n	8002ade <xQueueGenericSend+0x18a>
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ade:	f002 f98d 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ae2:	1d3a      	adds	r2, r7, #4
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4611      	mov	r1, r2
 8002aea:	4618      	mov	r0, r3
 8002aec:	f001 f9a2 	bl	8003e34 <xTaskCheckForTimeOut>
 8002af0:	4603      	mov	r3, r0
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d124      	bne.n	8002b40 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002af6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002af8:	f000 fbce 	bl	8003298 <prvIsQueueFull>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d018      	beq.n	8002b34 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002b02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b04:	3310      	adds	r3, #16
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4611      	mov	r1, r2
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f001 f8c6 	bl	8003c9c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002b10:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b12:	f000 fb59 	bl	80031c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002b16:	f000 fefb 	bl	8003910 <xTaskResumeAll>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f47f af7c 	bne.w	8002a1a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002b22:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <xQueueGenericSend+0x200>)
 8002b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b28:	601a      	str	r2, [r3, #0]
 8002b2a:	f3bf 8f4f 	dsb	sy
 8002b2e:	f3bf 8f6f 	isb	sy
 8002b32:	e772      	b.n	8002a1a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002b34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b36:	f000 fb47 	bl	80031c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b3a:	f000 fee9 	bl	8003910 <xTaskResumeAll>
 8002b3e:	e76c      	b.n	8002a1a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002b40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002b42:	f000 fb41 	bl	80031c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b46:	f000 fee3 	bl	8003910 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002b4a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3738      	adds	r7, #56	@ 0x38
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	e000ed04 	.word	0xe000ed04

08002b58 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b090      	sub	sp, #64	@ 0x40
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	60f8      	str	r0, [r7, #12]
 8002b60:	60b9      	str	r1, [r7, #8]
 8002b62:	607a      	str	r2, [r7, #4]
 8002b64:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002b6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10b      	bne.n	8002b88 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b74:	f383 8811 	msr	BASEPRI, r3
 8002b78:	f3bf 8f6f 	isb	sy
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002b82:	bf00      	nop
 8002b84:	bf00      	nop
 8002b86:	e7fd      	b.n	8002b84 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d103      	bne.n	8002b96 <xQueueGenericSendFromISR+0x3e>
 8002b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <xQueueGenericSendFromISR+0x42>
 8002b96:	2301      	movs	r3, #1
 8002b98:	e000      	b.n	8002b9c <xQueueGenericSendFromISR+0x44>
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d10b      	bne.n	8002bb8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ba4:	f383 8811 	msr	BASEPRI, r3
 8002ba8:	f3bf 8f6f 	isb	sy
 8002bac:	f3bf 8f4f 	dsb	sy
 8002bb0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002bb2:	bf00      	nop
 8002bb4:	bf00      	nop
 8002bb6:	e7fd      	b.n	8002bb4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d103      	bne.n	8002bc6 <xQueueGenericSendFromISR+0x6e>
 8002bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <xQueueGenericSendFromISR+0x72>
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <xQueueGenericSendFromISR+0x74>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10b      	bne.n	8002be8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd4:	f383 8811 	msr	BASEPRI, r3
 8002bd8:	f3bf 8f6f 	isb	sy
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	623b      	str	r3, [r7, #32]
}
 8002be2:	bf00      	nop
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002be8:	f002 f9b6 	bl	8004f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002bec:	f3ef 8211 	mrs	r2, BASEPRI
 8002bf0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf4:	f383 8811 	msr	BASEPRI, r3
 8002bf8:	f3bf 8f6f 	isb	sy
 8002bfc:	f3bf 8f4f 	dsb	sy
 8002c00:	61fa      	str	r2, [r7, #28]
 8002c02:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002c04:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002c06:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d302      	bcc.n	8002c1a <xQueueGenericSendFromISR+0xc2>
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d12f      	bne.n	8002c7a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002c20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c28:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002c2a:	683a      	ldr	r2, [r7, #0]
 8002c2c:	68b9      	ldr	r1, [r7, #8]
 8002c2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002c30:	f000 fa3a 	bl	80030a8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c34:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d112      	bne.n	8002c64 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d016      	beq.n	8002c74 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c48:	3324      	adds	r3, #36	@ 0x24
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f001 f878 	bl	8003d40 <xTaskRemoveFromEventList>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00e      	beq.n	8002c74 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
 8002c62:	e007      	b.n	8002c74 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c64:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002c68:	3301      	adds	r3, #1
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	b25a      	sxtb	r2, r3
 8002c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002c74:	2301      	movs	r3, #1
 8002c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002c78:	e001      	b.n	8002c7e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c80:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002c88:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3740      	adds	r7, #64	@ 0x40
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b08c      	sub	sp, #48	@ 0x30
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10b      	bne.n	8002cc6 <xQueueReceive+0x32>
	__asm volatile
 8002cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb2:	f383 8811 	msr	BASEPRI, r3
 8002cb6:	f3bf 8f6f 	isb	sy
 8002cba:	f3bf 8f4f 	dsb	sy
 8002cbe:	623b      	str	r3, [r7, #32]
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	e7fd      	b.n	8002cc2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <xQueueReceive+0x40>
 8002ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d101      	bne.n	8002cd8 <xQueueReceive+0x44>
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e000      	b.n	8002cda <xQueueReceive+0x46>
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10b      	bne.n	8002cf6 <xQueueReceive+0x62>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	61fb      	str	r3, [r7, #28]
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	e7fd      	b.n	8002cf2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cf6:	f001 f9e3 	bl	80040c0 <xTaskGetSchedulerState>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d102      	bne.n	8002d06 <xQueueReceive+0x72>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueReceive+0x76>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueReceive+0x78>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10b      	bne.n	8002d28 <xQueueReceive+0x94>
	__asm volatile
 8002d10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	61bb      	str	r3, [r7, #24]
}
 8002d22:	bf00      	nop
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d28:	f002 f836 	bl	8004d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d30:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d01f      	beq.n	8002d78 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d38:	68b9      	ldr	r1, [r7, #8]
 8002d3a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d3c:	f000 fa1e 	bl	800317c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d42:	1e5a      	subs	r2, r3, #1
 8002d44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d46:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00f      	beq.n	8002d70 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d52:	3310      	adds	r3, #16
 8002d54:	4618      	mov	r0, r3
 8002d56:	f000 fff3 	bl	8003d40 <xTaskRemoveFromEventList>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d007      	beq.n	8002d70 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d60:	4b3c      	ldr	r3, [pc, #240]	@ (8002e54 <xQueueReceive+0x1c0>)
 8002d62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d70:	f002 f844 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e069      	b.n	8002e4c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d7e:	f002 f83d 	bl	8004dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e062      	b.n	8002e4c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d106      	bne.n	8002d9a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d8c:	f107 0310 	add.w	r3, r7, #16
 8002d90:	4618      	mov	r0, r3
 8002d92:	f001 f839 	bl	8003e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d96:	2301      	movs	r3, #1
 8002d98:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d9a:	f002 f82f 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d9e:	f000 fda9 	bl	80038f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da2:	f001 fff9 	bl	8004d98 <vPortEnterCritical>
 8002da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002da8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dac:	b25b      	sxtb	r3, r3
 8002dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db2:	d103      	bne.n	8002dbc <xQueueReceive+0x128>
 8002db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002dc2:	b25b      	sxtb	r3, r3
 8002dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc8:	d103      	bne.n	8002dd2 <xQueueReceive+0x13e>
 8002dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dd2:	f002 f813 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dd6:	1d3a      	adds	r2, r7, #4
 8002dd8:	f107 0310 	add.w	r3, r7, #16
 8002ddc:	4611      	mov	r1, r2
 8002dde:	4618      	mov	r0, r3
 8002de0:	f001 f828 	bl	8003e34 <xTaskCheckForTimeOut>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d123      	bne.n	8002e32 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dec:	f000 fa3e 	bl	800326c <prvIsQueueEmpty>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d017      	beq.n	8002e26 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002df8:	3324      	adds	r3, #36	@ 0x24
 8002dfa:	687a      	ldr	r2, [r7, #4]
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f000 ff4c 	bl	8003c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e06:	f000 f9df 	bl	80031c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e0a:	f000 fd81 	bl	8003910 <xTaskResumeAll>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d189      	bne.n	8002d28 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <xQueueReceive+0x1c0>)
 8002e16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	f3bf 8f4f 	dsb	sy
 8002e20:	f3bf 8f6f 	isb	sy
 8002e24:	e780      	b.n	8002d28 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002e26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e28:	f000 f9ce 	bl	80031c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e2c:	f000 fd70 	bl	8003910 <xTaskResumeAll>
 8002e30:	e77a      	b.n	8002d28 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002e32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e34:	f000 f9c8 	bl	80031c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e38:	f000 fd6a 	bl	8003910 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e3e:	f000 fa15 	bl	800326c <prvIsQueueEmpty>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f43f af6f 	beq.w	8002d28 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3730      	adds	r7, #48	@ 0x30
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	e000ed04 	.word	0xe000ed04

08002e58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08e      	sub	sp, #56	@ 0x38
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e62:	2300      	movs	r3, #0
 8002e64:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d10b      	bne.n	8002e8c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002e74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e78:	f383 8811 	msr	BASEPRI, r3
 8002e7c:	f3bf 8f6f 	isb	sy
 8002e80:	f3bf 8f4f 	dsb	sy
 8002e84:	623b      	str	r3, [r7, #32]
}
 8002e86:	bf00      	nop
 8002e88:	bf00      	nop
 8002e8a:	e7fd      	b.n	8002e88 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00b      	beq.n	8002eac <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	61fb      	str	r3, [r7, #28]
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eac:	f001 f908 	bl	80040c0 <xTaskGetSchedulerState>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d102      	bne.n	8002ebc <xQueueSemaphoreTake+0x64>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d101      	bne.n	8002ec0 <xQueueSemaphoreTake+0x68>
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <xQueueSemaphoreTake+0x6a>
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10b      	bne.n	8002ede <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002ec6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eca:	f383 8811 	msr	BASEPRI, r3
 8002ece:	f3bf 8f6f 	isb	sy
 8002ed2:	f3bf 8f4f 	dsb	sy
 8002ed6:	61bb      	str	r3, [r7, #24]
}
 8002ed8:	bf00      	nop
 8002eda:	bf00      	nop
 8002edc:	e7fd      	b.n	8002eda <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ede:	f001 ff5b 	bl	8004d98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee6:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d024      	beq.n	8002f38 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d104      	bne.n	8002f08 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002efe:	f001 fa59 	bl	80043b4 <pvTaskIncrementMutexHeldCount>
 8002f02:	4602      	mov	r2, r0
 8002f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f06:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f0a:	691b      	ldr	r3, [r3, #16]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00f      	beq.n	8002f30 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f12:	3310      	adds	r3, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f000 ff13 	bl	8003d40 <xTaskRemoveFromEventList>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002f20:	4b54      	ldr	r3, [pc, #336]	@ (8003074 <xQueueSemaphoreTake+0x21c>)
 8002f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002f30:	f001 ff64 	bl	8004dfc <vPortExitCritical>
				return pdPASS;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e098      	b.n	800306a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d112      	bne.n	8002f64 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00b      	beq.n	8002f5c <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002f44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f48:	f383 8811 	msr	BASEPRI, r3
 8002f4c:	f3bf 8f6f 	isb	sy
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	617b      	str	r3, [r7, #20]
}
 8002f56:	bf00      	nop
 8002f58:	bf00      	nop
 8002f5a:	e7fd      	b.n	8002f58 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f5c:	f001 ff4e 	bl	8004dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f60:	2300      	movs	r3, #0
 8002f62:	e082      	b.n	800306a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f6a:	f107 030c 	add.w	r3, r7, #12
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f000 ff4a 	bl	8003e08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f78:	f001 ff40 	bl	8004dfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f7c:	f000 fcba 	bl	80038f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f80:	f001 ff0a 	bl	8004d98 <vPortEnterCritical>
 8002f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f86:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f8a:	b25b      	sxtb	r3, r3
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d103      	bne.n	8002f9a <xQueueSemaphoreTake+0x142>
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fa0:	b25b      	sxtb	r3, r3
 8002fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa6:	d103      	bne.n	8002fb0 <xQueueSemaphoreTake+0x158>
 8002fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fb0:	f001 ff24 	bl	8004dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fb4:	463a      	mov	r2, r7
 8002fb6:	f107 030c 	add.w	r3, r7, #12
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 ff39 	bl	8003e34 <xTaskCheckForTimeOut>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d132      	bne.n	800302e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002fca:	f000 f94f 	bl	800326c <prvIsQueueEmpty>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d026      	beq.n	8003022 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8002fdc:	f001 fedc 	bl	8004d98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fe0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f889 	bl	80040fc <xTaskPriorityInherit>
 8002fea:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8002fec:	f001 ff06 	bl	8004dfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ff2:	3324      	adds	r3, #36	@ 0x24
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 fe4f 	bl	8003c9c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ffe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003000:	f000 f8e2 	bl	80031c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003004:	f000 fc84 	bl	8003910 <xTaskResumeAll>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f47f af67 	bne.w	8002ede <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8003010:	4b18      	ldr	r3, [pc, #96]	@ (8003074 <xQueueSemaphoreTake+0x21c>)
 8003012:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	f3bf 8f4f 	dsb	sy
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	e75d      	b.n	8002ede <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003022:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003024:	f000 f8d0 	bl	80031c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003028:	f000 fc72 	bl	8003910 <xTaskResumeAll>
 800302c:	e757      	b.n	8002ede <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800302e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003030:	f000 f8ca 	bl	80031c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003034:	f000 fc6c 	bl	8003910 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003038:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800303a:	f000 f917 	bl	800326c <prvIsQueueEmpty>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	f43f af4c 	beq.w	8002ede <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800304c:	f001 fea4 	bl	8004d98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003050:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003052:	f000 f811 	bl	8003078 <prvGetDisinheritPriorityAfterTimeout>
 8003056:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003058:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f924 	bl	80042ac <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003064:	f001 feca 	bl	8004dfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003068:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800306a:	4618      	mov	r0, r3
 800306c:	3738      	adds	r7, #56	@ 0x38
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	e000ed04 	.word	0xe000ed04

08003078 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003084:	2b00      	cmp	r3, #0
 8003086:	d006      	beq.n	8003096 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	e001      	b.n	800309a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003096:	2300      	movs	r3, #0
 8003098:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800309a:	68fb      	ldr	r3, [r7, #12]
	}
 800309c:	4618      	mov	r0, r3
 800309e:	3714      	adds	r7, #20
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030bc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d14d      	bne.n	800316a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f001 f87a 	bl	80041cc <xTaskPriorityDisinherit>
 80030d8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	609a      	str	r2, [r3, #8]
 80030e0:	e043      	b.n	800316a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d119      	bne.n	800311c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6858      	ldr	r0, [r3, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f0:	461a      	mov	r2, r3
 80030f2:	68b9      	ldr	r1, [r7, #8]
 80030f4:	f002 f98c 	bl	8005410 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003100:	441a      	add	r2, r3
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685a      	ldr	r2, [r3, #4]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	429a      	cmp	r2, r3
 8003110:	d32b      	bcc.n	800316a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	605a      	str	r2, [r3, #4]
 800311a:	e026      	b.n	800316a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68d8      	ldr	r0, [r3, #12]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	461a      	mov	r2, r3
 8003126:	68b9      	ldr	r1, [r7, #8]
 8003128:	f002 f972 	bl	8005410 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	68da      	ldr	r2, [r3, #12]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	425b      	negs	r3, r3
 8003136:	441a      	add	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	429a      	cmp	r2, r3
 8003146:	d207      	bcs.n	8003158 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003150:	425b      	negs	r3, r3
 8003152:	441a      	add	r2, r3
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d105      	bne.n	800316a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	3b01      	subs	r3, #1
 8003168:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003172:	697b      	ldr	r3, [r7, #20]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	2b00      	cmp	r3, #0
 800318c:	d018      	beq.n	80031c0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	441a      	add	r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68da      	ldr	r2, [r3, #12]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d303      	bcc.n	80031b0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68d9      	ldr	r1, [r3, #12]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b8:	461a      	mov	r2, r3
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f002 f928 	bl	8005410 <memcpy>
	}
}
 80031c0:	bf00      	nop
 80031c2:	3708      	adds	r7, #8
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80031d0:	f001 fde2 	bl	8004d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80031dc:	e011      	b.n	8003202 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d012      	beq.n	800320c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	3324      	adds	r3, #36	@ 0x24
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 fda8 	bl	8003d40 <xTaskRemoveFromEventList>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80031f6:	f000 fe81 	bl	8003efc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80031fa:	7bfb      	ldrb	r3, [r7, #15]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003206:	2b00      	cmp	r3, #0
 8003208:	dce9      	bgt.n	80031de <prvUnlockQueue+0x16>
 800320a:	e000      	b.n	800320e <prvUnlockQueue+0x46>
					break;
 800320c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	22ff      	movs	r2, #255	@ 0xff
 8003212:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003216:	f001 fdf1 	bl	8004dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800321a:	f001 fdbd 	bl	8004d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003224:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003226:	e011      	b.n	800324c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	691b      	ldr	r3, [r3, #16]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d012      	beq.n	8003256 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3310      	adds	r3, #16
 8003234:	4618      	mov	r0, r3
 8003236:	f000 fd83 	bl	8003d40 <xTaskRemoveFromEventList>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003240:	f000 fe5c 	bl	8003efc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003244:	7bbb      	ldrb	r3, [r7, #14]
 8003246:	3b01      	subs	r3, #1
 8003248:	b2db      	uxtb	r3, r3
 800324a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800324c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dce9      	bgt.n	8003228 <prvUnlockQueue+0x60>
 8003254:	e000      	b.n	8003258 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003256:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	22ff      	movs	r2, #255	@ 0xff
 800325c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003260:	f001 fdcc 	bl	8004dfc <vPortExitCritical>
}
 8003264:	bf00      	nop
 8003266:	3710      	adds	r7, #16
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003274:	f001 fd90 	bl	8004d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003280:	2301      	movs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
 8003284:	e001      	b.n	800328a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800328a:	f001 fdb7 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 800328e:	68fb      	ldr	r3, [r7, #12]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80032a0:	f001 fd7a 	bl	8004d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d102      	bne.n	80032b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80032b0:	2301      	movs	r3, #1
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e001      	b.n	80032ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80032ba:	f001 fd9f 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	e014      	b.n	8003302 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80032d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003318 <vQueueAddToRegistry+0x50>)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <vQueueAddToRegistry+0x50>)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80032ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003318 <vQueueAddToRegistry+0x50>)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	00db      	lsls	r3, r3, #3
 80032f4:	4413      	add	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80032fa:	e006      	b.n	800330a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	3301      	adds	r3, #1
 8003300:	60fb      	str	r3, [r7, #12]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b07      	cmp	r3, #7
 8003306:	d9e7      	bls.n	80032d8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	2000073c 	.word	0x2000073c

0800331c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800331c:	b580      	push	{r7, lr}
 800331e:	b086      	sub	sp, #24
 8003320:	af00      	add	r7, sp, #0
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800332c:	f001 fd34 	bl	8004d98 <vPortEnterCritical>
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003336:	b25b      	sxtb	r3, r3
 8003338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800333c:	d103      	bne.n	8003346 <vQueueWaitForMessageRestricted+0x2a>
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800334c:	b25b      	sxtb	r3, r3
 800334e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003352:	d103      	bne.n	800335c <vQueueWaitForMessageRestricted+0x40>
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	2200      	movs	r2, #0
 8003358:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800335c:	f001 fd4e 	bl	8004dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003364:	2b00      	cmp	r3, #0
 8003366:	d106      	bne.n	8003376 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	3324      	adds	r3, #36	@ 0x24
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	68b9      	ldr	r1, [r7, #8]
 8003370:	4618      	mov	r0, r3
 8003372:	f000 fcb9 	bl	8003ce8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff ff26 	bl	80031c8 <prvUnlockQueue>
	}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08e      	sub	sp, #56	@ 0x38
 8003388:	af04      	add	r7, sp, #16
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	607a      	str	r2, [r7, #4]
 8003390:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800339c:	f383 8811 	msr	BASEPRI, r3
 80033a0:	f3bf 8f6f 	isb	sy
 80033a4:	f3bf 8f4f 	dsb	sy
 80033a8:	623b      	str	r3, [r7, #32]
}
 80033aa:	bf00      	nop
 80033ac:	bf00      	nop
 80033ae:	e7fd      	b.n	80033ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80033b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d10b      	bne.n	80033ce <xTaskCreateStatic+0x4a>
	__asm volatile
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	61fb      	str	r3, [r7, #28]
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	e7fd      	b.n	80033ca <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80033ce:	235c      	movs	r3, #92	@ 0x5c
 80033d0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	2b5c      	cmp	r3, #92	@ 0x5c
 80033d6:	d00b      	beq.n	80033f0 <xTaskCreateStatic+0x6c>
	__asm volatile
 80033d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033dc:	f383 8811 	msr	BASEPRI, r3
 80033e0:	f3bf 8f6f 	isb	sy
 80033e4:	f3bf 8f4f 	dsb	sy
 80033e8:	61bb      	str	r3, [r7, #24]
}
 80033ea:	bf00      	nop
 80033ec:	bf00      	nop
 80033ee:	e7fd      	b.n	80033ec <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033f0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d01e      	beq.n	8003436 <xTaskCreateStatic+0xb2>
 80033f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d01b      	beq.n	8003436 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003400:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003406:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003410:	2300      	movs	r3, #0
 8003412:	9303      	str	r3, [sp, #12]
 8003414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003416:	9302      	str	r3, [sp, #8]
 8003418:	f107 0314 	add.w	r3, r7, #20
 800341c:	9301      	str	r3, [sp, #4]
 800341e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	68b9      	ldr	r1, [r7, #8]
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f850 	bl	80034ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800342e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003430:	f000 f8de 	bl	80035f0 <prvAddNewTaskToReadyList>
 8003434:	e001      	b.n	800343a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800343a:	697b      	ldr	r3, [r7, #20]
	}
 800343c:	4618      	mov	r0, r3
 800343e:	3728      	adds	r7, #40	@ 0x28
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08c      	sub	sp, #48	@ 0x30
 8003448:	af04      	add	r7, sp, #16
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	603b      	str	r3, [r7, #0]
 8003450:	4613      	mov	r3, r2
 8003452:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003454:	88fb      	ldrh	r3, [r7, #6]
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4618      	mov	r0, r3
 800345a:	f001 fdbf 	bl	8004fdc <pvPortMalloc>
 800345e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00e      	beq.n	8003484 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003466:	205c      	movs	r0, #92	@ 0x5c
 8003468:	f001 fdb8 	bl	8004fdc <pvPortMalloc>
 800346c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	631a      	str	r2, [r3, #48]	@ 0x30
 800347a:	e005      	b.n	8003488 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800347c:	6978      	ldr	r0, [r7, #20]
 800347e:	f001 fe7b 	bl	8005178 <vPortFree>
 8003482:	e001      	b.n	8003488 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003484:	2300      	movs	r3, #0
 8003486:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d017      	beq.n	80034be <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2200      	movs	r2, #0
 8003492:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003496:	88fa      	ldrh	r2, [r7, #6]
 8003498:	2300      	movs	r3, #0
 800349a:	9303      	str	r3, [sp, #12]
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	9302      	str	r3, [sp, #8]
 80034a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034a2:	9301      	str	r3, [sp, #4]
 80034a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a6:	9300      	str	r3, [sp, #0]
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	68b9      	ldr	r1, [r7, #8]
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f80e 	bl	80034ce <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80034b2:	69f8      	ldr	r0, [r7, #28]
 80034b4:	f000 f89c 	bl	80035f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80034b8:	2301      	movs	r3, #1
 80034ba:	61bb      	str	r3, [r7, #24]
 80034bc:	e002      	b.n	80034c4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80034be:	f04f 33ff 	mov.w	r3, #4294967295
 80034c2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80034c4:	69bb      	ldr	r3, [r7, #24]
	}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3720      	adds	r7, #32
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b088      	sub	sp, #32
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80034dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034de:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	461a      	mov	r2, r3
 80034e6:	21a5      	movs	r1, #165	@ 0xa5
 80034e8:	f001 ff66 	bl	80053b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80034f6:	3b01      	subs	r3, #1
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	4413      	add	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f023 0307 	bic.w	r3, r3, #7
 8003504:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003514:	f383 8811 	msr	BASEPRI, r3
 8003518:	f3bf 8f6f 	isb	sy
 800351c:	f3bf 8f4f 	dsb	sy
 8003520:	617b      	str	r3, [r7, #20]
}
 8003522:	bf00      	nop
 8003524:	bf00      	nop
 8003526:	e7fd      	b.n	8003524 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d01f      	beq.n	800356e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800352e:	2300      	movs	r3, #0
 8003530:	61fb      	str	r3, [r7, #28]
 8003532:	e012      	b.n	800355a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	4413      	add	r3, r2
 800353a:	7819      	ldrb	r1, [r3, #0]
 800353c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	4413      	add	r3, r2
 8003542:	3334      	adds	r3, #52	@ 0x34
 8003544:	460a      	mov	r2, r1
 8003546:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003548:	68ba      	ldr	r2, [r7, #8]
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	4413      	add	r3, r2
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d006      	beq.n	8003562 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	2b0f      	cmp	r3, #15
 800355e:	d9e9      	bls.n	8003534 <prvInitialiseNewTask+0x66>
 8003560:	e000      	b.n	8003564 <prvInitialiseNewTask+0x96>
			{
				break;
 8003562:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800356c:	e003      	b.n	8003576 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800356e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003570:	2200      	movs	r2, #0
 8003572:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003578:	2b37      	cmp	r3, #55	@ 0x37
 800357a:	d901      	bls.n	8003580 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800357c:	2337      	movs	r3, #55	@ 0x37
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003582:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003584:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003588:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800358a:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800358c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800358e:	2200      	movs	r2, #0
 8003590:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003594:	3304      	adds	r3, #4
 8003596:	4618      	mov	r0, r3
 8003598:	f7fe ffd0 	bl	800253c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	3318      	adds	r3, #24
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe ffcb 	bl	800253c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80035b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035ba:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80035bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035be:	2200      	movs	r2, #0
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ca:	683a      	ldr	r2, [r7, #0]
 80035cc:	68f9      	ldr	r1, [r7, #12]
 80035ce:	69b8      	ldr	r0, [r7, #24]
 80035d0:	f001 fab2 	bl	8004b38 <pxPortInitialiseStack>
 80035d4:	4602      	mov	r2, r0
 80035d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035d8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d002      	beq.n	80035e6 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035e6:	bf00      	nop
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
	...

080035f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035f8:	f001 fbce 	bl	8004d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035fc:	4b2d      	ldr	r3, [pc, #180]	@ (80036b4 <prvAddNewTaskToReadyList+0xc4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3301      	adds	r3, #1
 8003602:	4a2c      	ldr	r2, [pc, #176]	@ (80036b4 <prvAddNewTaskToReadyList+0xc4>)
 8003604:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003606:	4b2c      	ldr	r3, [pc, #176]	@ (80036b8 <prvAddNewTaskToReadyList+0xc8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800360e:	4a2a      	ldr	r2, [pc, #168]	@ (80036b8 <prvAddNewTaskToReadyList+0xc8>)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003614:	4b27      	ldr	r3, [pc, #156]	@ (80036b4 <prvAddNewTaskToReadyList+0xc4>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d110      	bne.n	800363e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800361c:	f000 fc92 	bl	8003f44 <prvInitialiseTaskLists>
 8003620:	e00d      	b.n	800363e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003622:	4b26      	ldr	r3, [pc, #152]	@ (80036bc <prvAddNewTaskToReadyList+0xcc>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d109      	bne.n	800363e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800362a:	4b23      	ldr	r3, [pc, #140]	@ (80036b8 <prvAddNewTaskToReadyList+0xc8>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003634:	429a      	cmp	r2, r3
 8003636:	d802      	bhi.n	800363e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003638:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <prvAddNewTaskToReadyList+0xc8>)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800363e:	4b20      	ldr	r3, [pc, #128]	@ (80036c0 <prvAddNewTaskToReadyList+0xd0>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	3301      	adds	r3, #1
 8003644:	4a1e      	ldr	r2, [pc, #120]	@ (80036c0 <prvAddNewTaskToReadyList+0xd0>)
 8003646:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003648:	4b1d      	ldr	r3, [pc, #116]	@ (80036c0 <prvAddNewTaskToReadyList+0xd0>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003654:	4b1b      	ldr	r3, [pc, #108]	@ (80036c4 <prvAddNewTaskToReadyList+0xd4>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	429a      	cmp	r2, r3
 800365a:	d903      	bls.n	8003664 <prvAddNewTaskToReadyList+0x74>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003660:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <prvAddNewTaskToReadyList+0xd4>)
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4a15      	ldr	r2, [pc, #84]	@ (80036c8 <prvAddNewTaskToReadyList+0xd8>)
 8003672:	441a      	add	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	3304      	adds	r3, #4
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f7fe ff6b 	bl	8002556 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003680:	f001 fbbc 	bl	8004dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003684:	4b0d      	ldr	r3, [pc, #52]	@ (80036bc <prvAddNewTaskToReadyList+0xcc>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800368c:	4b0a      	ldr	r3, [pc, #40]	@ (80036b8 <prvAddNewTaskToReadyList+0xc8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003696:	429a      	cmp	r2, r3
 8003698:	d207      	bcs.n	80036aa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800369a:	4b0c      	ldr	r3, [pc, #48]	@ (80036cc <prvAddNewTaskToReadyList+0xdc>)
 800369c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	f3bf 8f4f 	dsb	sy
 80036a6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	20000c50 	.word	0x20000c50
 80036b8:	2000077c 	.word	0x2000077c
 80036bc:	20000c5c 	.word	0x20000c5c
 80036c0:	20000c6c 	.word	0x20000c6c
 80036c4:	20000c58 	.word	0x20000c58
 80036c8:	20000780 	.word	0x20000780
 80036cc:	e000ed04 	.word	0xe000ed04

080036d0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80036d8:	f001 fb5e 	bl	8004d98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d102      	bne.n	80036e8 <vTaskDelete+0x18>
 80036e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003798 <vTaskDelete+0xc8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	e000      	b.n	80036ea <vTaskDelete+0x1a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	3304      	adds	r3, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ff8d 	bl	8002610 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d004      	beq.n	8003708 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	3318      	adds	r3, #24
 8003702:	4618      	mov	r0, r3
 8003704:	f7fe ff84 	bl	8002610 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8003708:	4b24      	ldr	r3, [pc, #144]	@ (800379c <vTaskDelete+0xcc>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3301      	adds	r3, #1
 800370e:	4a23      	ldr	r2, [pc, #140]	@ (800379c <vTaskDelete+0xcc>)
 8003710:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8003712:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <vTaskDelete+0xc8>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	429a      	cmp	r2, r3
 800371a:	d10b      	bne.n	8003734 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3304      	adds	r3, #4
 8003720:	4619      	mov	r1, r3
 8003722:	481f      	ldr	r0, [pc, #124]	@ (80037a0 <vTaskDelete+0xd0>)
 8003724:	f7fe ff17 	bl	8002556 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8003728:	4b1e      	ldr	r3, [pc, #120]	@ (80037a4 <vTaskDelete+0xd4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3301      	adds	r3, #1
 800372e:	4a1d      	ldr	r2, [pc, #116]	@ (80037a4 <vTaskDelete+0xd4>)
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e009      	b.n	8003748 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8003734:	4b1c      	ldr	r3, [pc, #112]	@ (80037a8 <vTaskDelete+0xd8>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3b01      	subs	r3, #1
 800373a:	4a1b      	ldr	r2, [pc, #108]	@ (80037a8 <vTaskDelete+0xd8>)
 800373c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 fc6e 	bl	8004020 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8003744:	f000 fc9c 	bl	8004080 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8003748:	f001 fb58 	bl	8004dfc <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800374c:	4b17      	ldr	r3, [pc, #92]	@ (80037ac <vTaskDelete+0xdc>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01c      	beq.n	800378e <vTaskDelete+0xbe>
		{
			if( pxTCB == pxCurrentTCB )
 8003754:	4b10      	ldr	r3, [pc, #64]	@ (8003798 <vTaskDelete+0xc8>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	429a      	cmp	r2, r3
 800375c:	d117      	bne.n	800378e <vTaskDelete+0xbe>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800375e:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <vTaskDelete+0xe0>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00b      	beq.n	800377e <vTaskDelete+0xae>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	60bb      	str	r3, [r7, #8]
}
 8003778:	bf00      	nop
 800377a:	bf00      	nop
 800377c:	e7fd      	b.n	800377a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800377e:	4b0d      	ldr	r3, [pc, #52]	@ (80037b4 <vTaskDelete+0xe4>)
 8003780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003784:	601a      	str	r2, [r3, #0]
 8003786:	f3bf 8f4f 	dsb	sy
 800378a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800378e:	bf00      	nop
 8003790:	3710      	adds	r7, #16
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	2000077c 	.word	0x2000077c
 800379c:	20000c6c 	.word	0x20000c6c
 80037a0:	20000c24 	.word	0x20000c24
 80037a4:	20000c38 	.word	0x20000c38
 80037a8:	20000c50 	.word	0x20000c50
 80037ac:	20000c5c 	.word	0x20000c5c
 80037b0:	20000c78 	.word	0x20000c78
 80037b4:	e000ed04 	.word	0xe000ed04

080037b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80037c0:	2300      	movs	r3, #0
 80037c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d018      	beq.n	80037fc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80037ca:	4b14      	ldr	r3, [pc, #80]	@ (800381c <vTaskDelay+0x64>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00b      	beq.n	80037ea <vTaskDelay+0x32>
	__asm volatile
 80037d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d6:	f383 8811 	msr	BASEPRI, r3
 80037da:	f3bf 8f6f 	isb	sy
 80037de:	f3bf 8f4f 	dsb	sy
 80037e2:	60bb      	str	r3, [r7, #8]
}
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	e7fd      	b.n	80037e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80037ea:	f000 f883 	bl	80038f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80037ee:	2100      	movs	r1, #0
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fdf3 	bl	80043dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80037f6:	f000 f88b 	bl	8003910 <xTaskResumeAll>
 80037fa:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d107      	bne.n	8003812 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003802:	4b07      	ldr	r3, [pc, #28]	@ (8003820 <vTaskDelay+0x68>)
 8003804:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	f3bf 8f4f 	dsb	sy
 800380e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003812:	bf00      	nop
 8003814:	3710      	adds	r7, #16
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	20000c78 	.word	0x20000c78
 8003820:	e000ed04 	.word	0xe000ed04

08003824 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08a      	sub	sp, #40	@ 0x28
 8003828:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003832:	463a      	mov	r2, r7
 8003834:	1d39      	adds	r1, r7, #4
 8003836:	f107 0308 	add.w	r3, r7, #8
 800383a:	4618      	mov	r0, r3
 800383c:	f7fe fe2a 	bl	8002494 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003840:	6839      	ldr	r1, [r7, #0]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68ba      	ldr	r2, [r7, #8]
 8003846:	9202      	str	r2, [sp, #8]
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	2300      	movs	r3, #0
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	2300      	movs	r3, #0
 8003850:	460a      	mov	r2, r1
 8003852:	4922      	ldr	r1, [pc, #136]	@ (80038dc <vTaskStartScheduler+0xb8>)
 8003854:	4822      	ldr	r0, [pc, #136]	@ (80038e0 <vTaskStartScheduler+0xbc>)
 8003856:	f7ff fd95 	bl	8003384 <xTaskCreateStatic>
 800385a:	4603      	mov	r3, r0
 800385c:	4a21      	ldr	r2, [pc, #132]	@ (80038e4 <vTaskStartScheduler+0xc0>)
 800385e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003860:	4b20      	ldr	r3, [pc, #128]	@ (80038e4 <vTaskStartScheduler+0xc0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d002      	beq.n	800386e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003868:	2301      	movs	r3, #1
 800386a:	617b      	str	r3, [r7, #20]
 800386c:	e001      	b.n	8003872 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d102      	bne.n	800387e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003878:	f000 fe04 	bl	8004484 <xTimerCreateTimerTask>
 800387c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d116      	bne.n	80038b2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003888:	f383 8811 	msr	BASEPRI, r3
 800388c:	f3bf 8f6f 	isb	sy
 8003890:	f3bf 8f4f 	dsb	sy
 8003894:	613b      	str	r3, [r7, #16]
}
 8003896:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <vTaskStartScheduler+0xc4>)
 800389a:	f04f 32ff 	mov.w	r2, #4294967295
 800389e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80038a0:	4b12      	ldr	r3, [pc, #72]	@ (80038ec <vTaskStartScheduler+0xc8>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80038a6:	4b12      	ldr	r3, [pc, #72]	@ (80038f0 <vTaskStartScheduler+0xcc>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80038ac:	f001 f9d0 	bl	8004c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80038b0:	e00f      	b.n	80038d2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b8:	d10b      	bne.n	80038d2 <vTaskStartScheduler+0xae>
	__asm volatile
 80038ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038be:	f383 8811 	msr	BASEPRI, r3
 80038c2:	f3bf 8f6f 	isb	sy
 80038c6:	f3bf 8f4f 	dsb	sy
 80038ca:	60fb      	str	r3, [r7, #12]
}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	e7fd      	b.n	80038ce <vTaskStartScheduler+0xaa>
}
 80038d2:	bf00      	nop
 80038d4:	3718      	adds	r7, #24
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	08005794 	.word	0x08005794
 80038e0:	08003f15 	.word	0x08003f15
 80038e4:	20000c74 	.word	0x20000c74
 80038e8:	20000c70 	.word	0x20000c70
 80038ec:	20000c5c 	.word	0x20000c5c
 80038f0:	20000c54 	.word	0x20000c54

080038f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038f8:	4b04      	ldr	r3, [pc, #16]	@ (800390c <vTaskSuspendAll+0x18>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3301      	adds	r3, #1
 80038fe:	4a03      	ldr	r2, [pc, #12]	@ (800390c <vTaskSuspendAll+0x18>)
 8003900:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	20000c78 	.word	0x20000c78

08003910 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b084      	sub	sp, #16
 8003914:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003916:	2300      	movs	r3, #0
 8003918:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800391a:	2300      	movs	r3, #0
 800391c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800391e:	4b42      	ldr	r3, [pc, #264]	@ (8003a28 <xTaskResumeAll+0x118>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d10b      	bne.n	800393e <xTaskResumeAll+0x2e>
	__asm volatile
 8003926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392a:	f383 8811 	msr	BASEPRI, r3
 800392e:	f3bf 8f6f 	isb	sy
 8003932:	f3bf 8f4f 	dsb	sy
 8003936:	603b      	str	r3, [r7, #0]
}
 8003938:	bf00      	nop
 800393a:	bf00      	nop
 800393c:	e7fd      	b.n	800393a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800393e:	f001 fa2b 	bl	8004d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003942:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <xTaskResumeAll+0x118>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	3b01      	subs	r3, #1
 8003948:	4a37      	ldr	r2, [pc, #220]	@ (8003a28 <xTaskResumeAll+0x118>)
 800394a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800394c:	4b36      	ldr	r3, [pc, #216]	@ (8003a28 <xTaskResumeAll+0x118>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d162      	bne.n	8003a1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003954:	4b35      	ldr	r3, [pc, #212]	@ (8003a2c <xTaskResumeAll+0x11c>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d05e      	beq.n	8003a1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800395c:	e02f      	b.n	80039be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800395e:	4b34      	ldr	r3, [pc, #208]	@ (8003a30 <xTaskResumeAll+0x120>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	3318      	adds	r3, #24
 800396a:	4618      	mov	r0, r3
 800396c:	f7fe fe50 	bl	8002610 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	3304      	adds	r3, #4
 8003974:	4618      	mov	r0, r3
 8003976:	f7fe fe4b 	bl	8002610 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800397e:	4b2d      	ldr	r3, [pc, #180]	@ (8003a34 <xTaskResumeAll+0x124>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	429a      	cmp	r2, r3
 8003984:	d903      	bls.n	800398e <xTaskResumeAll+0x7e>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a34 <xTaskResumeAll+0x124>)
 800398c:	6013      	str	r3, [r2, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4a27      	ldr	r2, [pc, #156]	@ (8003a38 <xTaskResumeAll+0x128>)
 800399c:	441a      	add	r2, r3
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f7fe fdd6 	bl	8002556 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ae:	4b23      	ldr	r3, [pc, #140]	@ (8003a3c <xTaskResumeAll+0x12c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d302      	bcc.n	80039be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80039b8:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <xTaskResumeAll+0x130>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039be:	4b1c      	ldr	r3, [pc, #112]	@ (8003a30 <xTaskResumeAll+0x120>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1cb      	bne.n	800395e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d001      	beq.n	80039d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039cc:	f000 fb58 	bl	8004080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003a44 <xTaskResumeAll+0x134>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d010      	beq.n	80039fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039dc:	f000 f846 	bl	8003a6c <xTaskIncrementTick>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d002      	beq.n	80039ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80039e6:	4b16      	ldr	r3, [pc, #88]	@ (8003a40 <xTaskResumeAll+0x130>)
 80039e8:	2201      	movs	r2, #1
 80039ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f1      	bne.n	80039dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80039f8:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <xTaskResumeAll+0x134>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039fe:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <xTaskResumeAll+0x130>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003a06:	2301      	movs	r3, #1
 8003a08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8003a48 <xTaskResumeAll+0x138>)
 8003a0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	f3bf 8f4f 	dsb	sy
 8003a16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003a1a:	f001 f9ef 	bl	8004dfc <vPortExitCritical>

	return xAlreadyYielded;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000c78 	.word	0x20000c78
 8003a2c:	20000c50 	.word	0x20000c50
 8003a30:	20000c10 	.word	0x20000c10
 8003a34:	20000c58 	.word	0x20000c58
 8003a38:	20000780 	.word	0x20000780
 8003a3c:	2000077c 	.word	0x2000077c
 8003a40:	20000c64 	.word	0x20000c64
 8003a44:	20000c60 	.word	0x20000c60
 8003a48:	e000ed04 	.word	0xe000ed04

08003a4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a52:	4b05      	ldr	r3, [pc, #20]	@ (8003a68 <xTaskGetTickCount+0x1c>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a58:	687b      	ldr	r3, [r7, #4]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	20000c54 	.word	0x20000c54

08003a6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b086      	sub	sp, #24
 8003a70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a76:	4b4f      	ldr	r3, [pc, #316]	@ (8003bb4 <xTaskIncrementTick+0x148>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	f040 8090 	bne.w	8003ba0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a80:	4b4d      	ldr	r3, [pc, #308]	@ (8003bb8 <xTaskIncrementTick+0x14c>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3301      	adds	r3, #1
 8003a86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a88:	4a4b      	ldr	r2, [pc, #300]	@ (8003bb8 <xTaskIncrementTick+0x14c>)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d121      	bne.n	8003ad8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a94:	4b49      	ldr	r3, [pc, #292]	@ (8003bbc <xTaskIncrementTick+0x150>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d00b      	beq.n	8003ab6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003a9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa2:	f383 8811 	msr	BASEPRI, r3
 8003aa6:	f3bf 8f6f 	isb	sy
 8003aaa:	f3bf 8f4f 	dsb	sy
 8003aae:	603b      	str	r3, [r7, #0]
}
 8003ab0:	bf00      	nop
 8003ab2:	bf00      	nop
 8003ab4:	e7fd      	b.n	8003ab2 <xTaskIncrementTick+0x46>
 8003ab6:	4b41      	ldr	r3, [pc, #260]	@ (8003bbc <xTaskIncrementTick+0x150>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]
 8003abc:	4b40      	ldr	r3, [pc, #256]	@ (8003bc0 <xTaskIncrementTick+0x154>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3e      	ldr	r2, [pc, #248]	@ (8003bbc <xTaskIncrementTick+0x150>)
 8003ac2:	6013      	str	r3, [r2, #0]
 8003ac4:	4a3e      	ldr	r2, [pc, #248]	@ (8003bc0 <xTaskIncrementTick+0x154>)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6013      	str	r3, [r2, #0]
 8003aca:	4b3e      	ldr	r3, [pc, #248]	@ (8003bc4 <xTaskIncrementTick+0x158>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	4a3c      	ldr	r2, [pc, #240]	@ (8003bc4 <xTaskIncrementTick+0x158>)
 8003ad2:	6013      	str	r3, [r2, #0]
 8003ad4:	f000 fad4 	bl	8004080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ad8:	4b3b      	ldr	r3, [pc, #236]	@ (8003bc8 <xTaskIncrementTick+0x15c>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d349      	bcc.n	8003b76 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ae2:	4b36      	ldr	r3, [pc, #216]	@ (8003bbc <xTaskIncrementTick+0x150>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d104      	bne.n	8003af6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003aec:	4b36      	ldr	r3, [pc, #216]	@ (8003bc8 <xTaskIncrementTick+0x15c>)
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295
 8003af2:	601a      	str	r2, [r3, #0]
					break;
 8003af4:	e03f      	b.n	8003b76 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003af6:	4b31      	ldr	r3, [pc, #196]	@ (8003bbc <xTaskIncrementTick+0x150>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d203      	bcs.n	8003b16 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003b0e:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <xTaskIncrementTick+0x15c>)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003b14:	e02f      	b.n	8003b76 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	3304      	adds	r3, #4
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fe fd78 	bl	8002610 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d004      	beq.n	8003b32 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	3318      	adds	r3, #24
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fd6f 	bl	8002610 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b36:	4b25      	ldr	r3, [pc, #148]	@ (8003bcc <xTaskIncrementTick+0x160>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d903      	bls.n	8003b46 <xTaskIncrementTick+0xda>
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b42:	4a22      	ldr	r2, [pc, #136]	@ (8003bcc <xTaskIncrementTick+0x160>)
 8003b44:	6013      	str	r3, [r2, #0]
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	4413      	add	r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4a1f      	ldr	r2, [pc, #124]	@ (8003bd0 <xTaskIncrementTick+0x164>)
 8003b54:	441a      	add	r2, r3
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	3304      	adds	r3, #4
 8003b5a:	4619      	mov	r1, r3
 8003b5c:	4610      	mov	r0, r2
 8003b5e:	f7fe fcfa 	bl	8002556 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b66:	4b1b      	ldr	r3, [pc, #108]	@ (8003bd4 <xTaskIncrementTick+0x168>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d3b8      	bcc.n	8003ae2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b74:	e7b5      	b.n	8003ae2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b76:	4b17      	ldr	r3, [pc, #92]	@ (8003bd4 <xTaskIncrementTick+0x168>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7c:	4914      	ldr	r1, [pc, #80]	@ (8003bd0 <xTaskIncrementTick+0x164>)
 8003b7e:	4613      	mov	r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	4413      	add	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	440b      	add	r3, r1
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d901      	bls.n	8003b92 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b92:	4b11      	ldr	r3, [pc, #68]	@ (8003bd8 <xTaskIncrementTick+0x16c>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d007      	beq.n	8003baa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	e004      	b.n	8003baa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8003bdc <xTaskIncrementTick+0x170>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	4a0d      	ldr	r2, [pc, #52]	@ (8003bdc <xTaskIncrementTick+0x170>)
 8003ba8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003baa:	697b      	ldr	r3, [r7, #20]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	20000c78 	.word	0x20000c78
 8003bb8:	20000c54 	.word	0x20000c54
 8003bbc:	20000c08 	.word	0x20000c08
 8003bc0:	20000c0c 	.word	0x20000c0c
 8003bc4:	20000c68 	.word	0x20000c68
 8003bc8:	20000c70 	.word	0x20000c70
 8003bcc:	20000c58 	.word	0x20000c58
 8003bd0:	20000780 	.word	0x20000780
 8003bd4:	2000077c 	.word	0x2000077c
 8003bd8:	20000c64 	.word	0x20000c64
 8003bdc:	20000c60 	.word	0x20000c60

08003be0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003be6:	4b28      	ldr	r3, [pc, #160]	@ (8003c88 <vTaskSwitchContext+0xa8>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bee:	4b27      	ldr	r3, [pc, #156]	@ (8003c8c <vTaskSwitchContext+0xac>)
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bf4:	e042      	b.n	8003c7c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003bf6:	4b25      	ldr	r3, [pc, #148]	@ (8003c8c <vTaskSwitchContext+0xac>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bfc:	4b24      	ldr	r3, [pc, #144]	@ (8003c90 <vTaskSwitchContext+0xb0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	60fb      	str	r3, [r7, #12]
 8003c02:	e011      	b.n	8003c28 <vTaskSwitchContext+0x48>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d10b      	bne.n	8003c22 <vTaskSwitchContext+0x42>
	__asm volatile
 8003c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c0e:	f383 8811 	msr	BASEPRI, r3
 8003c12:	f3bf 8f6f 	isb	sy
 8003c16:	f3bf 8f4f 	dsb	sy
 8003c1a:	607b      	str	r3, [r7, #4]
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	e7fd      	b.n	8003c1e <vTaskSwitchContext+0x3e>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	3b01      	subs	r3, #1
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	491a      	ldr	r1, [pc, #104]	@ (8003c94 <vTaskSwitchContext+0xb4>)
 8003c2a:	68fa      	ldr	r2, [r7, #12]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d0e3      	beq.n	8003c04 <vTaskSwitchContext+0x24>
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4a13      	ldr	r2, [pc, #76]	@ (8003c94 <vTaskSwitchContext+0xb4>)
 8003c48:	4413      	add	r3, r2
 8003c4a:	60bb      	str	r3, [r7, #8]
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	605a      	str	r2, [r3, #4]
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	3308      	adds	r3, #8
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d104      	bne.n	8003c6c <vTaskSwitchContext+0x8c>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	605a      	str	r2, [r3, #4]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a09      	ldr	r2, [pc, #36]	@ (8003c98 <vTaskSwitchContext+0xb8>)
 8003c74:	6013      	str	r3, [r2, #0]
 8003c76:	4a06      	ldr	r2, [pc, #24]	@ (8003c90 <vTaskSwitchContext+0xb0>)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6013      	str	r3, [r2, #0]
}
 8003c7c:	bf00      	nop
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	20000c78 	.word	0x20000c78
 8003c8c:	20000c64 	.word	0x20000c64
 8003c90:	20000c58 	.word	0x20000c58
 8003c94:	20000780 	.word	0x20000780
 8003c98:	2000077c 	.word	0x2000077c

08003c9c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d10b      	bne.n	8003cc4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60fb      	str	r3, [r7, #12]
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	e7fd      	b.n	8003cc0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cc4:	4b07      	ldr	r3, [pc, #28]	@ (8003ce4 <vTaskPlaceOnEventList+0x48>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3318      	adds	r3, #24
 8003cca:	4619      	mov	r1, r3
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7fe fc66 	bl	800259e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	6838      	ldr	r0, [r7, #0]
 8003cd6:	f000 fb81 	bl	80043dc <prvAddCurrentTaskToDelayedList>
}
 8003cda:	bf00      	nop
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	2000077c 	.word	0x2000077c

08003ce8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cfe:	f383 8811 	msr	BASEPRI, r3
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	f3bf 8f4f 	dsb	sy
 8003d0a:	617b      	str	r3, [r7, #20]
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	e7fd      	b.n	8003d0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d12:	4b0a      	ldr	r3, [pc, #40]	@ (8003d3c <vTaskPlaceOnEventListRestricted+0x54>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3318      	adds	r3, #24
 8003d18:	4619      	mov	r1, r3
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7fe fc1b 	bl	8002556 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d002      	beq.n	8003d2c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	68b8      	ldr	r0, [r7, #8]
 8003d30:	f000 fb54 	bl	80043dc <prvAddCurrentTaskToDelayedList>
	}
 8003d34:	bf00      	nop
 8003d36:	3718      	adds	r7, #24
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	2000077c 	.word	0x2000077c

08003d40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10b      	bne.n	8003d6e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d5a:	f383 8811 	msr	BASEPRI, r3
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f3bf 8f4f 	dsb	sy
 8003d66:	60fb      	str	r3, [r7, #12]
}
 8003d68:	bf00      	nop
 8003d6a:	bf00      	nop
 8003d6c:	e7fd      	b.n	8003d6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	3318      	adds	r3, #24
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fc4c 	bl	8002610 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d78:	4b1d      	ldr	r3, [pc, #116]	@ (8003df0 <xTaskRemoveFromEventList+0xb0>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d11d      	bne.n	8003dbc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	3304      	adds	r3, #4
 8003d84:	4618      	mov	r0, r3
 8003d86:	f7fe fc43 	bl	8002610 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8e:	4b19      	ldr	r3, [pc, #100]	@ (8003df4 <xTaskRemoveFromEventList+0xb4>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d903      	bls.n	8003d9e <xTaskRemoveFromEventList+0x5e>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	4a16      	ldr	r2, [pc, #88]	@ (8003df4 <xTaskRemoveFromEventList+0xb4>)
 8003d9c:	6013      	str	r3, [r2, #0]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a13      	ldr	r2, [pc, #76]	@ (8003df8 <xTaskRemoveFromEventList+0xb8>)
 8003dac:	441a      	add	r2, r3
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f7fe fbce 	bl	8002556 <vListInsertEnd>
 8003dba:	e005      	b.n	8003dc8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	480e      	ldr	r0, [pc, #56]	@ (8003dfc <xTaskRemoveFromEventList+0xbc>)
 8003dc4:	f7fe fbc7 	bl	8002556 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dcc:	4b0c      	ldr	r3, [pc, #48]	@ (8003e00 <xTaskRemoveFromEventList+0xc0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d905      	bls.n	8003de2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dda:	4b0a      	ldr	r3, [pc, #40]	@ (8003e04 <xTaskRemoveFromEventList+0xc4>)
 8003ddc:	2201      	movs	r2, #1
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	e001      	b.n	8003de6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003de2:	2300      	movs	r3, #0
 8003de4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003de6:	697b      	ldr	r3, [r7, #20]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000c78 	.word	0x20000c78
 8003df4:	20000c58 	.word	0x20000c58
 8003df8:	20000780 	.word	0x20000780
 8003dfc:	20000c10 	.word	0x20000c10
 8003e00:	2000077c 	.word	0x2000077c
 8003e04:	20000c64 	.word	0x20000c64

08003e08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003e10:	4b06      	ldr	r3, [pc, #24]	@ (8003e2c <vTaskInternalSetTimeOutState+0x24>)
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e18:	4b05      	ldr	r3, [pc, #20]	@ (8003e30 <vTaskInternalSetTimeOutState+0x28>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	605a      	str	r2, [r3, #4]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	20000c68 	.word	0x20000c68
 8003e30:	20000c54 	.word	0x20000c54

08003e34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b088      	sub	sp, #32
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	613b      	str	r3, [r7, #16]
}
 8003e56:	bf00      	nop
 8003e58:	bf00      	nop
 8003e5a:	e7fd      	b.n	8003e58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10b      	bne.n	8003e7a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003e62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	60fb      	str	r3, [r7, #12]
}
 8003e74:	bf00      	nop
 8003e76:	bf00      	nop
 8003e78:	e7fd      	b.n	8003e76 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003e7a:	f000 ff8d 	bl	8004d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ef4 <xTaskCheckForTimeOut+0xc0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e96:	d102      	bne.n	8003e9e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	61fb      	str	r3, [r7, #28]
 8003e9c:	e023      	b.n	8003ee6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b15      	ldr	r3, [pc, #84]	@ (8003ef8 <xTaskCheckForTimeOut+0xc4>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d007      	beq.n	8003eba <xTaskCheckForTimeOut+0x86>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d302      	bcc.n	8003eba <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	61fb      	str	r3, [r7, #28]
 8003eb8:	e015      	b.n	8003ee6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d20b      	bcs.n	8003edc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	1ad2      	subs	r2, r2, r3
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f7ff ff99 	bl	8003e08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61fb      	str	r3, [r7, #28]
 8003eda:	e004      	b.n	8003ee6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ee6:	f000 ff89 	bl	8004dfc <vPortExitCritical>

	return xReturn;
 8003eea:	69fb      	ldr	r3, [r7, #28]
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3720      	adds	r7, #32
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000c54 	.word	0x20000c54
 8003ef8:	20000c68 	.word	0x20000c68

08003efc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003f00:	4b03      	ldr	r3, [pc, #12]	@ (8003f10 <vTaskMissedYield+0x14>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
}
 8003f06:	bf00      	nop
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	20000c64 	.word	0x20000c64

08003f14 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f1c:	f000 f852 	bl	8003fc4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f20:	4b06      	ldr	r3, [pc, #24]	@ (8003f3c <prvIdleTask+0x28>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d9f9      	bls.n	8003f1c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f28:	4b05      	ldr	r3, [pc, #20]	@ (8003f40 <prvIdleTask+0x2c>)
 8003f2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f2e:	601a      	str	r2, [r3, #0]
 8003f30:	f3bf 8f4f 	dsb	sy
 8003f34:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f38:	e7f0      	b.n	8003f1c <prvIdleTask+0x8>
 8003f3a:	bf00      	nop
 8003f3c:	20000780 	.word	0x20000780
 8003f40:	e000ed04 	.word	0xe000ed04

08003f44 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	e00c      	b.n	8003f6a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4413      	add	r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a12      	ldr	r2, [pc, #72]	@ (8003fa4 <prvInitialiseTaskLists+0x60>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fe facc 	bl	80024fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	3301      	adds	r3, #1
 8003f68:	607b      	str	r3, [r7, #4]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b37      	cmp	r3, #55	@ 0x37
 8003f6e:	d9ef      	bls.n	8003f50 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f70:	480d      	ldr	r0, [pc, #52]	@ (8003fa8 <prvInitialiseTaskLists+0x64>)
 8003f72:	f7fe fac3 	bl	80024fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f76:	480d      	ldr	r0, [pc, #52]	@ (8003fac <prvInitialiseTaskLists+0x68>)
 8003f78:	f7fe fac0 	bl	80024fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f7c:	480c      	ldr	r0, [pc, #48]	@ (8003fb0 <prvInitialiseTaskLists+0x6c>)
 8003f7e:	f7fe fabd 	bl	80024fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f82:	480c      	ldr	r0, [pc, #48]	@ (8003fb4 <prvInitialiseTaskLists+0x70>)
 8003f84:	f7fe faba 	bl	80024fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f88:	480b      	ldr	r0, [pc, #44]	@ (8003fb8 <prvInitialiseTaskLists+0x74>)
 8003f8a:	f7fe fab7 	bl	80024fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f8e:	4b0b      	ldr	r3, [pc, #44]	@ (8003fbc <prvInitialiseTaskLists+0x78>)
 8003f90:	4a05      	ldr	r2, [pc, #20]	@ (8003fa8 <prvInitialiseTaskLists+0x64>)
 8003f92:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <prvInitialiseTaskLists+0x7c>)
 8003f96:	4a05      	ldr	r2, [pc, #20]	@ (8003fac <prvInitialiseTaskLists+0x68>)
 8003f98:	601a      	str	r2, [r3, #0]
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000780 	.word	0x20000780
 8003fa8:	20000be0 	.word	0x20000be0
 8003fac:	20000bf4 	.word	0x20000bf4
 8003fb0:	20000c10 	.word	0x20000c10
 8003fb4:	20000c24 	.word	0x20000c24
 8003fb8:	20000c3c 	.word	0x20000c3c
 8003fbc:	20000c08 	.word	0x20000c08
 8003fc0:	20000c0c 	.word	0x20000c0c

08003fc4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fca:	e019      	b.n	8004000 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fcc:	f000 fee4 	bl	8004d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fd0:	4b10      	ldr	r3, [pc, #64]	@ (8004014 <prvCheckTasksWaitingTermination+0x50>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fe fb17 	bl	8002610 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <prvCheckTasksWaitingTermination+0x54>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8004018 <prvCheckTasksWaitingTermination+0x54>)
 8003fea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fec:	4b0b      	ldr	r3, [pc, #44]	@ (800401c <prvCheckTasksWaitingTermination+0x58>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800401c <prvCheckTasksWaitingTermination+0x58>)
 8003ff4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ff6:	f000 ff01 	bl	8004dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f810 	bl	8004020 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004000:	4b06      	ldr	r3, [pc, #24]	@ (800401c <prvCheckTasksWaitingTermination+0x58>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e1      	bne.n	8003fcc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	20000c24 	.word	0x20000c24
 8004018:	20000c50 	.word	0x20000c50
 800401c:	20000c38 	.word	0x20000c38

08004020 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800402e:	2b00      	cmp	r3, #0
 8004030:	d108      	bne.n	8004044 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004036:	4618      	mov	r0, r3
 8004038:	f001 f89e 	bl	8005178 <vPortFree>
				vPortFree( pxTCB );
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f001 f89b 	bl	8005178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004042:	e019      	b.n	8004078 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800404a:	2b01      	cmp	r3, #1
 800404c:	d103      	bne.n	8004056 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f001 f892 	bl	8005178 <vPortFree>
	}
 8004054:	e010      	b.n	8004078 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800405c:	2b02      	cmp	r3, #2
 800405e:	d00b      	beq.n	8004078 <prvDeleteTCB+0x58>
	__asm volatile
 8004060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004064:	f383 8811 	msr	BASEPRI, r3
 8004068:	f3bf 8f6f 	isb	sy
 800406c:	f3bf 8f4f 	dsb	sy
 8004070:	60fb      	str	r3, [r7, #12]
}
 8004072:	bf00      	nop
 8004074:	bf00      	nop
 8004076:	e7fd      	b.n	8004074 <prvDeleteTCB+0x54>
	}
 8004078:	bf00      	nop
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004086:	4b0c      	ldr	r3, [pc, #48]	@ (80040b8 <prvResetNextTaskUnblockTime+0x38>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d104      	bne.n	800409a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004090:	4b0a      	ldr	r3, [pc, #40]	@ (80040bc <prvResetNextTaskUnblockTime+0x3c>)
 8004092:	f04f 32ff 	mov.w	r2, #4294967295
 8004096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004098:	e008      	b.n	80040ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <prvResetNextTaskUnblockTime+0x38>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	4a04      	ldr	r2, [pc, #16]	@ (80040bc <prvResetNextTaskUnblockTime+0x3c>)
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	20000c08 	.word	0x20000c08
 80040bc:	20000c70 	.word	0x20000c70

080040c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040c0:	b480      	push	{r7}
 80040c2:	b083      	sub	sp, #12
 80040c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040c6:	4b0b      	ldr	r3, [pc, #44]	@ (80040f4 <xTaskGetSchedulerState+0x34>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d102      	bne.n	80040d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040ce:	2301      	movs	r3, #1
 80040d0:	607b      	str	r3, [r7, #4]
 80040d2:	e008      	b.n	80040e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040d4:	4b08      	ldr	r3, [pc, #32]	@ (80040f8 <xTaskGetSchedulerState+0x38>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d102      	bne.n	80040e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040dc:	2302      	movs	r3, #2
 80040de:	607b      	str	r3, [r7, #4]
 80040e0:	e001      	b.n	80040e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040e2:	2300      	movs	r3, #0
 80040e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040e6:	687b      	ldr	r3, [r7, #4]
	}
 80040e8:	4618      	mov	r0, r3
 80040ea:	370c      	adds	r7, #12
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000c5c 	.word	0x20000c5c
 80040f8:	20000c78 	.word	0x20000c78

080040fc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004108:	2300      	movs	r3, #0
 800410a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d051      	beq.n	80041b6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004116:	4b2a      	ldr	r3, [pc, #168]	@ (80041c0 <xTaskPriorityInherit+0xc4>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800411c:	429a      	cmp	r2, r3
 800411e:	d241      	bcs.n	80041a4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	2b00      	cmp	r3, #0
 8004126:	db06      	blt.n	8004136 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004128:	4b25      	ldr	r3, [pc, #148]	@ (80041c0 <xTaskPriorityInherit+0xc4>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800412e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	6959      	ldr	r1, [r3, #20]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800413e:	4613      	mov	r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	4a1f      	ldr	r2, [pc, #124]	@ (80041c4 <xTaskPriorityInherit+0xc8>)
 8004148:	4413      	add	r3, r2
 800414a:	4299      	cmp	r1, r3
 800414c:	d122      	bne.n	8004194 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	3304      	adds	r3, #4
 8004152:	4618      	mov	r0, r3
 8004154:	f7fe fa5c 	bl	8002610 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <xTaskPriorityInherit+0xc4>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004166:	4b18      	ldr	r3, [pc, #96]	@ (80041c8 <xTaskPriorityInherit+0xcc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	429a      	cmp	r2, r3
 800416c:	d903      	bls.n	8004176 <xTaskPriorityInherit+0x7a>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004172:	4a15      	ldr	r2, [pc, #84]	@ (80041c8 <xTaskPriorityInherit+0xcc>)
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800417a:	4613      	mov	r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	4a10      	ldr	r2, [pc, #64]	@ (80041c4 <xTaskPriorityInherit+0xc8>)
 8004184:	441a      	add	r2, r3
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	3304      	adds	r3, #4
 800418a:	4619      	mov	r1, r3
 800418c:	4610      	mov	r0, r2
 800418e:	f7fe f9e2 	bl	8002556 <vListInsertEnd>
 8004192:	e004      	b.n	800419e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004194:	4b0a      	ldr	r3, [pc, #40]	@ (80041c0 <xTaskPriorityInherit+0xc4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800419e:	2301      	movs	r3, #1
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	e008      	b.n	80041b6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80041a8:	4b05      	ldr	r3, [pc, #20]	@ (80041c0 <xTaskPriorityInherit+0xc4>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d201      	bcs.n	80041b6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041b2:	2301      	movs	r3, #1
 80041b4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041b6:	68fb      	ldr	r3, [r7, #12]
	}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	2000077c 	.word	0x2000077c
 80041c4:	20000780 	.word	0x20000780
 80041c8:	20000c58 	.word	0x20000c58

080041cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b086      	sub	sp, #24
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d058      	beq.n	8004294 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041e2:	4b2f      	ldr	r3, [pc, #188]	@ (80042a0 <xTaskPriorityDisinherit+0xd4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d00b      	beq.n	8004204 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60fb      	str	r3, [r7, #12]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d10b      	bne.n	8004224 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800420c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	60bb      	str	r3, [r7, #8]
}
 800421e:	bf00      	nop
 8004220:	bf00      	nop
 8004222:	e7fd      	b.n	8004220 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004228:	1e5a      	subs	r2, r3, #1
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004236:	429a      	cmp	r2, r3
 8004238:	d02c      	beq.n	8004294 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800423e:	2b00      	cmp	r3, #0
 8004240:	d128      	bne.n	8004294 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	3304      	adds	r3, #4
 8004246:	4618      	mov	r0, r3
 8004248:	f7fe f9e2 	bl	8002610 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004258:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004264:	4b0f      	ldr	r3, [pc, #60]	@ (80042a4 <xTaskPriorityDisinherit+0xd8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d903      	bls.n	8004274 <xTaskPriorityDisinherit+0xa8>
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004270:	4a0c      	ldr	r2, [pc, #48]	@ (80042a4 <xTaskPriorityDisinherit+0xd8>)
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004278:	4613      	mov	r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	4413      	add	r3, r2
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	4a09      	ldr	r2, [pc, #36]	@ (80042a8 <xTaskPriorityDisinherit+0xdc>)
 8004282:	441a      	add	r2, r3
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	3304      	adds	r3, #4
 8004288:	4619      	mov	r1, r3
 800428a:	4610      	mov	r0, r2
 800428c:	f7fe f963 	bl	8002556 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004290:	2301      	movs	r3, #1
 8004292:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004294:	697b      	ldr	r3, [r7, #20]
	}
 8004296:	4618      	mov	r0, r3
 8004298:	3718      	adds	r7, #24
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
 800429e:	bf00      	nop
 80042a0:	2000077c 	.word	0x2000077c
 80042a4:	20000c58 	.word	0x20000c58
 80042a8:	20000780 	.word	0x20000780

080042ac <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d06c      	beq.n	800439e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10b      	bne.n	80042e4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80042cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d0:	f383 8811 	msr	BASEPRI, r3
 80042d4:	f3bf 8f6f 	isb	sy
 80042d8:	f3bf 8f4f 	dsb	sy
 80042dc:	60fb      	str	r3, [r7, #12]
}
 80042de:	bf00      	nop
 80042e0:	bf00      	nop
 80042e2:	e7fd      	b.n	80042e0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e8:	683a      	ldr	r2, [r7, #0]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d902      	bls.n	80042f4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e002      	b.n	80042fa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042f8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fe:	69fa      	ldr	r2, [r7, #28]
 8004300:	429a      	cmp	r2, r3
 8004302:	d04c      	beq.n	800439e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	429a      	cmp	r2, r3
 800430c:	d147      	bne.n	800439e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800430e:	4b26      	ldr	r3, [pc, #152]	@ (80043a8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	69ba      	ldr	r2, [r7, #24]
 8004314:	429a      	cmp	r2, r3
 8004316:	d10b      	bne.n	8004330 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004318:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800431c:	f383 8811 	msr	BASEPRI, r3
 8004320:	f3bf 8f6f 	isb	sy
 8004324:	f3bf 8f4f 	dsb	sy
 8004328:	60bb      	str	r3, [r7, #8]
}
 800432a:	bf00      	nop
 800432c:	bf00      	nop
 800432e:	e7fd      	b.n	800432c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	69fa      	ldr	r2, [r7, #28]
 800433a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	2b00      	cmp	r3, #0
 8004342:	db04      	blt.n	800434e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	6959      	ldr	r1, [r3, #20]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	4a13      	ldr	r2, [pc, #76]	@ (80043ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800435e:	4413      	add	r3, r2
 8004360:	4299      	cmp	r1, r3
 8004362:	d11c      	bne.n	800439e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	3304      	adds	r3, #4
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f951 	bl	8002610 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	4b0f      	ldr	r3, [pc, #60]	@ (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	429a      	cmp	r2, r3
 8004378:	d903      	bls.n	8004382 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437e:	4a0c      	ldr	r2, [pc, #48]	@ (80043b0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a07      	ldr	r2, [pc, #28]	@ (80043ac <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004390:	441a      	add	r2, r3
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7fe f8dc 	bl	8002556 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800439e:	bf00      	nop
 80043a0:	3720      	adds	r7, #32
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop
 80043a8:	2000077c 	.word	0x2000077c
 80043ac:	20000780 	.word	0x20000780
 80043b0:	20000c58 	.word	0x20000c58

080043b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80043b4:	b480      	push	{r7}
 80043b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043b8:	4b07      	ldr	r3, [pc, #28]	@ (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d004      	beq.n	80043ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043c0:	4b05      	ldr	r3, [pc, #20]	@ (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80043c6:	3201      	adds	r2, #1
 80043c8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80043ca:	4b03      	ldr	r3, [pc, #12]	@ (80043d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80043cc:	681b      	ldr	r3, [r3, #0]
	}
 80043ce:	4618      	mov	r0, r3
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	2000077c 	.word	0x2000077c

080043dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043e6:	4b21      	ldr	r3, [pc, #132]	@ (800446c <prvAddCurrentTaskToDelayedList+0x90>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043ec:	4b20      	ldr	r3, [pc, #128]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x94>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4618      	mov	r0, r3
 80043f4:	f7fe f90c 	bl	8002610 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d10a      	bne.n	8004416 <prvAddCurrentTaskToDelayedList+0x3a>
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d007      	beq.n	8004416 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004406:	4b1a      	ldr	r3, [pc, #104]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x94>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3304      	adds	r3, #4
 800440c:	4619      	mov	r1, r3
 800440e:	4819      	ldr	r0, [pc, #100]	@ (8004474 <prvAddCurrentTaskToDelayedList+0x98>)
 8004410:	f7fe f8a1 	bl	8002556 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004414:	e026      	b.n	8004464 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4413      	add	r3, r2
 800441c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800441e:	4b14      	ldr	r3, [pc, #80]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x94>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004426:	68ba      	ldr	r2, [r7, #8]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	429a      	cmp	r2, r3
 800442c:	d209      	bcs.n	8004442 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442e:	4b12      	ldr	r3, [pc, #72]	@ (8004478 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004430:	681a      	ldr	r2, [r3, #0]
 8004432:	4b0f      	ldr	r3, [pc, #60]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x94>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	3304      	adds	r3, #4
 8004438:	4619      	mov	r1, r3
 800443a:	4610      	mov	r0, r2
 800443c:	f7fe f8af 	bl	800259e <vListInsert>
}
 8004440:	e010      	b.n	8004464 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004442:	4b0e      	ldr	r3, [pc, #56]	@ (800447c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	4b0a      	ldr	r3, [pc, #40]	@ (8004470 <prvAddCurrentTaskToDelayedList+0x94>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	3304      	adds	r3, #4
 800444c:	4619      	mov	r1, r3
 800444e:	4610      	mov	r0, r2
 8004450:	f7fe f8a5 	bl	800259e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004454:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	429a      	cmp	r2, r3
 800445c:	d202      	bcs.n	8004464 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800445e:	4a08      	ldr	r2, [pc, #32]	@ (8004480 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	6013      	str	r3, [r2, #0]
}
 8004464:	bf00      	nop
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	20000c54 	.word	0x20000c54
 8004470:	2000077c 	.word	0x2000077c
 8004474:	20000c3c 	.word	0x20000c3c
 8004478:	20000c0c 	.word	0x20000c0c
 800447c:	20000c08 	.word	0x20000c08
 8004480:	20000c70 	.word	0x20000c70

08004484 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b08a      	sub	sp, #40	@ 0x28
 8004488:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800448a:	2300      	movs	r3, #0
 800448c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800448e:	f000 fb13 	bl	8004ab8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004492:	4b1d      	ldr	r3, [pc, #116]	@ (8004508 <xTimerCreateTimerTask+0x84>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d021      	beq.n	80044de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800449a:	2300      	movs	r3, #0
 800449c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800449e:	2300      	movs	r3, #0
 80044a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044a2:	1d3a      	adds	r2, r7, #4
 80044a4:	f107 0108 	add.w	r1, r7, #8
 80044a8:	f107 030c 	add.w	r3, r7, #12
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7fe f80b 	bl	80024c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	9202      	str	r2, [sp, #8]
 80044ba:	9301      	str	r3, [sp, #4]
 80044bc:	2302      	movs	r3, #2
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	2300      	movs	r3, #0
 80044c2:	460a      	mov	r2, r1
 80044c4:	4911      	ldr	r1, [pc, #68]	@ (800450c <xTimerCreateTimerTask+0x88>)
 80044c6:	4812      	ldr	r0, [pc, #72]	@ (8004510 <xTimerCreateTimerTask+0x8c>)
 80044c8:	f7fe ff5c 	bl	8003384 <xTaskCreateStatic>
 80044cc:	4603      	mov	r3, r0
 80044ce:	4a11      	ldr	r2, [pc, #68]	@ (8004514 <xTimerCreateTimerTask+0x90>)
 80044d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044d2:	4b10      	ldr	r3, [pc, #64]	@ (8004514 <xTimerCreateTimerTask+0x90>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d001      	beq.n	80044de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044da:	2301      	movs	r3, #1
 80044dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10b      	bne.n	80044fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	613b      	str	r3, [r7, #16]
}
 80044f6:	bf00      	nop
 80044f8:	bf00      	nop
 80044fa:	e7fd      	b.n	80044f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044fc:	697b      	ldr	r3, [r7, #20]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	20000cac 	.word	0x20000cac
 800450c:	0800579c 	.word	0x0800579c
 8004510:	08004651 	.word	0x08004651
 8004514:	20000cb0 	.word	0x20000cb0

08004518 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b08a      	sub	sp, #40	@ 0x28
 800451c:	af00      	add	r7, sp, #0
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	60b9      	str	r1, [r7, #8]
 8004522:	607a      	str	r2, [r7, #4]
 8004524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004526:	2300      	movs	r3, #0
 8004528:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10b      	bne.n	8004548 <xTimerGenericCommand+0x30>
	__asm volatile
 8004530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004534:	f383 8811 	msr	BASEPRI, r3
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	f3bf 8f4f 	dsb	sy
 8004540:	623b      	str	r3, [r7, #32]
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	e7fd      	b.n	8004544 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004548:	4b19      	ldr	r3, [pc, #100]	@ (80045b0 <xTimerGenericCommand+0x98>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d02a      	beq.n	80045a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b05      	cmp	r3, #5
 8004560:	dc18      	bgt.n	8004594 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004562:	f7ff fdad 	bl	80040c0 <xTaskGetSchedulerState>
 8004566:	4603      	mov	r3, r0
 8004568:	2b02      	cmp	r3, #2
 800456a:	d109      	bne.n	8004580 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800456c:	4b10      	ldr	r3, [pc, #64]	@ (80045b0 <xTimerGenericCommand+0x98>)
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	f107 0110 	add.w	r1, r7, #16
 8004574:	2300      	movs	r3, #0
 8004576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004578:	f7fe f9ec 	bl	8002954 <xQueueGenericSend>
 800457c:	6278      	str	r0, [r7, #36]	@ 0x24
 800457e:	e012      	b.n	80045a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004580:	4b0b      	ldr	r3, [pc, #44]	@ (80045b0 <xTimerGenericCommand+0x98>)
 8004582:	6818      	ldr	r0, [r3, #0]
 8004584:	f107 0110 	add.w	r1, r7, #16
 8004588:	2300      	movs	r3, #0
 800458a:	2200      	movs	r2, #0
 800458c:	f7fe f9e2 	bl	8002954 <xQueueGenericSend>
 8004590:	6278      	str	r0, [r7, #36]	@ 0x24
 8004592:	e008      	b.n	80045a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004594:	4b06      	ldr	r3, [pc, #24]	@ (80045b0 <xTimerGenericCommand+0x98>)
 8004596:	6818      	ldr	r0, [r3, #0]
 8004598:	f107 0110 	add.w	r1, r7, #16
 800459c:	2300      	movs	r3, #0
 800459e:	683a      	ldr	r2, [r7, #0]
 80045a0:	f7fe fada 	bl	8002b58 <xQueueGenericSendFromISR>
 80045a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3728      	adds	r7, #40	@ 0x28
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000cac 	.word	0x20000cac

080045b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b088      	sub	sp, #32
 80045b8:	af02      	add	r7, sp, #8
 80045ba:	6078      	str	r0, [r7, #4]
 80045bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045be:	4b23      	ldr	r3, [pc, #140]	@ (800464c <prvProcessExpiredTimer+0x98>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3304      	adds	r3, #4
 80045cc:	4618      	mov	r0, r3
 80045ce:	f7fe f81f 	bl	8002610 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d023      	beq.n	8004628 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	699a      	ldr	r2, [r3, #24]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	18d1      	adds	r1, r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	683a      	ldr	r2, [r7, #0]
 80045ec:	6978      	ldr	r0, [r7, #20]
 80045ee:	f000 f8d5 	bl	800479c <prvInsertTimerInActiveList>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d020      	beq.n	800463a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045f8:	2300      	movs	r3, #0
 80045fa:	9300      	str	r3, [sp, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	687a      	ldr	r2, [r7, #4]
 8004600:	2100      	movs	r1, #0
 8004602:	6978      	ldr	r0, [r7, #20]
 8004604:	f7ff ff88 	bl	8004518 <xTimerGenericCommand>
 8004608:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d114      	bne.n	800463a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004614:	f383 8811 	msr	BASEPRI, r3
 8004618:	f3bf 8f6f 	isb	sy
 800461c:	f3bf 8f4f 	dsb	sy
 8004620:	60fb      	str	r3, [r7, #12]
}
 8004622:	bf00      	nop
 8004624:	bf00      	nop
 8004626:	e7fd      	b.n	8004624 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	6978      	ldr	r0, [r7, #20]
 8004640:	4798      	blx	r3
}
 8004642:	bf00      	nop
 8004644:	3718      	adds	r7, #24
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	20000ca4 	.word	0x20000ca4

08004650 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004658:	f107 0308 	add.w	r3, r7, #8
 800465c:	4618      	mov	r0, r3
 800465e:	f000 f859 	bl	8004714 <prvGetNextExpireTime>
 8004662:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	4619      	mov	r1, r3
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f805 	bl	8004678 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800466e:	f000 f8d7 	bl	8004820 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004672:	bf00      	nop
 8004674:	e7f0      	b.n	8004658 <prvTimerTask+0x8>
	...

08004678 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004682:	f7ff f937 	bl	80038f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004686:	f107 0308 	add.w	r3, r7, #8
 800468a:	4618      	mov	r0, r3
 800468c:	f000 f866 	bl	800475c <prvSampleTimeNow>
 8004690:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d130      	bne.n	80046fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10a      	bne.n	80046b4 <prvProcessTimerOrBlockTask+0x3c>
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d806      	bhi.n	80046b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046a6:	f7ff f933 	bl	8003910 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046aa:	68f9      	ldr	r1, [r7, #12]
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7ff ff81 	bl	80045b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046b2:	e024      	b.n	80046fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046ba:	4b13      	ldr	r3, [pc, #76]	@ (8004708 <prvProcessTimerOrBlockTask+0x90>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d101      	bne.n	80046c8 <prvProcessTimerOrBlockTask+0x50>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e000      	b.n	80046ca <prvProcessTimerOrBlockTask+0x52>
 80046c8:	2300      	movs	r3, #0
 80046ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046cc:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <prvProcessTimerOrBlockTask+0x94>)
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	4619      	mov	r1, r3
 80046da:	f7fe fe1f 	bl	800331c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046de:	f7ff f917 	bl	8003910 <xTaskResumeAll>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10a      	bne.n	80046fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046e8:	4b09      	ldr	r3, [pc, #36]	@ (8004710 <prvProcessTimerOrBlockTask+0x98>)
 80046ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	f3bf 8f6f 	isb	sy
}
 80046f8:	e001      	b.n	80046fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046fa:	f7ff f909 	bl	8003910 <xTaskResumeAll>
}
 80046fe:	bf00      	nop
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	20000ca8 	.word	0x20000ca8
 800470c:	20000cac 	.word	0x20000cac
 8004710:	e000ed04 	.word	0xe000ed04

08004714 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800471c:	4b0e      	ldr	r3, [pc, #56]	@ (8004758 <prvGetNextExpireTime+0x44>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d101      	bne.n	800472a <prvGetNextExpireTime+0x16>
 8004726:	2201      	movs	r2, #1
 8004728:	e000      	b.n	800472c <prvGetNextExpireTime+0x18>
 800472a:	2200      	movs	r2, #0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d105      	bne.n	8004744 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004738:	4b07      	ldr	r3, [pc, #28]	@ (8004758 <prvGetNextExpireTime+0x44>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
 8004742:	e001      	b.n	8004748 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004748:	68fb      	ldr	r3, [r7, #12]
}
 800474a:	4618      	mov	r0, r3
 800474c:	3714      	adds	r7, #20
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr
 8004756:	bf00      	nop
 8004758:	20000ca4 	.word	0x20000ca4

0800475c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004764:	f7ff f972 	bl	8003a4c <xTaskGetTickCount>
 8004768:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800476a:	4b0b      	ldr	r3, [pc, #44]	@ (8004798 <prvSampleTimeNow+0x3c>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	429a      	cmp	r2, r3
 8004772:	d205      	bcs.n	8004780 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004774:	f000 f93a 	bl	80049ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	601a      	str	r2, [r3, #0]
 800477e:	e002      	b.n	8004786 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004786:	4a04      	ldr	r2, [pc, #16]	@ (8004798 <prvSampleTimeNow+0x3c>)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800478c:	68fb      	ldr	r3, [r7, #12]
}
 800478e:	4618      	mov	r0, r3
 8004790:	3710      	adds	r7, #16
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	20000cb4 	.word	0x20000cb4

0800479c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b086      	sub	sp, #24
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047aa:	2300      	movs	r3, #0
 80047ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d812      	bhi.n	80047e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d302      	bcc.n	80047d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	e01b      	b.n	800480e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <prvInsertTimerInActiveList+0x7c>)
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	3304      	adds	r3, #4
 80047de:	4619      	mov	r1, r3
 80047e0:	4610      	mov	r0, r2
 80047e2:	f7fd fedc 	bl	800259e <vListInsert>
 80047e6:	e012      	b.n	800480e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d206      	bcs.n	80047fe <prvInsertTimerInActiveList+0x62>
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	429a      	cmp	r2, r3
 80047f6:	d302      	bcc.n	80047fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047f8:	2301      	movs	r3, #1
 80047fa:	617b      	str	r3, [r7, #20]
 80047fc:	e007      	b.n	800480e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047fe:	4b07      	ldr	r3, [pc, #28]	@ (800481c <prvInsertTimerInActiveList+0x80>)
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	3304      	adds	r3, #4
 8004806:	4619      	mov	r1, r3
 8004808:	4610      	mov	r0, r2
 800480a:	f7fd fec8 	bl	800259e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800480e:	697b      	ldr	r3, [r7, #20]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3718      	adds	r7, #24
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}
 8004818:	20000ca8 	.word	0x20000ca8
 800481c:	20000ca4 	.word	0x20000ca4

08004820 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b08e      	sub	sp, #56	@ 0x38
 8004824:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004826:	e0ce      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2b00      	cmp	r3, #0
 800482c:	da19      	bge.n	8004862 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800482e:	1d3b      	adds	r3, r7, #4
 8004830:	3304      	adds	r3, #4
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10b      	bne.n	8004852 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	61fb      	str	r3, [r7, #28]
}
 800484c:	bf00      	nop
 800484e:	bf00      	nop
 8004850:	e7fd      	b.n	800484e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004858:	6850      	ldr	r0, [r2, #4]
 800485a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485c:	6892      	ldr	r2, [r2, #8]
 800485e:	4611      	mov	r1, r2
 8004860:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	f2c0 80ae 	blt.w	80049c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800486e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d004      	beq.n	8004880 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004878:	3304      	adds	r3, #4
 800487a:	4618      	mov	r0, r3
 800487c:	f7fd fec8 	bl	8002610 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004880:	463b      	mov	r3, r7
 8004882:	4618      	mov	r0, r3
 8004884:	f7ff ff6a 	bl	800475c <prvSampleTimeNow>
 8004888:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b09      	cmp	r3, #9
 800488e:	f200 8097 	bhi.w	80049c0 <prvProcessReceivedCommands+0x1a0>
 8004892:	a201      	add	r2, pc, #4	@ (adr r2, 8004898 <prvProcessReceivedCommands+0x78>)
 8004894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004898:	080048c1 	.word	0x080048c1
 800489c:	080048c1 	.word	0x080048c1
 80048a0:	080048c1 	.word	0x080048c1
 80048a4:	08004937 	.word	0x08004937
 80048a8:	0800494b 	.word	0x0800494b
 80048ac:	08004997 	.word	0x08004997
 80048b0:	080048c1 	.word	0x080048c1
 80048b4:	080048c1 	.word	0x080048c1
 80048b8:	08004937 	.word	0x08004937
 80048bc:	0800494b 	.word	0x0800494b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048c6:	f043 0301 	orr.w	r3, r3, #1
 80048ca:	b2da      	uxtb	r2, r3
 80048cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d6:	699b      	ldr	r3, [r3, #24]
 80048d8:	18d1      	adds	r1, r2, r3
 80048da:	68bb      	ldr	r3, [r7, #8]
 80048dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048e0:	f7ff ff5c 	bl	800479c <prvInsertTimerInActiveList>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06c      	beq.n	80049c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048f8:	f003 0304 	and.w	r3, r3, #4
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d061      	beq.n	80049c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004900:	68ba      	ldr	r2, [r7, #8]
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	699b      	ldr	r3, [r3, #24]
 8004906:	441a      	add	r2, r3
 8004908:	2300      	movs	r3, #0
 800490a:	9300      	str	r3, [sp, #0]
 800490c:	2300      	movs	r3, #0
 800490e:	2100      	movs	r1, #0
 8004910:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004912:	f7ff fe01 	bl	8004518 <xTimerGenericCommand>
 8004916:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d152      	bne.n	80049c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800491e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004922:	f383 8811 	msr	BASEPRI, r3
 8004926:	f3bf 8f6f 	isb	sy
 800492a:	f3bf 8f4f 	dsb	sy
 800492e:	61bb      	str	r3, [r7, #24]
}
 8004930:	bf00      	nop
 8004932:	bf00      	nop
 8004934:	e7fd      	b.n	8004932 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004938:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800493c:	f023 0301 	bic.w	r3, r3, #1
 8004940:	b2da      	uxtb	r2, r3
 8004942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004944:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004948:	e03d      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800494a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	b2da      	uxtb	r2, r3
 8004956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004958:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004960:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10b      	bne.n	8004982 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	617b      	str	r3, [r7, #20]
}
 800497c:	bf00      	nop
 800497e:	bf00      	nop
 8004980:	e7fd      	b.n	800497e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004984:	699a      	ldr	r2, [r3, #24]
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	18d1      	adds	r1, r2, r3
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800498c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800498e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004990:	f7ff ff04 	bl	800479c <prvInsertTimerInActiveList>
					break;
 8004994:	e017      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004998:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800499c:	f003 0302 	and.w	r3, r3, #2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d103      	bne.n	80049ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80049a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a6:	f000 fbe7 	bl	8005178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049aa:	e00c      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049be:	e002      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80049c0:	bf00      	nop
 80049c2:	e000      	b.n	80049c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80049c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049c6:	4b08      	ldr	r3, [pc, #32]	@ (80049e8 <prvProcessReceivedCommands+0x1c8>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	1d39      	adds	r1, r7, #4
 80049cc:	2200      	movs	r2, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe f960 	bl	8002c94 <xQueueReceive>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f47f af26 	bne.w	8004828 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049dc:	bf00      	nop
 80049de:	bf00      	nop
 80049e0:	3730      	adds	r7, #48	@ 0x30
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	20000cac 	.word	0x20000cac

080049ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049f2:	e049      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049f4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049fe:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7fd fdff 	bl	8002610 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	68f8      	ldr	r0, [r7, #12]
 8004a18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a20:	f003 0304 	and.w	r3, r3, #4
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d02f      	beq.n	8004a88 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a32:	68ba      	ldr	r2, [r7, #8]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90e      	bls.n	8004a58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	68ba      	ldr	r2, [r7, #8]
 8004a3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	68fa      	ldr	r2, [r7, #12]
 8004a44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a46:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	4619      	mov	r1, r3
 8004a50:	4610      	mov	r0, r2
 8004a52:	f7fd fda4 	bl	800259e <vListInsert>
 8004a56:	e017      	b.n	8004a88 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a58:	2300      	movs	r3, #0
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	2100      	movs	r1, #0
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fd58 	bl	8004518 <xTimerGenericCommand>
 8004a68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10b      	bne.n	8004a88 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	603b      	str	r3, [r7, #0]
}
 8004a82:	bf00      	nop
 8004a84:	bf00      	nop
 8004a86:	e7fd      	b.n	8004a84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a88:	4b09      	ldr	r3, [pc, #36]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1b0      	bne.n	80049f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a92:	4b07      	ldr	r3, [pc, #28]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a98:	4b06      	ldr	r3, [pc, #24]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	@ (8004ab0 <prvSwitchTimerLists+0xc4>)
 8004a9e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004aa0:	4a04      	ldr	r2, [pc, #16]	@ (8004ab4 <prvSwitchTimerLists+0xc8>)
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	6013      	str	r3, [r2, #0]
}
 8004aa6:	bf00      	nop
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000ca4 	.word	0x20000ca4
 8004ab4:	20000ca8 	.word	0x20000ca8

08004ab8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004abe:	f000 f96b 	bl	8004d98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ac2:	4b15      	ldr	r3, [pc, #84]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d120      	bne.n	8004b0c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004aca:	4814      	ldr	r0, [pc, #80]	@ (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004acc:	f7fd fd16 	bl	80024fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ad0:	4813      	ldr	r0, [pc, #76]	@ (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ad2:	f7fd fd13 	bl	80024fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ad6:	4b13      	ldr	r3, [pc, #76]	@ (8004b24 <prvCheckForValidListAndQueue+0x6c>)
 8004ad8:	4a10      	ldr	r2, [pc, #64]	@ (8004b1c <prvCheckForValidListAndQueue+0x64>)
 8004ada:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004adc:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <prvCheckForValidListAndQueue+0x70>)
 8004ade:	4a10      	ldr	r2, [pc, #64]	@ (8004b20 <prvCheckForValidListAndQueue+0x68>)
 8004ae0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	4b11      	ldr	r3, [pc, #68]	@ (8004b2c <prvCheckForValidListAndQueue+0x74>)
 8004ae8:	4a11      	ldr	r2, [pc, #68]	@ (8004b30 <prvCheckForValidListAndQueue+0x78>)
 8004aea:	2110      	movs	r1, #16
 8004aec:	200a      	movs	r0, #10
 8004aee:	f7fd fe23 	bl	8002738 <xQueueGenericCreateStatic>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a08      	ldr	r2, [pc, #32]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004af6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004af8:	4b07      	ldr	r3, [pc, #28]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d005      	beq.n	8004b0c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b00:	4b05      	ldr	r3, [pc, #20]	@ (8004b18 <prvCheckForValidListAndQueue+0x60>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	490b      	ldr	r1, [pc, #44]	@ (8004b34 <prvCheckForValidListAndQueue+0x7c>)
 8004b06:	4618      	mov	r0, r3
 8004b08:	f7fe fbde 	bl	80032c8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b0c:	f000 f976 	bl	8004dfc <vPortExitCritical>
}
 8004b10:	bf00      	nop
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000cac 	.word	0x20000cac
 8004b1c:	20000c7c 	.word	0x20000c7c
 8004b20:	20000c90 	.word	0x20000c90
 8004b24:	20000ca4 	.word	0x20000ca4
 8004b28:	20000ca8 	.word	0x20000ca8
 8004b2c:	20000d58 	.word	0x20000d58
 8004b30:	20000cb8 	.word	0x20000cb8
 8004b34:	080057a4 	.word	0x080057a4

08004b38 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3b04      	subs	r3, #4
 8004b48:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	3b04      	subs	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f023 0201 	bic.w	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b68:	4a0c      	ldr	r2, [pc, #48]	@ (8004b9c <pxPortInitialiseStack+0x64>)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	3b14      	subs	r3, #20
 8004b72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	3b04      	subs	r3, #4
 8004b7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f06f 0202 	mvn.w	r2, #2
 8004b86:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	3b20      	subs	r3, #32
 8004b8c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3714      	adds	r7, #20
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	08004ba1 	.word	0x08004ba1

08004ba0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004baa:	4b13      	ldr	r3, [pc, #76]	@ (8004bf8 <prvTaskExitError+0x58>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	d00b      	beq.n	8004bcc <prvTaskExitError+0x2c>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	60fb      	str	r3, [r7, #12]
}
 8004bc6:	bf00      	nop
 8004bc8:	bf00      	nop
 8004bca:	e7fd      	b.n	8004bc8 <prvTaskExitError+0x28>
	__asm volatile
 8004bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	60bb      	str	r3, [r7, #8]
}
 8004bde:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004be0:	bf00      	nop
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d0fc      	beq.n	8004be2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004be8:	bf00      	nop
 8004bea:	bf00      	nop
 8004bec:	3714      	adds	r7, #20
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr
 8004bf6:	bf00      	nop
 8004bf8:	2000000c 	.word	0x2000000c
 8004bfc:	00000000 	.word	0x00000000

08004c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c00:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <pxCurrentTCBConst2>)
 8004c02:	6819      	ldr	r1, [r3, #0]
 8004c04:	6808      	ldr	r0, [r1, #0]
 8004c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0a:	f380 8809 	msr	PSP, r0
 8004c0e:	f3bf 8f6f 	isb	sy
 8004c12:	f04f 0000 	mov.w	r0, #0
 8004c16:	f380 8811 	msr	BASEPRI, r0
 8004c1a:	4770      	bx	lr
 8004c1c:	f3af 8000 	nop.w

08004c20 <pxCurrentTCBConst2>:
 8004c20:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c24:	bf00      	nop
 8004c26:	bf00      	nop

08004c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c28:	4808      	ldr	r0, [pc, #32]	@ (8004c4c <prvPortStartFirstTask+0x24>)
 8004c2a:	6800      	ldr	r0, [r0, #0]
 8004c2c:	6800      	ldr	r0, [r0, #0]
 8004c2e:	f380 8808 	msr	MSP, r0
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f380 8814 	msr	CONTROL, r0
 8004c3a:	b662      	cpsie	i
 8004c3c:	b661      	cpsie	f
 8004c3e:	f3bf 8f4f 	dsb	sy
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	df00      	svc	0
 8004c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c4a:	bf00      	nop
 8004c4c:	e000ed08 	.word	0xe000ed08

08004c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c56:	4b47      	ldr	r3, [pc, #284]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a47      	ldr	r2, [pc, #284]	@ (8004d78 <xPortStartScheduler+0x128>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d10b      	bne.n	8004c78 <xPortStartScheduler+0x28>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c78:	4b3e      	ldr	r3, [pc, #248]	@ (8004d74 <xPortStartScheduler+0x124>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d7c <xPortStartScheduler+0x12c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d10b      	bne.n	8004c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	613b      	str	r3, [r7, #16]
}
 8004c94:	bf00      	nop
 8004c96:	bf00      	nop
 8004c98:	e7fd      	b.n	8004c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c9a:	4b39      	ldr	r3, [pc, #228]	@ (8004d80 <xPortStartScheduler+0x130>)
 8004c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	781b      	ldrb	r3, [r3, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	22ff      	movs	r2, #255	@ 0xff
 8004caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cb4:	78fb      	ldrb	r3, [r7, #3]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	4b31      	ldr	r3, [pc, #196]	@ (8004d84 <xPortStartScheduler+0x134>)
 8004cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cc2:	4b31      	ldr	r3, [pc, #196]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cc4:	2207      	movs	r2, #7
 8004cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cc8:	e009      	b.n	8004cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cca:	4b2f      	ldr	r3, [pc, #188]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cde:	78fb      	ldrb	r3, [r7, #3]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ce6:	2b80      	cmp	r3, #128	@ 0x80
 8004ce8:	d0ef      	beq.n	8004cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cea:	4b27      	ldr	r3, [pc, #156]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1c3 0307 	rsb	r3, r3, #7
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d00b      	beq.n	8004d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8004cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfa:	f383 8811 	msr	BASEPRI, r3
 8004cfe:	f3bf 8f6f 	isb	sy
 8004d02:	f3bf 8f4f 	dsb	sy
 8004d06:	60bb      	str	r3, [r7, #8]
}
 8004d08:	bf00      	nop
 8004d0a:	bf00      	nop
 8004d0c:	e7fd      	b.n	8004d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	4a1c      	ldr	r2, [pc, #112]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d18:	4b1b      	ldr	r3, [pc, #108]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d20:	4a19      	ldr	r2, [pc, #100]	@ (8004d88 <xPortStartScheduler+0x138>)
 8004d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	b2da      	uxtb	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d2c:	4b17      	ldr	r3, [pc, #92]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a16      	ldr	r2, [pc, #88]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d38:	4b14      	ldr	r3, [pc, #80]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a13      	ldr	r2, [pc, #76]	@ (8004d8c <xPortStartScheduler+0x13c>)
 8004d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d44:	f000 f8da 	bl	8004efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d48:	4b11      	ldr	r3, [pc, #68]	@ (8004d90 <xPortStartScheduler+0x140>)
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d4e:	f000 f8f9 	bl	8004f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d52:	4b10      	ldr	r3, [pc, #64]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a0f      	ldr	r2, [pc, #60]	@ (8004d94 <xPortStartScheduler+0x144>)
 8004d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d5e:	f7ff ff63 	bl	8004c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d62:	f7fe ff3d 	bl	8003be0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d66:	f7ff ff1b 	bl	8004ba0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3718      	adds	r7, #24
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	e000ed00 	.word	0xe000ed00
 8004d78:	410fc271 	.word	0x410fc271
 8004d7c:	410fc270 	.word	0x410fc270
 8004d80:	e000e400 	.word	0xe000e400
 8004d84:	20000da8 	.word	0x20000da8
 8004d88:	20000dac 	.word	0x20000dac
 8004d8c:	e000ed20 	.word	0xe000ed20
 8004d90:	2000000c 	.word	0x2000000c
 8004d94:	e000ef34 	.word	0xe000ef34

08004d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	607b      	str	r3, [r7, #4]
}
 8004db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004db2:	4b10      	ldr	r3, [pc, #64]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	3301      	adds	r3, #1
 8004db8:	4a0e      	ldr	r2, [pc, #56]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <vPortEnterCritical+0x5c>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d110      	bne.n	8004de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8004df8 <vPortEnterCritical+0x60>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd2:	f383 8811 	msr	BASEPRI, r3
 8004dd6:	f3bf 8f6f 	isb	sy
 8004dda:	f3bf 8f4f 	dsb	sy
 8004dde:	603b      	str	r3, [r7, #0]
}
 8004de0:	bf00      	nop
 8004de2:	bf00      	nop
 8004de4:	e7fd      	b.n	8004de2 <vPortEnterCritical+0x4a>
	}
}
 8004de6:	bf00      	nop
 8004de8:	370c      	adds	r7, #12
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c
 8004df8:	e000ed04 	.word	0xe000ed04

08004dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b083      	sub	sp, #12
 8004e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d10b      	bne.n	8004e22 <vPortExitCritical+0x26>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	607b      	str	r3, [r7, #4]
}
 8004e1c:	bf00      	nop
 8004e1e:	bf00      	nop
 8004e20:	e7fd      	b.n	8004e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	4a08      	ldr	r2, [pc, #32]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e2c:	4b07      	ldr	r3, [pc, #28]	@ (8004e4c <vPortExitCritical+0x50>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <vPortExitCritical+0x44>
 8004e34:	2300      	movs	r3, #0
 8004e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	f383 8811 	msr	BASEPRI, r3
}
 8004e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e40:	bf00      	nop
 8004e42:	370c      	adds	r7, #12
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	2000000c 	.word	0x2000000c

08004e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e50:	f3ef 8009 	mrs	r0, PSP
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	4b15      	ldr	r3, [pc, #84]	@ (8004eb0 <pxCurrentTCBConst>)
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	f01e 0f10 	tst.w	lr, #16
 8004e60:	bf08      	it	eq
 8004e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e6a:	6010      	str	r0, [r2, #0]
 8004e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e74:	f380 8811 	msr	BASEPRI, r0
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	f3bf 8f6f 	isb	sy
 8004e80:	f7fe feae 	bl	8003be0 <vTaskSwitchContext>
 8004e84:	f04f 0000 	mov.w	r0, #0
 8004e88:	f380 8811 	msr	BASEPRI, r0
 8004e8c:	bc09      	pop	{r0, r3}
 8004e8e:	6819      	ldr	r1, [r3, #0]
 8004e90:	6808      	ldr	r0, [r1, #0]
 8004e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e96:	f01e 0f10 	tst.w	lr, #16
 8004e9a:	bf08      	it	eq
 8004e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004ea0:	f380 8809 	msr	PSP, r0
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	f3af 8000 	nop.w

08004eb0 <pxCurrentTCBConst>:
 8004eb0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004eb4:	bf00      	nop
 8004eb6:	bf00      	nop

08004eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ed2:	f7fe fdcb 	bl	8003a6c <xTaskIncrementTick>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004edc:	4b06      	ldr	r3, [pc, #24]	@ (8004ef8 <xPortSysTickHandler+0x40>)
 8004ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ee2:	601a      	str	r2, [r3, #0]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	f383 8811 	msr	BASEPRI, r3
}
 8004eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ef0:	bf00      	nop
 8004ef2:	3708      	adds	r7, #8
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd80      	pop	{r7, pc}
 8004ef8:	e000ed04 	.word	0xe000ed04

08004efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f00:	4b0b      	ldr	r3, [pc, #44]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <vPortSetupTimerInterrupt+0x38>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f38 <vPortSetupTimerInterrupt+0x3c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0a      	ldr	r2, [pc, #40]	@ (8004f3c <vPortSetupTimerInterrupt+0x40>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	099b      	lsrs	r3, r3, #6
 8004f18:	4a09      	ldr	r2, [pc, #36]	@ (8004f40 <vPortSetupTimerInterrupt+0x44>)
 8004f1a:	3b01      	subs	r3, #1
 8004f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f1e:	4b04      	ldr	r3, [pc, #16]	@ (8004f30 <vPortSetupTimerInterrupt+0x34>)
 8004f20:	2207      	movs	r2, #7
 8004f22:	601a      	str	r2, [r3, #0]
}
 8004f24:	bf00      	nop
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	e000e010 	.word	0xe000e010
 8004f34:	e000e018 	.word	0xe000e018
 8004f38:	20000000 	.word	0x20000000
 8004f3c:	10624dd3 	.word	0x10624dd3
 8004f40:	e000e014 	.word	0xe000e014

08004f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f54 <vPortEnableVFP+0x10>
 8004f48:	6801      	ldr	r1, [r0, #0]
 8004f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f4e:	6001      	str	r1, [r0, #0]
 8004f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f52:	bf00      	nop
 8004f54:	e000ed88 	.word	0xe000ed88

08004f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f5e:	f3ef 8305 	mrs	r3, IPSR
 8004f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2b0f      	cmp	r3, #15
 8004f68:	d915      	bls.n	8004f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f6a:	4a18      	ldr	r2, [pc, #96]	@ (8004fcc <vPortValidateInterruptPriority+0x74>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	4413      	add	r3, r2
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f74:	4b16      	ldr	r3, [pc, #88]	@ (8004fd0 <vPortValidateInterruptPriority+0x78>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	7afa      	ldrb	r2, [r7, #11]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d20b      	bcs.n	8004f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f82:	f383 8811 	msr	BASEPRI, r3
 8004f86:	f3bf 8f6f 	isb	sy
 8004f8a:	f3bf 8f4f 	dsb	sy
 8004f8e:	607b      	str	r3, [r7, #4]
}
 8004f90:	bf00      	nop
 8004f92:	bf00      	nop
 8004f94:	e7fd      	b.n	8004f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f96:	4b0f      	ldr	r3, [pc, #60]	@ (8004fd4 <vPortValidateInterruptPriority+0x7c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8004fd8 <vPortValidateInterruptPriority+0x80>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d90b      	bls.n	8004fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004faa:	f383 8811 	msr	BASEPRI, r3
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f3bf 8f4f 	dsb	sy
 8004fb6:	603b      	str	r3, [r7, #0]
}
 8004fb8:	bf00      	nop
 8004fba:	bf00      	nop
 8004fbc:	e7fd      	b.n	8004fba <vPortValidateInterruptPriority+0x62>
	}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	e000e3f0 	.word	0xe000e3f0
 8004fd0:	20000da8 	.word	0x20000da8
 8004fd4:	e000ed0c 	.word	0xe000ed0c
 8004fd8:	20000dac 	.word	0x20000dac

08004fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	@ 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe8:	f7fe fc84 	bl	80038f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fec:	4b5c      	ldr	r3, [pc, #368]	@ (8005160 <pvPortMalloc+0x184>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff4:	f000 f924 	bl	8005240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8005164 <pvPortMalloc+0x188>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 8095 	bne.w	8005130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01e      	beq.n	800504a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800500c:	2208      	movs	r2, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d015      	beq.n	800504a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <pvPortMalloc+0x6e>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	617b      	str	r3, [r7, #20]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d06f      	beq.n	8005130 <pvPortMalloc+0x154>
 8005050:	4b45      	ldr	r3, [pc, #276]	@ (8005168 <pvPortMalloc+0x18c>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	429a      	cmp	r2, r3
 8005058:	d86a      	bhi.n	8005130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800505a:	4b44      	ldr	r3, [pc, #272]	@ (800516c <pvPortMalloc+0x190>)
 800505c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800505e:	4b43      	ldr	r3, [pc, #268]	@ (800516c <pvPortMalloc+0x190>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005064:	e004      	b.n	8005070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	429a      	cmp	r2, r3
 8005078:	d903      	bls.n	8005082 <pvPortMalloc+0xa6>
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f1      	bne.n	8005066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005082:	4b37      	ldr	r3, [pc, #220]	@ (8005160 <pvPortMalloc+0x184>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005088:	429a      	cmp	r2, r3
 800508a:	d051      	beq.n	8005130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	2208      	movs	r2, #8
 8005092:	4413      	add	r3, r2
 8005094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	6a3b      	ldr	r3, [r7, #32]
 800509c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800509e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a0:	685a      	ldr	r2, [r3, #4]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	1ad2      	subs	r2, r2, r3
 80050a6:	2308      	movs	r3, #8
 80050a8:	005b      	lsls	r3, r3, #1
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d920      	bls.n	80050f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4413      	add	r3, r2
 80050b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b6:	69bb      	ldr	r3, [r7, #24]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00b      	beq.n	80050d8 <pvPortMalloc+0xfc>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050da:	685a      	ldr	r2, [r3, #4]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	1ad2      	subs	r2, r2, r3
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050ea:	69b8      	ldr	r0, [r7, #24]
 80050ec:	f000 f90a 	bl	8005304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050f0:	4b1d      	ldr	r3, [pc, #116]	@ (8005168 <pvPortMalloc+0x18c>)
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	1ad3      	subs	r3, r2, r3
 80050fa:	4a1b      	ldr	r2, [pc, #108]	@ (8005168 <pvPortMalloc+0x18c>)
 80050fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050fe:	4b1a      	ldr	r3, [pc, #104]	@ (8005168 <pvPortMalloc+0x18c>)
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	4b1b      	ldr	r3, [pc, #108]	@ (8005170 <pvPortMalloc+0x194>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	429a      	cmp	r2, r3
 8005108:	d203      	bcs.n	8005112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800510a:	4b17      	ldr	r3, [pc, #92]	@ (8005168 <pvPortMalloc+0x18c>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a18      	ldr	r2, [pc, #96]	@ (8005170 <pvPortMalloc+0x194>)
 8005110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005114:	685a      	ldr	r2, [r3, #4]
 8005116:	4b13      	ldr	r3, [pc, #76]	@ (8005164 <pvPortMalloc+0x188>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	431a      	orrs	r2, r3
 800511c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800511e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	2200      	movs	r2, #0
 8005124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <pvPortMalloc+0x198>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3301      	adds	r3, #1
 800512c:	4a11      	ldr	r2, [pc, #68]	@ (8005174 <pvPortMalloc+0x198>)
 800512e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005130:	f7fe fbee 	bl	8003910 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d00b      	beq.n	8005156 <pvPortMalloc+0x17a>
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	60fb      	str	r3, [r7, #12]
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	e7fd      	b.n	8005152 <pvPortMalloc+0x176>
	return pvReturn;
 8005156:	69fb      	ldr	r3, [r7, #28]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3728      	adds	r7, #40	@ 0x28
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	200049b8 	.word	0x200049b8
 8005164:	200049cc 	.word	0x200049cc
 8005168:	200049bc 	.word	0x200049bc
 800516c:	200049b0 	.word	0x200049b0
 8005170:	200049c0 	.word	0x200049c0
 8005174:	200049c4 	.word	0x200049c4

08005178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b086      	sub	sp, #24
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d04f      	beq.n	800522a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800518a:	2308      	movs	r3, #8
 800518c:	425b      	negs	r3, r3
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	4413      	add	r3, r2
 8005192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	685a      	ldr	r2, [r3, #4]
 800519c:	4b25      	ldr	r3, [pc, #148]	@ (8005234 <vPortFree+0xbc>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10b      	bne.n	80051be <vPortFree+0x46>
	__asm volatile
 80051a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051aa:	f383 8811 	msr	BASEPRI, r3
 80051ae:	f3bf 8f6f 	isb	sy
 80051b2:	f3bf 8f4f 	dsb	sy
 80051b6:	60fb      	str	r3, [r7, #12]
}
 80051b8:	bf00      	nop
 80051ba:	bf00      	nop
 80051bc:	e7fd      	b.n	80051ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00b      	beq.n	80051de <vPortFree+0x66>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60bb      	str	r3, [r7, #8]
}
 80051d8:	bf00      	nop
 80051da:	bf00      	nop
 80051dc:	e7fd      	b.n	80051da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	685a      	ldr	r2, [r3, #4]
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <vPortFree+0xbc>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01e      	beq.n	800522a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d11a      	bne.n	800522a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	685a      	ldr	r2, [r3, #4]
 80051f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005234 <vPortFree+0xbc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	43db      	mvns	r3, r3
 80051fe:	401a      	ands	r2, r3
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005204:	f7fe fb76 	bl	80038f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	685a      	ldr	r2, [r3, #4]
 800520c:	4b0a      	ldr	r3, [pc, #40]	@ (8005238 <vPortFree+0xc0>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4413      	add	r3, r2
 8005212:	4a09      	ldr	r2, [pc, #36]	@ (8005238 <vPortFree+0xc0>)
 8005214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005216:	6938      	ldr	r0, [r7, #16]
 8005218:	f000 f874 	bl	8005304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800521c:	4b07      	ldr	r3, [pc, #28]	@ (800523c <vPortFree+0xc4>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	3301      	adds	r3, #1
 8005222:	4a06      	ldr	r2, [pc, #24]	@ (800523c <vPortFree+0xc4>)
 8005224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005226:	f7fe fb73 	bl	8003910 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800522a:	bf00      	nop
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	200049cc 	.word	0x200049cc
 8005238:	200049bc 	.word	0x200049bc
 800523c:	200049c8 	.word	0x200049c8

08005240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005246:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800524a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800524c:	4b27      	ldr	r3, [pc, #156]	@ (80052ec <prvHeapInit+0xac>)
 800524e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	3307      	adds	r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 0307 	bic.w	r3, r3, #7
 8005266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <prvHeapInit+0xac>)
 8005270:	4413      	add	r3, r2
 8005272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <prvHeapInit+0xb0>)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800527e:	4b1c      	ldr	r3, [pc, #112]	@ (80052f0 <prvHeapInit+0xb0>)
 8005280:	2200      	movs	r2, #0
 8005282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	4413      	add	r3, r2
 800528a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800528c:	2208      	movs	r2, #8
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f023 0307 	bic.w	r3, r3, #7
 800529a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	4a15      	ldr	r2, [pc, #84]	@ (80052f4 <prvHeapInit+0xb4>)
 80052a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052a2:	4b14      	ldr	r3, [pc, #80]	@ (80052f4 <prvHeapInit+0xb4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2200      	movs	r2, #0
 80052a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052aa:	4b12      	ldr	r3, [pc, #72]	@ (80052f4 <prvHeapInit+0xb4>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	1ad2      	subs	r2, r2, r3
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052c0:	4b0c      	ldr	r3, [pc, #48]	@ (80052f4 <prvHeapInit+0xb4>)
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	4a0a      	ldr	r2, [pc, #40]	@ (80052f8 <prvHeapInit+0xb8>)
 80052ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	4a09      	ldr	r2, [pc, #36]	@ (80052fc <prvHeapInit+0xbc>)
 80052d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <prvHeapInit+0xc0>)
 80052da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052de:	601a      	str	r2, [r3, #0]
}
 80052e0:	bf00      	nop
 80052e2:	3714      	adds	r7, #20
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20000db0 	.word	0x20000db0
 80052f0:	200049b0 	.word	0x200049b0
 80052f4:	200049b8 	.word	0x200049b8
 80052f8:	200049c0 	.word	0x200049c0
 80052fc:	200049bc 	.word	0x200049bc
 8005300:	200049cc 	.word	0x200049cc

08005304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800530c:	4b28      	ldr	r3, [pc, #160]	@ (80053b0 <prvInsertBlockIntoFreeList+0xac>)
 800530e:	60fb      	str	r3, [r7, #12]
 8005310:	e002      	b.n	8005318 <prvInsertBlockIntoFreeList+0x14>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	429a      	cmp	r2, r3
 8005320:	d8f7      	bhi.n	8005312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	4413      	add	r3, r2
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	429a      	cmp	r2, r3
 8005332:	d108      	bne.n	8005346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	441a      	add	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	441a      	add	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d118      	bne.n	800538c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	4b15      	ldr	r3, [pc, #84]	@ (80053b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	429a      	cmp	r2, r3
 8005364:	d00d      	beq.n	8005382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	441a      	add	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	601a      	str	r2, [r3, #0]
 8005380:	e008      	b.n	8005394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005382:	4b0c      	ldr	r3, [pc, #48]	@ (80053b4 <prvInsertBlockIntoFreeList+0xb0>)
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e003      	b.n	8005394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	429a      	cmp	r2, r3
 800539a:	d002      	beq.n	80053a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	687a      	ldr	r2, [r7, #4]
 80053a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053a2:	bf00      	nop
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	200049b0 	.word	0x200049b0
 80053b4:	200049b8 	.word	0x200049b8

080053b8 <memset>:
 80053b8:	4402      	add	r2, r0
 80053ba:	4603      	mov	r3, r0
 80053bc:	4293      	cmp	r3, r2
 80053be:	d100      	bne.n	80053c2 <memset+0xa>
 80053c0:	4770      	bx	lr
 80053c2:	f803 1b01 	strb.w	r1, [r3], #1
 80053c6:	e7f9      	b.n	80053bc <memset+0x4>

080053c8 <__libc_init_array>:
 80053c8:	b570      	push	{r4, r5, r6, lr}
 80053ca:	4d0d      	ldr	r5, [pc, #52]	@ (8005400 <__libc_init_array+0x38>)
 80053cc:	4c0d      	ldr	r4, [pc, #52]	@ (8005404 <__libc_init_array+0x3c>)
 80053ce:	1b64      	subs	r4, r4, r5
 80053d0:	10a4      	asrs	r4, r4, #2
 80053d2:	2600      	movs	r6, #0
 80053d4:	42a6      	cmp	r6, r4
 80053d6:	d109      	bne.n	80053ec <__libc_init_array+0x24>
 80053d8:	4d0b      	ldr	r5, [pc, #44]	@ (8005408 <__libc_init_array+0x40>)
 80053da:	4c0c      	ldr	r4, [pc, #48]	@ (800540c <__libc_init_array+0x44>)
 80053dc:	f000 f826 	bl	800542c <_init>
 80053e0:	1b64      	subs	r4, r4, r5
 80053e2:	10a4      	asrs	r4, r4, #2
 80053e4:	2600      	movs	r6, #0
 80053e6:	42a6      	cmp	r6, r4
 80053e8:	d105      	bne.n	80053f6 <__libc_init_array+0x2e>
 80053ea:	bd70      	pop	{r4, r5, r6, pc}
 80053ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80053f0:	4798      	blx	r3
 80053f2:	3601      	adds	r6, #1
 80053f4:	e7ee      	b.n	80053d4 <__libc_init_array+0xc>
 80053f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80053fa:	4798      	blx	r3
 80053fc:	3601      	adds	r6, #1
 80053fe:	e7f2      	b.n	80053e6 <__libc_init_array+0x1e>
 8005400:	080057f0 	.word	0x080057f0
 8005404:	080057f0 	.word	0x080057f0
 8005408:	080057f0 	.word	0x080057f0
 800540c:	080057f4 	.word	0x080057f4

08005410 <memcpy>:
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	f100 33ff 	add.w	r3, r0, #4294967295
 8005418:	d100      	bne.n	800541c <memcpy+0xc>
 800541a:	4770      	bx	lr
 800541c:	b510      	push	{r4, lr}
 800541e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005422:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005426:	4291      	cmp	r1, r2
 8005428:	d1f9      	bne.n	800541e <memcpy+0xe>
 800542a:	bd10      	pop	{r4, pc}

0800542c <_init>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr

08005438 <_fini>:
 8005438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543a:	bf00      	nop
 800543c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800543e:	bc08      	pop	{r3}
 8005440:	469e      	mov	lr, r3
 8005442:	4770      	bx	lr
