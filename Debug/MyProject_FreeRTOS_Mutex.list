
MyProject_FreeRTOS_Mutex.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005494  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08005634  08005634  00006634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800570c  0800570c  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800570c  0800570c  0000670c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005714  08005714  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005718  08005718  00006718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800571c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  0800572c  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  0800572c  000079d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f22  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000289c  00000000  00000000  00017f62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  0001a800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000af1  00000000  00000000  0001b640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003273  00000000  00000000  0001c131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f87b  00000000  00000000  0001f3a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f5b1  00000000  00000000  0002ec1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000be1d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  000be214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007f  00000000  00000000  000c1cec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800561c 	.word	0x0800561c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	0800561c 	.word	0x0800561c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <HighPrioTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// HighPrioTask 수정 예시 (LowPrioTask도 동일하게 수정합니다)
void HighPrioTask(void *argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  char *msg = "## HIGH PRIORITY TASK IS RUNNING ##\r\n";
 8000524:	4b16      	ldr	r3, [pc, #88]	@ (8000580 <HighPrioTask+0x64>)
 8000526:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
    // 1. 뮤텍스를 획득합니다 (화장실 열쇠를 가져옵니다).
    // 만약 다른 작업이 사용 중이면, 반납할 때까지 여기서 기다립니다.
    if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 8000528:	4b16      	ldr	r3, [pc, #88]	@ (8000584 <HighPrioTask+0x68>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	f04f 31ff 	mov.w	r1, #4294967295
 8000530:	4618      	mov	r0, r3
 8000532:	f001 fffc 	bl	800252e <osMutexAcquire>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d11c      	bne.n	8000576 <HighPrioTask+0x5a>
    {
      // --- 임계 영역(Critical Section) 시작 ---
      // 이 안의 코드는 다른 작업의 방해를 받지 않고 모두 실행됨을 보장받습니다.
      for (int i = 0; i < strlen(msg); i++)
 800053c:	2300      	movs	r3, #0
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	e00d      	b.n	800055e <HighPrioTask+0x42>
      {
        HAL_UART_Transmit(&huart2, (uint8_t *)&msg[i], 1, 100);
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	68ba      	ldr	r2, [r7, #8]
 8000546:	18d1      	adds	r1, r2, r3
 8000548:	2364      	movs	r3, #100	@ 0x64
 800054a:	2201      	movs	r2, #1
 800054c:	480e      	ldr	r0, [pc, #56]	@ (8000588 <HighPrioTask+0x6c>)
 800054e:	f001 fa81 	bl	8001a54 <HAL_UART_Transmit>
        osDelay(5);
 8000552:	2005      	movs	r0, #5
 8000554:	f001 ff4a 	bl	80023ec <osDelay>
      for (int i = 0; i < strlen(msg); i++)
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	3301      	adds	r3, #1
 800055c:	60fb      	str	r3, [r7, #12]
 800055e:	68b8      	ldr	r0, [r7, #8]
 8000560:	f7ff fe3e 	bl	80001e0 <strlen>
 8000564:	4602      	mov	r2, r0
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	429a      	cmp	r2, r3
 800056a:	d8ea      	bhi.n	8000542 <HighPrioTask+0x26>
      }
      // --- 임계 영역(Critical Section) 끝 ---

      // 2. 사용이 끝났으면 뮤텍스를 반납합니다 (열쇠를 제자리에 둡니다).
      osMutexRelease(uartMutexHandle);
 800056c:	4b05      	ldr	r3, [pc, #20]	@ (8000584 <HighPrioTask+0x68>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4618      	mov	r0, r3
 8000572:	f002 f827 	bl	80025c4 <osMutexRelease>
    }
    osDelay(1000);
 8000576:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800057a:	f001 ff37 	bl	80023ec <osDelay>
    if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 800057e:	e7d3      	b.n	8000528 <HighPrioTask+0xc>
 8000580:	08005640 	.word	0x08005640
 8000584:	20000078 	.word	0x20000078
 8000588:	2000002c 	.word	0x2000002c

0800058c <LowPrioTask>:
  }
}

// 우선순위 낮은 작업: 'low' 메시지를 한 글자씩 출력 (뮤텍스 적용)
void LowPrioTask(void *argument)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  char *msg = "--- low priority task is running ---\r\n";
 8000594:	4b16      	ldr	r3, [pc, #88]	@ (80005f0 <LowPrioTask+0x64>)
 8000596:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
    // 1. 뮤텍스를 획득합니다 (화장실 열쇠를 가져옵니다).
    if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 8000598:	4b16      	ldr	r3, [pc, #88]	@ (80005f4 <LowPrioTask+0x68>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f04f 31ff 	mov.w	r1, #4294967295
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 ffc4 	bl	800252e <osMutexAcquire>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d11c      	bne.n	80005e6 <LowPrioTask+0x5a>
    {
      // --- 임계 영역(Critical Section) 시작 ---
      // 이 안의 코드는 다른 작업의 방해를 받지 않습니다.
      for (int i = 0; i < strlen(msg); i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e00d      	b.n	80005ce <LowPrioTask+0x42>
      {
        HAL_UART_Transmit(&huart2, (uint8_t *)&msg[i], 1, 100);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	68ba      	ldr	r2, [r7, #8]
 80005b6:	18d1      	adds	r1, r2, r3
 80005b8:	2364      	movs	r3, #100	@ 0x64
 80005ba:	2201      	movs	r2, #1
 80005bc:	480e      	ldr	r0, [pc, #56]	@ (80005f8 <LowPrioTask+0x6c>)
 80005be:	f001 fa49 	bl	8001a54 <HAL_UART_Transmit>
        osDelay(10); // 다른 작업이 끼어들 틈을 만들기 위해 아주 잠깐 쉼
 80005c2:	200a      	movs	r0, #10
 80005c4:	f001 ff12 	bl	80023ec <osDelay>
      for (int i = 0; i < strlen(msg); i++)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	3301      	adds	r3, #1
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	68b8      	ldr	r0, [r7, #8]
 80005d0:	f7ff fe06 	bl	80001e0 <strlen>
 80005d4:	4602      	mov	r2, r0
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	429a      	cmp	r2, r3
 80005da:	d8ea      	bhi.n	80005b2 <LowPrioTask+0x26>
      }
      // --- 임계 영역(Critical Section) 끝 ---

      // 2. 사용이 끝났으면 뮤텍스를 반납합니다 (열쇠를 제자리에 둡니다).
      osMutexRelease(uartMutexHandle);
 80005dc:	4b05      	ldr	r3, [pc, #20]	@ (80005f4 <LowPrioTask+0x68>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 ffef 	bl	80025c4 <osMutexRelease>
    }
    osDelay(1000); // 1초 대기
 80005e6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005ea:	f001 feff 	bl	80023ec <osDelay>
    if (osMutexAcquire(uartMutexHandle, osWaitForever) == osOK)
 80005ee:	e7d3      	b.n	8000598 <LowPrioTask+0xc>
 80005f0:	08005668 	.word	0x08005668
 80005f4:	20000078 	.word	0x20000078
 80005f8:	2000002c 	.word	0x2000002c

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b096      	sub	sp, #88	@ 0x58
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000602:	f000 fa49 	bl	8000a98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000606:	f000 f85d 	bl	80006c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800060a:	f000 f8f1 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800060e:	f000 f8c5 	bl	800079c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000612:	f001 fe0f 	bl	8002234 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
  /* add mutexes, ... */
  // uartMutex를 생성합니다.
  const osMutexAttr_t UartMutex_attributes = {
 8000616:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
 800061e:	605a      	str	r2, [r3, #4]
 8000620:	609a      	str	r2, [r3, #8]
 8000622:	60da      	str	r2, [r3, #12]
 8000624:	4b1e      	ldr	r3, [pc, #120]	@ (80006a0 <main+0xa4>)
 8000626:	64bb      	str	r3, [r7, #72]	@ 0x48
    .name = "uartMutex"
  };
  uartMutexHandle = osMutexNew(&UartMutex_attributes);
 8000628:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fef8 	bl	8002422 <osMutexNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a1b      	ldr	r2, [pc, #108]	@ (80006a4 <main+0xa8>)
 8000636:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000638:	4a1b      	ldr	r2, [pc, #108]	@ (80006a8 <main+0xac>)
 800063a:	2100      	movs	r1, #0
 800063c:	481b      	ldr	r0, [pc, #108]	@ (80006ac <main+0xb0>)
 800063e:	f001 fe43 	bl	80022c8 <osThreadNew>
 8000642:	4603      	mov	r3, r0
 8000644:	4a1a      	ldr	r2, [pc, #104]	@ (80006b0 <main+0xb4>)
 8000646:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  // LowPrioTask 생성 (우선순위: 낮음)
  const osThreadAttr_t lowPrioTask_attributes = {
 8000648:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800064c:	2224      	movs	r2, #36	@ 0x24
 800064e:	2100      	movs	r1, #0
 8000650:	4618      	mov	r0, r3
 8000652:	f004 ffa9 	bl	80055a8 <memset>
 8000656:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <main+0xb8>)
 8000658:	627b      	str	r3, [r7, #36]	@ 0x24
 800065a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800065e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000660:	2308      	movs	r3, #8
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
    .name = "LowPrioTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t) osPriorityLow,
  };
  osThreadNew(LowPrioTask, NULL, &lowPrioTask_attributes);
 8000664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000668:	461a      	mov	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	4812      	ldr	r0, [pc, #72]	@ (80006b8 <main+0xbc>)
 800066e:	f001 fe2b 	bl	80022c8 <osThreadNew>

  // HighPrioTask 생성 (우선순위: 높음)
  const osThreadAttr_t highPrioTask_attributes = {
 8000672:	463b      	mov	r3, r7
 8000674:	2224      	movs	r2, #36	@ 0x24
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f004 ff95 	bl	80055a8 <memset>
 800067e:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <main+0xc0>)
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000686:	617b      	str	r3, [r7, #20]
 8000688:	2328      	movs	r3, #40	@ 0x28
 800068a:	61bb      	str	r3, [r7, #24]
    .name = "HighPrioTask",
    .stack_size = 128 * 4,
    .priority = (osPriority_t) osPriorityHigh,
  };
  osThreadNew(HighPrioTask, NULL, &highPrioTask_attributes);
 800068c:	463b      	mov	r3, r7
 800068e:	461a      	mov	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	480b      	ldr	r0, [pc, #44]	@ (80006c0 <main+0xc4>)
 8000694:	f001 fe18 	bl	80022c8 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000698:	f001 fdf0 	bl	800227c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <main+0xa0>
 80006a0:	08005690 	.word	0x08005690
 80006a4:	20000078 	.word	0x20000078
 80006a8:	080056d0 	.word	0x080056d0
 80006ac:	080008cd 	.word	0x080008cd
 80006b0:	20000074 	.word	0x20000074
 80006b4:	0800569c 	.word	0x0800569c
 80006b8:	0800058d 	.word	0x0800058d
 80006bc:	080056a8 	.word	0x080056a8
 80006c0:	0800051d 	.word	0x0800051d

080006c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b094      	sub	sp, #80	@ 0x50
 80006c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ca:	f107 0320 	add.w	r3, r7, #32
 80006ce:	2230      	movs	r2, #48	@ 0x30
 80006d0:	2100      	movs	r1, #0
 80006d2:	4618      	mov	r0, r3
 80006d4:	f004 ff68 	bl	80055a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	2200      	movs	r2, #0
 80006de:	601a      	str	r2, [r3, #0]
 80006e0:	605a      	str	r2, [r3, #4]
 80006e2:	609a      	str	r2, [r3, #8]
 80006e4:	60da      	str	r2, [r3, #12]
 80006e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e8:	2300      	movs	r3, #0
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	4b29      	ldr	r3, [pc, #164]	@ (8000794 <SystemClock_Config+0xd0>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	4a28      	ldr	r2, [pc, #160]	@ (8000794 <SystemClock_Config+0xd0>)
 80006f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006f8:	4b26      	ldr	r3, [pc, #152]	@ (8000794 <SystemClock_Config+0xd0>)
 80006fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000700:	60bb      	str	r3, [r7, #8]
 8000702:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000704:	2300      	movs	r3, #0
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	4b23      	ldr	r3, [pc, #140]	@ (8000798 <SystemClock_Config+0xd4>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000710:	4a21      	ldr	r2, [pc, #132]	@ (8000798 <SystemClock_Config+0xd4>)
 8000712:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1f      	ldr	r3, [pc, #124]	@ (8000798 <SystemClock_Config+0xd4>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000724:	2302      	movs	r3, #2
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000730:	2302      	movs	r3, #2
 8000732:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000738:	2310      	movs	r3, #16
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800073c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000740:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000742:	2304      	movs	r3, #4
 8000744:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000746:	2307      	movs	r3, #7
 8000748:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074a:	f107 0320 	add.w	r3, r7, #32
 800074e:	4618      	mov	r0, r3
 8000750:	f000 fc98 	bl	8001084 <HAL_RCC_OscConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075a:	f000 f8bf 	bl	80008dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2302      	movs	r3, #2
 8000764:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000770:	2300      	movs	r3, #0
 8000772:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	2102      	movs	r1, #2
 800077a:	4618      	mov	r0, r3
 800077c:	f000 fefa 	bl	8001574 <HAL_RCC_ClockConfig>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d001      	beq.n	800078a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000786:	f000 f8a9 	bl	80008dc <Error_Handler>
  }
}
 800078a:	bf00      	nop
 800078c:	3750      	adds	r7, #80	@ 0x50
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40023800 	.word	0x40023800
 8000798:	40007000 	.word	0x40007000

0800079c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a2:	4a12      	ldr	r2, [pc, #72]	@ (80007ec <MX_USART2_UART_Init+0x50>)
 80007a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007a6:	4b10      	ldr	r3, [pc, #64]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0b      	ldr	r3, [pc, #44]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b09      	ldr	r3, [pc, #36]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d2:	4805      	ldr	r0, [pc, #20]	@ (80007e8 <MX_USART2_UART_Init+0x4c>)
 80007d4:	f001 f8ee 	bl	80019b4 <HAL_UART_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007de:	f000 f87d 	bl	80008dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000002c 	.word	0x2000002c
 80007ec:	40004400 	.word	0x40004400

080007f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08a      	sub	sp, #40	@ 0x28
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0314 	add.w	r3, r7, #20
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	613b      	str	r3, [r7, #16]
 800080a:	4b2d      	ldr	r3, [pc, #180]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a2c      	ldr	r2, [pc, #176]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000810:	f043 0304 	orr.w	r3, r3, #4
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0304 	and.w	r3, r3, #4
 800081e:	613b      	str	r3, [r7, #16]
 8000820:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a25      	ldr	r2, [pc, #148]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 800082c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b23      	ldr	r3, [pc, #140]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	60bb      	str	r3, [r7, #8]
 8000842:	4b1f      	ldr	r3, [pc, #124]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	4a1e      	ldr	r2, [pc, #120]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	6313      	str	r3, [r2, #48]	@ 0x30
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
 800085e:	4b18      	ldr	r3, [pc, #96]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	4a17      	ldr	r2, [pc, #92]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 8000864:	f043 0302 	orr.w	r3, r3, #2
 8000868:	6313      	str	r3, [r2, #48]	@ 0x30
 800086a:	4b15      	ldr	r3, [pc, #84]	@ (80008c0 <MX_GPIO_Init+0xd0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	f003 0302 	and.w	r3, r3, #2
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2120      	movs	r1, #32
 800087a:	4812      	ldr	r0, [pc, #72]	@ (80008c4 <MX_GPIO_Init+0xd4>)
 800087c:	f000 fbe8 	bl	8001050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000886:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	4619      	mov	r1, r3
 8000896:	480c      	ldr	r0, [pc, #48]	@ (80008c8 <MX_GPIO_Init+0xd8>)
 8000898:	f000 fa56 	bl	8000d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800089c:	2320      	movs	r3, #32
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 0314 	add.w	r3, r7, #20
 80008b0:	4619      	mov	r1, r3
 80008b2:	4804      	ldr	r0, [pc, #16]	@ (80008c4 <MX_GPIO_Init+0xd4>)
 80008b4:	f000 fa48 	bl	8000d48 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008b8:	bf00      	nop
 80008ba:	3728      	adds	r7, #40	@ 0x28
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020800 	.word	0x40020800

080008cc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d4:	2001      	movs	r0, #1
 80008d6:	f001 fd89 	bl	80023ec <osDelay>
 80008da:	e7fb      	b.n	80008d4 <StartDefaultTask+0x8>

080008dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e0:	b672      	cpsid	i
}
 80008e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e4:	bf00      	nop
 80008e6:	e7fd      	b.n	80008e4 <Error_Handler+0x8>

080008e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <HAL_MspInit+0x54>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008f6:	4a11      	ldr	r2, [pc, #68]	@ (800093c <HAL_MspInit+0x54>)
 80008f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80008fe:	4b0f      	ldr	r3, [pc, #60]	@ (800093c <HAL_MspInit+0x54>)
 8000900:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000902:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	603b      	str	r3, [r7, #0]
 800090e:	4b0b      	ldr	r3, [pc, #44]	@ (800093c <HAL_MspInit+0x54>)
 8000910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000912:	4a0a      	ldr	r2, [pc, #40]	@ (800093c <HAL_MspInit+0x54>)
 8000914:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000918:	6413      	str	r3, [r2, #64]	@ 0x40
 800091a:	4b08      	ldr	r3, [pc, #32]	@ (800093c <HAL_MspInit+0x54>)
 800091c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000922:	603b      	str	r3, [r7, #0]
 8000924:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	210f      	movs	r1, #15
 800092a:	f06f 0001 	mvn.w	r0, #1
 800092e:	f000 f9e2 	bl	8000cf6 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40023800 	.word	0x40023800

08000940 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08a      	sub	sp, #40	@ 0x28
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000948:	f107 0314 	add.w	r3, r7, #20
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
 8000950:	605a      	str	r2, [r3, #4]
 8000952:	609a      	str	r2, [r3, #8]
 8000954:	60da      	str	r2, [r3, #12]
 8000956:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a19      	ldr	r2, [pc, #100]	@ (80009c4 <HAL_UART_MspInit+0x84>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d12b      	bne.n	80009ba <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	613b      	str	r3, [r7, #16]
 8000966:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a17      	ldr	r2, [pc, #92]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 800096c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
 8000972:	4b15      	ldr	r3, [pc, #84]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097a:	613b      	str	r3, [r7, #16]
 800097c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	4b11      	ldr	r3, [pc, #68]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	4a10      	ldr	r2, [pc, #64]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000988:	f043 0301 	orr.w	r3, r3, #1
 800098c:	6313      	str	r3, [r2, #48]	@ 0x30
 800098e:	4b0e      	ldr	r3, [pc, #56]	@ (80009c8 <HAL_UART_MspInit+0x88>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	f003 0301 	and.w	r3, r3, #1
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099a:	230c      	movs	r3, #12
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	2300      	movs	r3, #0
 80009a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009aa:	2307      	movs	r3, #7
 80009ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4805      	ldr	r0, [pc, #20]	@ (80009cc <HAL_UART_MspInit+0x8c>)
 80009b6:	f000 f9c7 	bl	8000d48 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009ba:	bf00      	nop
 80009bc:	3728      	adds	r7, #40	@ 0x28
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40023800 	.word	0x40023800
 80009cc:	40020000 	.word	0x40020000

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <NMI_Handler+0x4>

080009d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009dc:	bf00      	nop
 80009de:	e7fd      	b.n	80009dc <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	bf00      	nop
 80009e6:	e7fd      	b.n	80009e4 <MemManage_Handler+0x4>

080009e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ec:	bf00      	nop
 80009ee:	e7fd      	b.n	80009ec <BusFault_Handler+0x4>

080009f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f4:	bf00      	nop
 80009f6:	e7fd      	b.n	80009f4 <UsageFault_Handler+0x4>

080009f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f897 	bl	8000b3c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a0e:	f003 fc4f 	bl	80042b0 <xTaskGetSchedulerState>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d001      	beq.n	8000a1c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a18:	f004 fb46 	bl	80050a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a24:	4b06      	ldr	r3, [pc, #24]	@ (8000a40 <SystemInit+0x20>)
 8000a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2a:	4a05      	ldr	r2, [pc, #20]	@ (8000a40 <SystemInit+0x20>)
 8000a2c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a30:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop
 8000a40:	e000ed00 	.word	0xe000ed00

08000a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a48:	f7ff ffea 	bl	8000a20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a4c:	480c      	ldr	r0, [pc, #48]	@ (8000a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a50:	4a0d      	ldr	r2, [pc, #52]	@ (8000a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a54:	e002      	b.n	8000a5c <LoopCopyDataInit>

08000a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5a:	3304      	adds	r3, #4

08000a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a60:	d3f9      	bcc.n	8000a56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a62:	4a0a      	ldr	r2, [pc, #40]	@ (8000a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a64:	4c0a      	ldr	r4, [pc, #40]	@ (8000a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a68:	e001      	b.n	8000a6e <LoopFillZerobss>

08000a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a6c:	3204      	adds	r2, #4

08000a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a70:	d3fb      	bcc.n	8000a6a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f004 fda1 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a76:	f7ff fdc1 	bl	80005fc <main>
  bx  lr    
 8000a7a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a84:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000a88:	0800571c 	.word	0x0800571c
  ldr r2, =_sbss
 8000a8c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000a90:	200049d0 	.word	0x200049d0

08000a94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC_IRQHandler>
	...

08000a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000ad8 <HAL_Init+0x40>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a0d      	ldr	r2, [pc, #52]	@ (8000ad8 <HAL_Init+0x40>)
 8000aa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad8 <HAL_Init+0x40>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad8 <HAL_Init+0x40>)
 8000aae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ab2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <HAL_Init+0x40>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a07      	ldr	r2, [pc, #28]	@ (8000ad8 <HAL_Init+0x40>)
 8000aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000abe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ac0:	2003      	movs	r0, #3
 8000ac2:	f000 f90d 	bl	8000ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ac6:	200f      	movs	r0, #15
 8000ac8:	f000 f808 	bl	8000adc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000acc:	f7ff ff0c 	bl	80008e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ad0:	2300      	movs	r3, #0
}
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	40023c00 	.word	0x40023c00

08000adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae4:	4b12      	ldr	r3, [pc, #72]	@ (8000b30 <HAL_InitTick+0x54>)
 8000ae6:	681a      	ldr	r2, [r3, #0]
 8000ae8:	4b12      	ldr	r3, [pc, #72]	@ (8000b34 <HAL_InitTick+0x58>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	4619      	mov	r1, r3
 8000aee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000afa:	4618      	mov	r0, r3
 8000afc:	f000 f917 	bl	8000d2e <HAL_SYSTICK_Config>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e00e      	b.n	8000b28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	2b0f      	cmp	r3, #15
 8000b0e:	d80a      	bhi.n	8000b26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b10:	2200      	movs	r2, #0
 8000b12:	6879      	ldr	r1, [r7, #4]
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	f000 f8ed 	bl	8000cf6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b1c:	4a06      	ldr	r2, [pc, #24]	@ (8000b38 <HAL_InitTick+0x5c>)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	e000      	b.n	8000b28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	3708      	adds	r7, #8
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000000 	.word	0x20000000
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000004 	.word	0x20000004

08000b3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_IncTick+0x20>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	461a      	mov	r2, r3
 8000b46:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	4a04      	ldr	r2, [pc, #16]	@ (8000b60 <HAL_IncTick+0x24>)
 8000b4e:	6013      	str	r3, [r2, #0]
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	20000008 	.word	0x20000008
 8000b60:	2000007c 	.word	0x2000007c

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	2000007c 	.word	0x2000007c

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	6039      	str	r1, [r7, #0]
 8000bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db0a      	blt.n	8000c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	490c      	ldr	r1, [pc, #48]	@ (8000c2c <__NVIC_SetPriority+0x4c>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c08:	e00a      	b.n	8000c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	b2da      	uxtb	r2, r3
 8000c0e:	4908      	ldr	r1, [pc, #32]	@ (8000c30 <__NVIC_SetPriority+0x50>)
 8000c10:	79fb      	ldrb	r3, [r7, #7]
 8000c12:	f003 030f 	and.w	r3, r3, #15
 8000c16:	3b04      	subs	r3, #4
 8000c18:	0112      	lsls	r2, r2, #4
 8000c1a:	b2d2      	uxtb	r2, r2
 8000c1c:	440b      	add	r3, r1
 8000c1e:	761a      	strb	r2, [r3, #24]
}
 8000c20:	bf00      	nop
 8000c22:	370c      	adds	r7, #12
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b089      	sub	sp, #36	@ 0x24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	f003 0307 	and.w	r3, r3, #7
 8000c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f1c3 0307 	rsb	r3, r3, #7
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	bf28      	it	cs
 8000c52:	2304      	movcs	r3, #4
 8000c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	2b06      	cmp	r3, #6
 8000c5c:	d902      	bls.n	8000c64 <NVIC_EncodePriority+0x30>
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	3b03      	subs	r3, #3
 8000c62:	e000      	b.n	8000c66 <NVIC_EncodePriority+0x32>
 8000c64:	2300      	movs	r3, #0
 8000c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c68:	f04f 32ff 	mov.w	r2, #4294967295
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43da      	mvns	r2, r3
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	401a      	ands	r2, r3
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	fa01 f303 	lsl.w	r3, r1, r3
 8000c86:	43d9      	mvns	r1, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c8c:	4313      	orrs	r3, r2
         );
}
 8000c8e:	4618      	mov	r0, r3
 8000c90:	3724      	adds	r7, #36	@ 0x24
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
	...

08000c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000cac:	d301      	bcc.n	8000cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00f      	b.n	8000cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <SysTick_Config+0x40>)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	3b01      	subs	r3, #1
 8000cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cba:	210f      	movs	r1, #15
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f7ff ff8e 	bl	8000be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x40>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x40>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff47 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b086      	sub	sp, #24
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d04:	2300      	movs	r3, #0
 8000d06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d08:	f7ff ff5c 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	68b9      	ldr	r1, [r7, #8]
 8000d12:	6978      	ldr	r0, [r7, #20]
 8000d14:	f7ff ff8e 	bl	8000c34 <NVIC_EncodePriority>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1e:	4611      	mov	r1, r2
 8000d20:	4618      	mov	r0, r3
 8000d22:	f7ff ff5d 	bl	8000be0 <__NVIC_SetPriority>
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}

08000d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	b082      	sub	sp, #8
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d36:	6878      	ldr	r0, [r7, #4]
 8000d38:	f7ff ffb0 	bl	8000c9c <SysTick_Config>
 8000d3c:	4603      	mov	r3, r0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
	...

08000d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b089      	sub	sp, #36	@ 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
 8000d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d52:	2300      	movs	r3, #0
 8000d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e159      	b.n	8001018 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d64:	2201      	movs	r2, #1
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	697a      	ldr	r2, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f040 8148 	bne.w	8001012 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d005      	beq.n	8000d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	d130      	bne.n	8000dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	689b      	ldr	r3, [r3, #8]
 8000d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	2203      	movs	r2, #3
 8000da6:	fa02 f303 	lsl.w	r3, r2, r3
 8000daa:	43db      	mvns	r3, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4013      	ands	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	68da      	ldr	r2, [r3, #12]
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbe:	69ba      	ldr	r2, [r7, #24]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	69ba      	ldr	r2, [r7, #24]
 8000dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	43db      	mvns	r3, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4013      	ands	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	f003 0201 	and.w	r2, r3, #1
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0303 	and.w	r3, r3, #3
 8000e04:	2b03      	cmp	r3, #3
 8000e06:	d017      	beq.n	8000e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68db      	ldr	r3, [r3, #12]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	005b      	lsls	r3, r3, #1
 8000e12:	2203      	movs	r2, #3
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f003 0303 	and.w	r3, r3, #3
 8000e40:	2b02      	cmp	r3, #2
 8000e42:	d123      	bne.n	8000e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	08da      	lsrs	r2, r3, #3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3208      	adds	r2, #8
 8000e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	f003 0307 	and.w	r3, r3, #7
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	43db      	mvns	r3, r3
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	4013      	ands	r3, r2
 8000e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	691a      	ldr	r2, [r3, #16]
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	08da      	lsrs	r2, r3, #3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3208      	adds	r2, #8
 8000e86:	69b9      	ldr	r1, [r7, #24]
 8000e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0203 	and.w	r2, r3, #3
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	f000 80a2 	beq.w	8001012 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60fb      	str	r3, [r7, #12]
 8000ed2:	4b57      	ldr	r3, [pc, #348]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	4a56      	ldr	r2, [pc, #344]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ede:	4b54      	ldr	r3, [pc, #336]	@ (8001030 <HAL_GPIO_Init+0x2e8>)
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eea:	4a52      	ldr	r2, [pc, #328]	@ (8001034 <HAL_GPIO_Init+0x2ec>)
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	089b      	lsrs	r3, r3, #2
 8000ef0:	3302      	adds	r3, #2
 8000ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f003 0303 	and.w	r3, r3, #3
 8000efe:	009b      	lsls	r3, r3, #2
 8000f00:	220f      	movs	r2, #15
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43db      	mvns	r3, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a49      	ldr	r2, [pc, #292]	@ (8001038 <HAL_GPIO_Init+0x2f0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x202>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a48      	ldr	r2, [pc, #288]	@ (800103c <HAL_GPIO_Init+0x2f4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x1fe>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a47      	ldr	r2, [pc, #284]	@ (8001040 <HAL_GPIO_Init+0x2f8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x1fa>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a46      	ldr	r2, [pc, #280]	@ (8001044 <HAL_GPIO_Init+0x2fc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x1f6>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a45      	ldr	r2, [pc, #276]	@ (8001048 <HAL_GPIO_Init+0x300>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x1f2>
 8000f36:	2304      	movs	r3, #4
 8000f38:	e008      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e006      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f3e:	2303      	movs	r3, #3
 8000f40:	e004      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f42:	2302      	movs	r3, #2
 8000f44:	e002      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <HAL_GPIO_Init+0x204>
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	69fa      	ldr	r2, [r7, #28]
 8000f4e:	f002 0203 	and.w	r2, r2, #3
 8000f52:	0092      	lsls	r2, r2, #2
 8000f54:	4093      	lsls	r3, r2
 8000f56:	69ba      	ldr	r2, [r7, #24]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f5c:	4935      	ldr	r1, [pc, #212]	@ (8001034 <HAL_GPIO_Init+0x2ec>)
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	089b      	lsrs	r3, r3, #2
 8000f62:	3302      	adds	r3, #2
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f6a:	4b38      	ldr	r3, [pc, #224]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000f86:	69ba      	ldr	r2, [r7, #24]
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f8e:	4a2f      	ldr	r2, [pc, #188]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000f90:	69bb      	ldr	r3, [r7, #24]
 8000f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000f96:	68db      	ldr	r3, [r3, #12]
 8000f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fb8:	4a24      	ldr	r2, [pc, #144]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fbe:	4b23      	ldr	r3, [pc, #140]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fe2:	4a1a      	ldr	r2, [pc, #104]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fe8:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_GPIO_Init+0x304>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800100c:	4a0f      	ldr	r2, [pc, #60]	@ (800104c <HAL_GPIO_Init+0x304>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001012:	69fb      	ldr	r3, [r7, #28]
 8001014:	3301      	adds	r3, #1
 8001016:	61fb      	str	r3, [r7, #28]
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	2b0f      	cmp	r3, #15
 800101c:	f67f aea2 	bls.w	8000d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001020:	bf00      	nop
 8001022:	bf00      	nop
 8001024:	3724      	adds	r7, #36	@ 0x24
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	40023800 	.word	0x40023800
 8001034:	40013800 	.word	0x40013800
 8001038:	40020000 	.word	0x40020000
 800103c:	40020400 	.word	0x40020400
 8001040:	40020800 	.word	0x40020800
 8001044:	40020c00 	.word	0x40020c00
 8001048:	40021000 	.word	0x40021000
 800104c:	40013c00 	.word	0x40013c00

08001050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	460b      	mov	r3, r1
 800105a:	807b      	strh	r3, [r7, #2]
 800105c:	4613      	mov	r3, r2
 800105e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001060:	787b      	ldrb	r3, [r7, #1]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001066:	887a      	ldrh	r2, [r7, #2]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800106c:	e003      	b.n	8001076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800106e:	887b      	ldrh	r3, [r7, #2]
 8001070:	041a      	lsls	r2, r3, #16
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	619a      	str	r2, [r3, #24]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d101      	bne.n	8001096 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e267      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d075      	beq.n	800118e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010a2:	4b88      	ldr	r3, [pc, #544]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010a4:	689b      	ldr	r3, [r3, #8]
 80010a6:	f003 030c 	and.w	r3, r3, #12
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	d00c      	beq.n	80010c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ae:	4b85      	ldr	r3, [pc, #532]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80010b6:	2b08      	cmp	r3, #8
 80010b8:	d112      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010ba:	4b82      	ldr	r3, [pc, #520]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80010c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80010c6:	d10b      	bne.n	80010e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c8:	4b7e      	ldr	r3, [pc, #504]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d05b      	beq.n	800118c <HAL_RCC_OscConfig+0x108>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d157      	bne.n	800118c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e242      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80010e8:	d106      	bne.n	80010f8 <HAL_RCC_OscConfig+0x74>
 80010ea:	4b76      	ldr	r3, [pc, #472]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a75      	ldr	r2, [pc, #468]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	e01d      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001100:	d10c      	bne.n	800111c <HAL_RCC_OscConfig+0x98>
 8001102:	4b70      	ldr	r3, [pc, #448]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a6f      	ldr	r2, [pc, #444]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001108:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	4b6d      	ldr	r3, [pc, #436]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a6c      	ldr	r2, [pc, #432]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001118:	6013      	str	r3, [r2, #0]
 800111a:	e00b      	b.n	8001134 <HAL_RCC_OscConfig+0xb0>
 800111c:	4b69      	ldr	r3, [pc, #420]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a68      	ldr	r2, [pc, #416]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001122:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001126:	6013      	str	r3, [r2, #0]
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a65      	ldr	r2, [pc, #404]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 800112e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001132:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d013      	beq.n	8001164 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fd12 	bl	8000b64 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fd0e 	bl	8000b64 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	@ 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e207      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001156:	4b5b      	ldr	r3, [pc, #364]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d0f0      	beq.n	8001144 <HAL_RCC_OscConfig+0xc0>
 8001162:	e014      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fcfe 	bl	8000b64 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800116c:	f7ff fcfa 	bl	8000b64 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b64      	cmp	r3, #100	@ 0x64
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1f3      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800117e:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d1f0      	bne.n	800116c <HAL_RCC_OscConfig+0xe8>
 800118a:	e000      	b.n	800118e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800118c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d063      	beq.n	8001262 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800119a:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 030c 	and.w	r3, r3, #12
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d00b      	beq.n	80011be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011a6:	4b47      	ldr	r3, [pc, #284]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80011ae:	2b08      	cmp	r3, #8
 80011b0:	d11c      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80011b2:	4b44      	ldr	r3, [pc, #272]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011be:	4b41      	ldr	r3, [pc, #260]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d005      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d001      	beq.n	80011d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e1c7      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011d6:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4937      	ldr	r1, [pc, #220]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	e03a      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011f4:	4b34      	ldr	r3, [pc, #208]	@ (80012c8 <HAL_RCC_OscConfig+0x244>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011fa:	f7ff fcb3 	bl	8000b64 <HAL_GetTick>
 80011fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	e008      	b.n	8001214 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001202:	f7ff fcaf 	bl	8000b64 <HAL_GetTick>
 8001206:	4602      	mov	r2, r0
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d901      	bls.n	8001214 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	e1a8      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001214:	4b2b      	ldr	r3, [pc, #172]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f003 0302 	and.w	r3, r3, #2
 800121c:	2b00      	cmp	r3, #0
 800121e:	d0f0      	beq.n	8001202 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001220:	4b28      	ldr	r3, [pc, #160]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	00db      	lsls	r3, r3, #3
 800122e:	4925      	ldr	r1, [pc, #148]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001230:	4313      	orrs	r3, r2
 8001232:	600b      	str	r3, [r1, #0]
 8001234:	e015      	b.n	8001262 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001236:	4b24      	ldr	r3, [pc, #144]	@ (80012c8 <HAL_RCC_OscConfig+0x244>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123c:	f7ff fc92 	bl	8000b64 <HAL_GetTick>
 8001240:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	e008      	b.n	8001256 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001244:	f7ff fc8e 	bl	8000b64 <HAL_GetTick>
 8001248:	4602      	mov	r2, r0
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	1ad3      	subs	r3, r2, r3
 800124e:	2b02      	cmp	r3, #2
 8001250:	d901      	bls.n	8001256 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001252:	2303      	movs	r3, #3
 8001254:	e187      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001256:	4b1b      	ldr	r3, [pc, #108]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f0      	bne.n	8001244 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0308 	and.w	r3, r3, #8
 800126a:	2b00      	cmp	r3, #0
 800126c:	d036      	beq.n	80012dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d016      	beq.n	80012a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <HAL_RCC_OscConfig+0x248>)
 8001278:	2201      	movs	r2, #1
 800127a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800127c:	f7ff fc72 	bl	8000b64 <HAL_GetTick>
 8001280:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	e008      	b.n	8001296 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001284:	f7ff fc6e 	bl	8000b64 <HAL_GetTick>
 8001288:	4602      	mov	r2, r0
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	1ad3      	subs	r3, r2, r3
 800128e:	2b02      	cmp	r3, #2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e167      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <HAL_RCC_OscConfig+0x240>)
 8001298:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0f0      	beq.n	8001284 <HAL_RCC_OscConfig+0x200>
 80012a2:	e01b      	b.n	80012dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012a4:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <HAL_RCC_OscConfig+0x248>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012aa:	f7ff fc5b 	bl	8000b64 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b0:	e00e      	b.n	80012d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc57 	bl	8000b64 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d907      	bls.n	80012d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e150      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
 80012c4:	40023800 	.word	0x40023800
 80012c8:	42470000 	.word	0x42470000
 80012cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012d0:	4b88      	ldr	r3, [pc, #544]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80012d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80012d4:	f003 0302 	and.w	r3, r3, #2
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d1ea      	bne.n	80012b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	f000 8097 	beq.w	8001418 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012ea:	2300      	movs	r3, #0
 80012ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ee:	4b81      	ldr	r3, [pc, #516]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d10f      	bne.n	800131a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	4b7d      	ldr	r3, [pc, #500]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001302:	4a7c      	ldr	r2, [pc, #496]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001308:	6413      	str	r3, [r2, #64]	@ 0x40
 800130a:	4b7a      	ldr	r3, [pc, #488]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001312:	60bb      	str	r3, [r7, #8]
 8001314:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131a:	4b77      	ldr	r3, [pc, #476]	@ (80014f8 <HAL_RCC_OscConfig+0x474>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001322:	2b00      	cmp	r3, #0
 8001324:	d118      	bne.n	8001358 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001326:	4b74      	ldr	r3, [pc, #464]	@ (80014f8 <HAL_RCC_OscConfig+0x474>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a73      	ldr	r2, [pc, #460]	@ (80014f8 <HAL_RCC_OscConfig+0x474>)
 800132c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001330:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001332:	f7ff fc17 	bl	8000b64 <HAL_GetTick>
 8001336:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	e008      	b.n	800134c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800133a:	f7ff fc13 	bl	8000b64 <HAL_GetTick>
 800133e:	4602      	mov	r2, r0
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	2b02      	cmp	r3, #2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e10c      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800134c:	4b6a      	ldr	r3, [pc, #424]	@ (80014f8 <HAL_RCC_OscConfig+0x474>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f0      	beq.n	800133a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d106      	bne.n	800136e <HAL_RCC_OscConfig+0x2ea>
 8001360:	4b64      	ldr	r3, [pc, #400]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001364:	4a63      	ldr	r2, [pc, #396]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	@ 0x70
 800136c:	e01c      	b.n	80013a8 <HAL_RCC_OscConfig+0x324>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b05      	cmp	r3, #5
 8001374:	d10c      	bne.n	8001390 <HAL_RCC_OscConfig+0x30c>
 8001376:	4b5f      	ldr	r3, [pc, #380]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800137a:	4a5e      	ldr	r2, [pc, #376]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 800137c:	f043 0304 	orr.w	r3, r3, #4
 8001380:	6713      	str	r3, [r2, #112]	@ 0x70
 8001382:	4b5c      	ldr	r3, [pc, #368]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001384:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001386:	4a5b      	ldr	r2, [pc, #364]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6713      	str	r3, [r2, #112]	@ 0x70
 800138e:	e00b      	b.n	80013a8 <HAL_RCC_OscConfig+0x324>
 8001390:	4b58      	ldr	r3, [pc, #352]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001392:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001394:	4a57      	ldr	r2, [pc, #348]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001396:	f023 0301 	bic.w	r3, r3, #1
 800139a:	6713      	str	r3, [r2, #112]	@ 0x70
 800139c:	4b55      	ldr	r3, [pc, #340]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 800139e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013a0:	4a54      	ldr	r2, [pc, #336]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80013a2:	f023 0304 	bic.w	r3, r3, #4
 80013a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	689b      	ldr	r3, [r3, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d015      	beq.n	80013dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013b0:	f7ff fbd8 	bl	8000b64 <HAL_GetTick>
 80013b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	e00a      	b.n	80013ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b8:	f7ff fbd4 	bl	8000b64 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	693b      	ldr	r3, [r7, #16]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e0cb      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ce:	4b49      	ldr	r3, [pc, #292]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80013d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d0ee      	beq.n	80013b8 <HAL_RCC_OscConfig+0x334>
 80013da:	e014      	b.n	8001406 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013dc:	f7ff fbc2 	bl	8000b64 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e2:	e00a      	b.n	80013fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e4:	f7ff fbbe 	bl	8000b64 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e0b5      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013fa:	4b3e      	ldr	r3, [pc, #248]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80013fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1ee      	bne.n	80013e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001406:	7dfb      	ldrb	r3, [r7, #23]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800140c:	4b39      	ldr	r3, [pc, #228]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 800140e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001410:	4a38      	ldr	r2, [pc, #224]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001412:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001416:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	2b00      	cmp	r3, #0
 800141e:	f000 80a1 	beq.w	8001564 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001422:	4b34      	ldr	r3, [pc, #208]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f003 030c 	and.w	r3, r3, #12
 800142a:	2b08      	cmp	r3, #8
 800142c:	d05c      	beq.n	80014e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d141      	bne.n	80014ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <HAL_RCC_OscConfig+0x478>)
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fb92 	bl	8000b64 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001444:	f7ff fb8e 	bl	8000b64 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e087      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001456:	4b27      	ldr	r3, [pc, #156]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d1f0      	bne.n	8001444 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69da      	ldr	r2, [r3, #28]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	431a      	orrs	r2, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001478:	085b      	lsrs	r3, r3, #1
 800147a:	3b01      	subs	r3, #1
 800147c:	041b      	lsls	r3, r3, #16
 800147e:	431a      	orrs	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001484:	061b      	lsls	r3, r3, #24
 8001486:	491b      	ldr	r1, [pc, #108]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800148c:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x478>)
 800148e:	2201      	movs	r2, #1
 8001490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001492:	f7ff fb67 	bl	8000b64 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	e008      	b.n	80014ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800149a:	f7ff fb63 	bl	8000b64 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d901      	bls.n	80014ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e05c      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80014ac:	4b11      	ldr	r3, [pc, #68]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d0f0      	beq.n	800149a <HAL_RCC_OscConfig+0x416>
 80014b8:	e054      	b.n	8001564 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ba:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <HAL_RCC_OscConfig+0x478>)
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014c0:	f7ff fb50 	bl	8000b64 <HAL_GetTick>
 80014c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	e008      	b.n	80014da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014c8:	f7ff fb4c 	bl	8000b64 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	2b02      	cmp	r3, #2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e045      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014da:	4b06      	ldr	r3, [pc, #24]	@ (80014f4 <HAL_RCC_OscConfig+0x470>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d1f0      	bne.n	80014c8 <HAL_RCC_OscConfig+0x444>
 80014e6:	e03d      	b.n	8001564 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d107      	bne.n	8001500 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e038      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40007000 	.word	0x40007000
 80014fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001500:	4b1b      	ldr	r3, [pc, #108]	@ (8001570 <HAL_RCC_OscConfig+0x4ec>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	2b01      	cmp	r3, #1
 800150c:	d028      	beq.n	8001560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001518:	429a      	cmp	r2, r3
 800151a:	d121      	bne.n	8001560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001526:	429a      	cmp	r2, r3
 8001528:	d11a      	bne.n	8001560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001530:	4013      	ands	r3, r2
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001536:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001538:	4293      	cmp	r3, r2
 800153a:	d111      	bne.n	8001560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001546:	085b      	lsrs	r3, r3, #1
 8001548:	3b01      	subs	r3, #1
 800154a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800154c:	429a      	cmp	r2, r3
 800154e:	d107      	bne.n	8001560 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800155a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800155c:	429a      	cmp	r2, r3
 800155e:	d001      	beq.n	8001564 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e000      	b.n	8001566 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0307 	and.w	r3, r3, #7
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fa7e 	bl	8000b64 <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff fa7a 	bl	8000b64 <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0307 	and.w	r3, r3, #7
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff f9de 	bl	8000adc <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	080056f4 	.word	0x080056f4
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001744:	b094      	sub	sp, #80	@ 0x50
 8001746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001758:	4b79      	ldr	r3, [pc, #484]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 030c 	and.w	r3, r3, #12
 8001760:	2b08      	cmp	r3, #8
 8001762:	d00d      	beq.n	8001780 <HAL_RCC_GetSysClockFreq+0x40>
 8001764:	2b08      	cmp	r3, #8
 8001766:	f200 80e1 	bhi.w	800192c <HAL_RCC_GetSysClockFreq+0x1ec>
 800176a:	2b00      	cmp	r3, #0
 800176c:	d002      	beq.n	8001774 <HAL_RCC_GetSysClockFreq+0x34>
 800176e:	2b04      	cmp	r3, #4
 8001770:	d003      	beq.n	800177a <HAL_RCC_GetSysClockFreq+0x3a>
 8001772:	e0db      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001774:	4b73      	ldr	r3, [pc, #460]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x204>)
 8001776:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001778:	e0db      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800177a:	4b73      	ldr	r3, [pc, #460]	@ (8001948 <HAL_RCC_GetSysClockFreq+0x208>)
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800177e:	e0d8      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001780:	4b6f      	ldr	r3, [pc, #444]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001788:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800178a:	4b6d      	ldr	r3, [pc, #436]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d063      	beq.n	800185e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001796:	4b6a      	ldr	r3, [pc, #424]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	099b      	lsrs	r3, r3, #6
 800179c:	2200      	movs	r2, #0
 800179e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017aa:	2300      	movs	r3, #0
 80017ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80017ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017b2:	4622      	mov	r2, r4
 80017b4:	462b      	mov	r3, r5
 80017b6:	f04f 0000 	mov.w	r0, #0
 80017ba:	f04f 0100 	mov.w	r1, #0
 80017be:	0159      	lsls	r1, r3, #5
 80017c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017c4:	0150      	lsls	r0, r2, #5
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4621      	mov	r1, r4
 80017cc:	1a51      	subs	r1, r2, r1
 80017ce:	6139      	str	r1, [r7, #16]
 80017d0:	4629      	mov	r1, r5
 80017d2:	eb63 0301 	sbc.w	r3, r3, r1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	f04f 0300 	mov.w	r3, #0
 80017e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017e4:	4659      	mov	r1, fp
 80017e6:	018b      	lsls	r3, r1, #6
 80017e8:	4651      	mov	r1, sl
 80017ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ee:	4651      	mov	r1, sl
 80017f0:	018a      	lsls	r2, r1, #6
 80017f2:	4651      	mov	r1, sl
 80017f4:	ebb2 0801 	subs.w	r8, r2, r1
 80017f8:	4659      	mov	r1, fp
 80017fa:	eb63 0901 	sbc.w	r9, r3, r1
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800180a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800180e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001812:	4690      	mov	r8, r2
 8001814:	4699      	mov	r9, r3
 8001816:	4623      	mov	r3, r4
 8001818:	eb18 0303 	adds.w	r3, r8, r3
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	462b      	mov	r3, r5
 8001820:	eb49 0303 	adc.w	r3, r9, r3
 8001824:	60fb      	str	r3, [r7, #12]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001832:	4629      	mov	r1, r5
 8001834:	024b      	lsls	r3, r1, #9
 8001836:	4621      	mov	r1, r4
 8001838:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800183c:	4621      	mov	r1, r4
 800183e:	024a      	lsls	r2, r1, #9
 8001840:	4610      	mov	r0, r2
 8001842:	4619      	mov	r1, r3
 8001844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001846:	2200      	movs	r2, #0
 8001848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800184a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800184c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001850:	f7fe fcce 	bl	80001f0 <__aeabi_uldivmod>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4613      	mov	r3, r2
 800185a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800185c:	e058      	b.n	8001910 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800185e:	4b38      	ldr	r3, [pc, #224]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	099b      	lsrs	r3, r3, #6
 8001864:	2200      	movs	r2, #0
 8001866:	4618      	mov	r0, r3
 8001868:	4611      	mov	r1, r2
 800186a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800186e:	623b      	str	r3, [r7, #32]
 8001870:	2300      	movs	r3, #0
 8001872:	627b      	str	r3, [r7, #36]	@ 0x24
 8001874:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001878:	4642      	mov	r2, r8
 800187a:	464b      	mov	r3, r9
 800187c:	f04f 0000 	mov.w	r0, #0
 8001880:	f04f 0100 	mov.w	r1, #0
 8001884:	0159      	lsls	r1, r3, #5
 8001886:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800188a:	0150      	lsls	r0, r2, #5
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4641      	mov	r1, r8
 8001892:	ebb2 0a01 	subs.w	sl, r2, r1
 8001896:	4649      	mov	r1, r9
 8001898:	eb63 0b01 	sbc.w	fp, r3, r1
 800189c:	f04f 0200 	mov.w	r2, #0
 80018a0:	f04f 0300 	mov.w	r3, #0
 80018a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018b0:	ebb2 040a 	subs.w	r4, r2, sl
 80018b4:	eb63 050b 	sbc.w	r5, r3, fp
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	f04f 0300 	mov.w	r3, #0
 80018c0:	00eb      	lsls	r3, r5, #3
 80018c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018c6:	00e2      	lsls	r2, r4, #3
 80018c8:	4614      	mov	r4, r2
 80018ca:	461d      	mov	r5, r3
 80018cc:	4643      	mov	r3, r8
 80018ce:	18e3      	adds	r3, r4, r3
 80018d0:	603b      	str	r3, [r7, #0]
 80018d2:	464b      	mov	r3, r9
 80018d4:	eb45 0303 	adc.w	r3, r5, r3
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018e6:	4629      	mov	r1, r5
 80018e8:	028b      	lsls	r3, r1, #10
 80018ea:	4621      	mov	r1, r4
 80018ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018f0:	4621      	mov	r1, r4
 80018f2:	028a      	lsls	r2, r1, #10
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018fa:	2200      	movs	r2, #0
 80018fc:	61bb      	str	r3, [r7, #24]
 80018fe:	61fa      	str	r2, [r7, #28]
 8001900:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001904:	f7fe fc74 	bl	80001f0 <__aeabi_uldivmod>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4613      	mov	r3, r2
 800190e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_RCC_GetSysClockFreq+0x200>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	0c1b      	lsrs	r3, r3, #16
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	3301      	adds	r3, #1
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001920:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001922:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001924:	fbb2 f3f3 	udiv	r3, r2, r3
 8001928:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800192a:	e002      	b.n	8001932 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <HAL_RCC_GetSysClockFreq+0x204>)
 800192e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001930:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001934:	4618      	mov	r0, r3
 8001936:	3750      	adds	r7, #80	@ 0x50
 8001938:	46bd      	mov	sp, r7
 800193a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800193e:	bf00      	nop
 8001940:	40023800 	.word	0x40023800
 8001944:	00f42400 	.word	0x00f42400
 8001948:	007a1200 	.word	0x007a1200

0800194c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_RCC_GetHCLKFreq+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	20000000 	.word	0x20000000

08001964 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001968:	f7ff fff0 	bl	800194c <HAL_RCC_GetHCLKFreq>
 800196c:	4602      	mov	r2, r0
 800196e:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	0a9b      	lsrs	r3, r3, #10
 8001974:	f003 0307 	and.w	r3, r3, #7
 8001978:	4903      	ldr	r1, [pc, #12]	@ (8001988 <HAL_RCC_GetPCLK1Freq+0x24>)
 800197a:	5ccb      	ldrb	r3, [r1, r3]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001980:	4618      	mov	r0, r3
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	08005704 	.word	0x08005704

0800198c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001990:	f7ff ffdc 	bl	800194c <HAL_RCC_GetHCLKFreq>
 8001994:	4602      	mov	r2, r0
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	0b5b      	lsrs	r3, r3, #13
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	4903      	ldr	r1, [pc, #12]	@ (80019b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80019a2:	5ccb      	ldrb	r3, [r1, r3]
 80019a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	40023800 	.word	0x40023800
 80019b0:	08005704 	.word	0x08005704

080019b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e042      	b.n	8001a4c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d106      	bne.n	80019e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f7fe ffb0 	bl	8000940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2224      	movs	r2, #36	@ 0x24
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f973 	bl	8001ce4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	691a      	ldr	r2, [r3, #16]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001a0c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	695a      	ldr	r2, [r3, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001a1c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	68da      	ldr	r2, [r3, #12]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001a2c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2220      	movs	r2, #32
 8001a40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	@ 0x28
 8001a58:	af02      	add	r7, sp, #8
 8001a5a:	60f8      	str	r0, [r7, #12]
 8001a5c:	60b9      	str	r1, [r7, #8]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4613      	mov	r3, r2
 8001a62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b20      	cmp	r3, #32
 8001a72:	d175      	bne.n	8001b60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <HAL_UART_Transmit+0x2c>
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d101      	bne.n	8001a84 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e06e      	b.n	8001b62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2221      	movs	r2, #33	@ 0x21
 8001a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a92:	f7ff f867 	bl	8000b64 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001aac:	d108      	bne.n	8001ac0 <HAL_UART_Transmit+0x6c>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e003      	b.n	8001ac8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ac8:	e02e      	b.n	8001b28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2180      	movs	r1, #128	@ 0x80
 8001ad4:	68f8      	ldr	r0, [r7, #12]
 8001ad6:	f000 f848 	bl	8001b6a <UART_WaitOnFlagUntilTimeout>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e03a      	b.n	8001b62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10b      	bne.n	8001b0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	881b      	ldrh	r3, [r3, #0]
 8001af6:	461a      	mov	r2, r3
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001b00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	3302      	adds	r3, #2
 8001b06:	61bb      	str	r3, [r7, #24]
 8001b08:	e007      	b.n	8001b1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001b0a:	69fb      	ldr	r3, [r7, #28]
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	3b01      	subs	r3, #1
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d1cb      	bne.n	8001aca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	9300      	str	r3, [sp, #0]
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2140      	movs	r1, #64	@ 0x40
 8001b3c:	68f8      	ldr	r0, [r7, #12]
 8001b3e:	f000 f814 	bl	8001b6a <UART_WaitOnFlagUntilTimeout>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e006      	b.n	8001b62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2220      	movs	r2, #32
 8001b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3720      	adds	r7, #32
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b086      	sub	sp, #24
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	60f8      	str	r0, [r7, #12]
 8001b72:	60b9      	str	r1, [r7, #8]
 8001b74:	603b      	str	r3, [r7, #0]
 8001b76:	4613      	mov	r3, r2
 8001b78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b7a:	e03b      	b.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7c:	6a3b      	ldr	r3, [r7, #32]
 8001b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b82:	d037      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b84:	f7fe ffee 	bl	8000b64 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	6a3a      	ldr	r2, [r7, #32]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d302      	bcc.n	8001b9a <UART_WaitOnFlagUntilTimeout+0x30>
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d101      	bne.n	8001b9e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e03a      	b.n	8001c14 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d023      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b80      	cmp	r3, #128	@ 0x80
 8001bb0:	d020      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b40      	cmp	r3, #64	@ 0x40
 8001bb6:	d01d      	beq.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0308 	and.w	r3, r3, #8
 8001bc2:	2b08      	cmp	r3, #8
 8001bc4:	d116      	bne.n	8001bf4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	617b      	str	r3, [r7, #20]
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001bdc:	68f8      	ldr	r0, [r7, #12]
 8001bde:	f000 f81d 	bl	8001c1c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2208      	movs	r2, #8
 8001be6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e00f      	b.n	8001c14 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	68ba      	ldr	r2, [r7, #8]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	bf0c      	ite	eq
 8001c04:	2301      	moveq	r3, #1
 8001c06:	2300      	movne	r3, #0
 8001c08:	b2db      	uxtb	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	79fb      	ldrb	r3, [r7, #7]
 8001c0e:	429a      	cmp	r2, r3
 8001c10:	d0b4      	beq.n	8001b7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b095      	sub	sp, #84	@ 0x54
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	330c      	adds	r3, #12
 8001c2a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c2e:	e853 3f00 	ldrex	r3, [r3]
 8001c32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c36:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	330c      	adds	r3, #12
 8001c42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001c44:	643a      	str	r2, [r7, #64]	@ 0x40
 8001c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c48:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001c4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001c4c:	e841 2300 	strex	r3, r2, [r1]
 8001c50:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d1e5      	bne.n	8001c24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	3314      	adds	r3, #20
 8001c5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	e853 3f00 	ldrex	r3, [r3]
 8001c66:	61fb      	str	r3, [r7, #28]
   return(result);
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	3314      	adds	r3, #20
 8001c76:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001c78:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c80:	e841 2300 	strex	r3, r2, [r1]
 8001c84:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d1e5      	bne.n	8001c58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d119      	bne.n	8001cc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	330c      	adds	r3, #12
 8001c9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	e853 3f00 	ldrex	r3, [r3]
 8001ca2:	60bb      	str	r3, [r7, #8]
   return(result);
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	f023 0310 	bic.w	r3, r3, #16
 8001caa:	647b      	str	r3, [r7, #68]	@ 0x44
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001cb4:	61ba      	str	r2, [r7, #24]
 8001cb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cb8:	6979      	ldr	r1, [r7, #20]
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	e841 2300 	strex	r3, r2, [r1]
 8001cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d1e5      	bne.n	8001c94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2220      	movs	r2, #32
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001cd6:	bf00      	nop
 8001cd8:	3754      	adds	r7, #84	@ 0x54
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ce4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ce8:	b0c0      	sub	sp, #256	@ 0x100
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	691b      	ldr	r3, [r3, #16]
 8001cf8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d00:	68d9      	ldr	r1, [r3, #12]
 8001d02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	ea40 0301 	orr.w	r3, r0, r1
 8001d0c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d18:	691b      	ldr	r3, [r3, #16]
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d20:	695b      	ldr	r3, [r3, #20]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d28:	69db      	ldr	r3, [r3, #28]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001d3c:	f021 010c 	bic.w	r1, r1, #12
 8001d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001d4a:	430b      	orrs	r3, r1
 8001d4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d5e:	6999      	ldr	r1, [r3, #24]
 8001d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	ea40 0301 	orr.w	r3, r0, r1
 8001d6a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001d6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	4b8f      	ldr	r3, [pc, #572]	@ (8001fb0 <UART_SetConfig+0x2cc>)
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d005      	beq.n	8001d84 <UART_SetConfig+0xa0>
 8001d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	4b8d      	ldr	r3, [pc, #564]	@ (8001fb4 <UART_SetConfig+0x2d0>)
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d104      	bne.n	8001d8e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d84:	f7ff fe02 	bl	800198c <HAL_RCC_GetPCLK2Freq>
 8001d88:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001d8c:	e003      	b.n	8001d96 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001d8e:	f7ff fde9 	bl	8001964 <HAL_RCC_GetPCLK1Freq>
 8001d92:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001da0:	f040 810c 	bne.w	8001fbc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001da4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001dae:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001db2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001db6:	4622      	mov	r2, r4
 8001db8:	462b      	mov	r3, r5
 8001dba:	1891      	adds	r1, r2, r2
 8001dbc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001dbe:	415b      	adcs	r3, r3
 8001dc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dc2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	eb12 0801 	adds.w	r8, r2, r1
 8001dcc:	4629      	mov	r1, r5
 8001dce:	eb43 0901 	adc.w	r9, r3, r1
 8001dd2:	f04f 0200 	mov.w	r2, #0
 8001dd6:	f04f 0300 	mov.w	r3, #0
 8001dda:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001dde:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001de2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001de6:	4690      	mov	r8, r2
 8001de8:	4699      	mov	r9, r3
 8001dea:	4623      	mov	r3, r4
 8001dec:	eb18 0303 	adds.w	r3, r8, r3
 8001df0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001df4:	462b      	mov	r3, r5
 8001df6:	eb49 0303 	adc.w	r3, r9, r3
 8001dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001e0a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001e0e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001e12:	460b      	mov	r3, r1
 8001e14:	18db      	adds	r3, r3, r3
 8001e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8001e18:	4613      	mov	r3, r2
 8001e1a:	eb42 0303 	adc.w	r3, r2, r3
 8001e1e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001e20:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001e24:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001e28:	f7fe f9e2 	bl	80001f0 <__aeabi_uldivmod>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4b61      	ldr	r3, [pc, #388]	@ (8001fb8 <UART_SetConfig+0x2d4>)
 8001e32:	fba3 2302 	umull	r2, r3, r3, r2
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	011c      	lsls	r4, r3, #4
 8001e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001e44:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001e48:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001e4c:	4642      	mov	r2, r8
 8001e4e:	464b      	mov	r3, r9
 8001e50:	1891      	adds	r1, r2, r2
 8001e52:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001e54:	415b      	adcs	r3, r3
 8001e56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001e58:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001e5c:	4641      	mov	r1, r8
 8001e5e:	eb12 0a01 	adds.w	sl, r2, r1
 8001e62:	4649      	mov	r1, r9
 8001e64:	eb43 0b01 	adc.w	fp, r3, r1
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001e74:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001e78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001e7c:	4692      	mov	sl, r2
 8001e7e:	469b      	mov	fp, r3
 8001e80:	4643      	mov	r3, r8
 8001e82:	eb1a 0303 	adds.w	r3, sl, r3
 8001e86:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001e8a:	464b      	mov	r3, r9
 8001e8c:	eb4b 0303 	adc.w	r3, fp, r3
 8001e90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001ea0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001ea4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	18db      	adds	r3, r3, r3
 8001eac:	643b      	str	r3, [r7, #64]	@ 0x40
 8001eae:	4613      	mov	r3, r2
 8001eb0:	eb42 0303 	adc.w	r3, r2, r3
 8001eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eb6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001eba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001ebe:	f7fe f997 	bl	80001f0 <__aeabi_uldivmod>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4611      	mov	r1, r2
 8001ec8:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <UART_SetConfig+0x2d4>)
 8001eca:	fba3 2301 	umull	r2, r3, r3, r1
 8001ece:	095b      	lsrs	r3, r3, #5
 8001ed0:	2264      	movs	r2, #100	@ 0x64
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	1acb      	subs	r3, r1, r3
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001ede:	4b36      	ldr	r3, [pc, #216]	@ (8001fb8 <UART_SetConfig+0x2d4>)
 8001ee0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ee4:	095b      	lsrs	r3, r3, #5
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001eec:	441c      	add	r4, r3
 8001eee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001ef8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001efc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001f00:	4642      	mov	r2, r8
 8001f02:	464b      	mov	r3, r9
 8001f04:	1891      	adds	r1, r2, r2
 8001f06:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001f08:	415b      	adcs	r3, r3
 8001f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001f10:	4641      	mov	r1, r8
 8001f12:	1851      	adds	r1, r2, r1
 8001f14:	6339      	str	r1, [r7, #48]	@ 0x30
 8001f16:	4649      	mov	r1, r9
 8001f18:	414b      	adcs	r3, r1
 8001f1a:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	f04f 0300 	mov.w	r3, #0
 8001f24:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001f28:	4659      	mov	r1, fp
 8001f2a:	00cb      	lsls	r3, r1, #3
 8001f2c:	4651      	mov	r1, sl
 8001f2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001f32:	4651      	mov	r1, sl
 8001f34:	00ca      	lsls	r2, r1, #3
 8001f36:	4610      	mov	r0, r2
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	4642      	mov	r2, r8
 8001f3e:	189b      	adds	r3, r3, r2
 8001f40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001f44:	464b      	mov	r3, r9
 8001f46:	460a      	mov	r2, r1
 8001f48:	eb42 0303 	adc.w	r3, r2, r3
 8001f4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001f5c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001f60:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8001f64:	460b      	mov	r3, r1
 8001f66:	18db      	adds	r3, r3, r3
 8001f68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	eb42 0303 	adc.w	r3, r2, r3
 8001f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001f76:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8001f7a:	f7fe f939 	bl	80001f0 <__aeabi_uldivmod>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb8 <UART_SetConfig+0x2d4>)
 8001f84:	fba3 1302 	umull	r1, r3, r3, r2
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	2164      	movs	r1, #100	@ 0x64
 8001f8c:	fb01 f303 	mul.w	r3, r1, r3
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	3332      	adds	r3, #50	@ 0x32
 8001f96:	4a08      	ldr	r2, [pc, #32]	@ (8001fb8 <UART_SetConfig+0x2d4>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	095b      	lsrs	r3, r3, #5
 8001f9e:	f003 0207 	and.w	r2, r3, #7
 8001fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4422      	add	r2, r4
 8001faa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001fac:	e106      	b.n	80021bc <UART_SetConfig+0x4d8>
 8001fae:	bf00      	nop
 8001fb0:	40011000 	.word	0x40011000
 8001fb4:	40011400 	.word	0x40011400
 8001fb8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001fbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001fc6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001fca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001fce:	4642      	mov	r2, r8
 8001fd0:	464b      	mov	r3, r9
 8001fd2:	1891      	adds	r1, r2, r2
 8001fd4:	6239      	str	r1, [r7, #32]
 8001fd6:	415b      	adcs	r3, r3
 8001fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fde:	4641      	mov	r1, r8
 8001fe0:	1854      	adds	r4, r2, r1
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	eb43 0501 	adc.w	r5, r3, r1
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	00eb      	lsls	r3, r5, #3
 8001ff2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ff6:	00e2      	lsls	r2, r4, #3
 8001ff8:	4614      	mov	r4, r2
 8001ffa:	461d      	mov	r5, r3
 8001ffc:	4643      	mov	r3, r8
 8001ffe:	18e3      	adds	r3, r4, r3
 8002000:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002004:	464b      	mov	r3, r9
 8002006:	eb45 0303 	adc.w	r3, r5, r3
 800200a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2200      	movs	r2, #0
 8002016:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800201a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800201e:	f04f 0200 	mov.w	r2, #0
 8002022:	f04f 0300 	mov.w	r3, #0
 8002026:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800202a:	4629      	mov	r1, r5
 800202c:	008b      	lsls	r3, r1, #2
 800202e:	4621      	mov	r1, r4
 8002030:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002034:	4621      	mov	r1, r4
 8002036:	008a      	lsls	r2, r1, #2
 8002038:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800203c:	f7fe f8d8 	bl	80001f0 <__aeabi_uldivmod>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4b60      	ldr	r3, [pc, #384]	@ (80021c8 <UART_SetConfig+0x4e4>)
 8002046:	fba3 2302 	umull	r2, r3, r3, r2
 800204a:	095b      	lsrs	r3, r3, #5
 800204c:	011c      	lsls	r4, r3, #4
 800204e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002052:	2200      	movs	r2, #0
 8002054:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002058:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800205c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002060:	4642      	mov	r2, r8
 8002062:	464b      	mov	r3, r9
 8002064:	1891      	adds	r1, r2, r2
 8002066:	61b9      	str	r1, [r7, #24]
 8002068:	415b      	adcs	r3, r3
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002070:	4641      	mov	r1, r8
 8002072:	1851      	adds	r1, r2, r1
 8002074:	6139      	str	r1, [r7, #16]
 8002076:	4649      	mov	r1, r9
 8002078:	414b      	adcs	r3, r1
 800207a:	617b      	str	r3, [r7, #20]
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002088:	4659      	mov	r1, fp
 800208a:	00cb      	lsls	r3, r1, #3
 800208c:	4651      	mov	r1, sl
 800208e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002092:	4651      	mov	r1, sl
 8002094:	00ca      	lsls	r2, r1, #3
 8002096:	4610      	mov	r0, r2
 8002098:	4619      	mov	r1, r3
 800209a:	4603      	mov	r3, r0
 800209c:	4642      	mov	r2, r8
 800209e:	189b      	adds	r3, r3, r2
 80020a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80020a4:	464b      	mov	r3, r9
 80020a6:	460a      	mov	r2, r1
 80020a8:	eb42 0303 	adc.w	r3, r2, r3
 80020ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80020b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	2200      	movs	r2, #0
 80020b8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80020ba:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80020c8:	4649      	mov	r1, r9
 80020ca:	008b      	lsls	r3, r1, #2
 80020cc:	4641      	mov	r1, r8
 80020ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020d2:	4641      	mov	r1, r8
 80020d4:	008a      	lsls	r2, r1, #2
 80020d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80020da:	f7fe f889 	bl	80001f0 <__aeabi_uldivmod>
 80020de:	4602      	mov	r2, r0
 80020e0:	460b      	mov	r3, r1
 80020e2:	4611      	mov	r1, r2
 80020e4:	4b38      	ldr	r3, [pc, #224]	@ (80021c8 <UART_SetConfig+0x4e4>)
 80020e6:	fba3 2301 	umull	r2, r3, r3, r1
 80020ea:	095b      	lsrs	r3, r3, #5
 80020ec:	2264      	movs	r2, #100	@ 0x64
 80020ee:	fb02 f303 	mul.w	r3, r2, r3
 80020f2:	1acb      	subs	r3, r1, r3
 80020f4:	011b      	lsls	r3, r3, #4
 80020f6:	3332      	adds	r3, #50	@ 0x32
 80020f8:	4a33      	ldr	r2, [pc, #204]	@ (80021c8 <UART_SetConfig+0x4e4>)
 80020fa:	fba2 2303 	umull	r2, r3, r2, r3
 80020fe:	095b      	lsrs	r3, r3, #5
 8002100:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002104:	441c      	add	r4, r3
 8002106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800210a:	2200      	movs	r2, #0
 800210c:	673b      	str	r3, [r7, #112]	@ 0x70
 800210e:	677a      	str	r2, [r7, #116]	@ 0x74
 8002110:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002114:	4642      	mov	r2, r8
 8002116:	464b      	mov	r3, r9
 8002118:	1891      	adds	r1, r2, r2
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	415b      	adcs	r3, r3
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002124:	4641      	mov	r1, r8
 8002126:	1851      	adds	r1, r2, r1
 8002128:	6039      	str	r1, [r7, #0]
 800212a:	4649      	mov	r1, r9
 800212c:	414b      	adcs	r3, r1
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800213c:	4659      	mov	r1, fp
 800213e:	00cb      	lsls	r3, r1, #3
 8002140:	4651      	mov	r1, sl
 8002142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002146:	4651      	mov	r1, sl
 8002148:	00ca      	lsls	r2, r1, #3
 800214a:	4610      	mov	r0, r2
 800214c:	4619      	mov	r1, r3
 800214e:	4603      	mov	r3, r0
 8002150:	4642      	mov	r2, r8
 8002152:	189b      	adds	r3, r3, r2
 8002154:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002156:	464b      	mov	r3, r9
 8002158:	460a      	mov	r2, r1
 800215a:	eb42 0303 	adc.w	r3, r2, r3
 800215e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2200      	movs	r2, #0
 8002168:	663b      	str	r3, [r7, #96]	@ 0x60
 800216a:	667a      	str	r2, [r7, #100]	@ 0x64
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002178:	4649      	mov	r1, r9
 800217a:	008b      	lsls	r3, r1, #2
 800217c:	4641      	mov	r1, r8
 800217e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002182:	4641      	mov	r1, r8
 8002184:	008a      	lsls	r2, r1, #2
 8002186:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800218a:	f7fe f831 	bl	80001f0 <__aeabi_uldivmod>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4b0d      	ldr	r3, [pc, #52]	@ (80021c8 <UART_SetConfig+0x4e4>)
 8002194:	fba3 1302 	umull	r1, r3, r3, r2
 8002198:	095b      	lsrs	r3, r3, #5
 800219a:	2164      	movs	r1, #100	@ 0x64
 800219c:	fb01 f303 	mul.w	r3, r1, r3
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	011b      	lsls	r3, r3, #4
 80021a4:	3332      	adds	r3, #50	@ 0x32
 80021a6:	4a08      	ldr	r2, [pc, #32]	@ (80021c8 <UART_SetConfig+0x4e4>)
 80021a8:	fba2 2303 	umull	r2, r3, r2, r3
 80021ac:	095b      	lsrs	r3, r3, #5
 80021ae:	f003 020f 	and.w	r2, r3, #15
 80021b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4422      	add	r2, r4
 80021ba:	609a      	str	r2, [r3, #8]
}
 80021bc:	bf00      	nop
 80021be:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80021c2:	46bd      	mov	sp, r7
 80021c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021c8:	51eb851f 	.word	0x51eb851f

080021cc <__NVIC_SetPriority>:
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	db0a      	blt.n	80021f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	490c      	ldr	r1, [pc, #48]	@ (8002218 <__NVIC_SetPriority+0x4c>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	0112      	lsls	r2, r2, #4
 80021ec:	b2d2      	uxtb	r2, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80021f4:	e00a      	b.n	800220c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	4908      	ldr	r1, [pc, #32]	@ (800221c <__NVIC_SetPriority+0x50>)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	f003 030f 	and.w	r3, r3, #15
 8002202:	3b04      	subs	r3, #4
 8002204:	0112      	lsls	r2, r2, #4
 8002206:	b2d2      	uxtb	r2, r2
 8002208:	440b      	add	r3, r1
 800220a:	761a      	strb	r2, [r3, #24]
}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000e100 	.word	0xe000e100
 800221c:	e000ed00 	.word	0xe000ed00

08002220 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002224:	2100      	movs	r1, #0
 8002226:	f06f 0004 	mvn.w	r0, #4
 800222a:	f7ff ffcf 	bl	80021cc <__NVIC_SetPriority>
#endif
}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
	...

08002234 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800223a:	f3ef 8305 	mrs	r3, IPSR
 800223e:	603b      	str	r3, [r7, #0]
  return(result);
 8002240:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002246:	f06f 0305 	mvn.w	r3, #5
 800224a:	607b      	str	r3, [r7, #4]
 800224c:	e00c      	b.n	8002268 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800224e:	4b0a      	ldr	r3, [pc, #40]	@ (8002278 <osKernelInitialize+0x44>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d105      	bne.n	8002262 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002256:	4b08      	ldr	r3, [pc, #32]	@ (8002278 <osKernelInitialize+0x44>)
 8002258:	2201      	movs	r2, #1
 800225a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	e002      	b.n	8002268 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
 8002266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8002268:	687b      	ldr	r3, [r7, #4]
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000080 	.word	0x20000080

0800227c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002282:	f3ef 8305 	mrs	r3, IPSR
 8002286:	603b      	str	r3, [r7, #0]
  return(result);
 8002288:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800228a:	2b00      	cmp	r3, #0
 800228c:	d003      	beq.n	8002296 <osKernelStart+0x1a>
    stat = osErrorISR;
 800228e:	f06f 0305 	mvn.w	r3, #5
 8002292:	607b      	str	r3, [r7, #4]
 8002294:	e010      	b.n	80022b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002296:	4b0b      	ldr	r3, [pc, #44]	@ (80022c4 <osKernelStart+0x48>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d109      	bne.n	80022b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800229e:	f7ff ffbf 	bl	8002220 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80022a2:	4b08      	ldr	r3, [pc, #32]	@ (80022c4 <osKernelStart+0x48>)
 80022a4:	2202      	movs	r2, #2
 80022a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80022a8:	f001 fba4 	bl	80039f4 <vTaskStartScheduler>
      stat = osOK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	607b      	str	r3, [r7, #4]
 80022b0:	e002      	b.n	80022b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80022b2:	f04f 33ff 	mov.w	r3, #4294967295
 80022b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80022b8:	687b      	ldr	r3, [r7, #4]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000080 	.word	0x20000080

080022c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b08e      	sub	sp, #56	@ 0x38
 80022cc:	af04      	add	r7, sp, #16
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022d8:	f3ef 8305 	mrs	r3, IPSR
 80022dc:	617b      	str	r3, [r7, #20]
  return(result);
 80022de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d17e      	bne.n	80023e2 <osThreadNew+0x11a>
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d07b      	beq.n	80023e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80022ea:	2380      	movs	r3, #128	@ 0x80
 80022ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80022ee:	2318      	movs	r3, #24
 80022f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80022f2:	2300      	movs	r3, #0
 80022f4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295
 80022fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d045      	beq.n	800238e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d002      	beq.n	8002310 <osThreadNew+0x48>
        name = attr->name;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	699b      	ldr	r3, [r3, #24]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d002      	beq.n	800231e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699b      	ldr	r3, [r3, #24]
 800231c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d008      	beq.n	8002336 <osThreadNew+0x6e>
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	2b38      	cmp	r3, #56	@ 0x38
 8002328:	d805      	bhi.n	8002336 <osThreadNew+0x6e>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <osThreadNew+0x72>
        return (NULL);
 8002336:	2300      	movs	r3, #0
 8002338:	e054      	b.n	80023e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	089b      	lsrs	r3, r3, #2
 8002348:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d00e      	beq.n	8002370 <osThreadNew+0xa8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b5b      	cmp	r3, #91	@ 0x5b
 8002358:	d90a      	bls.n	8002370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800235e:	2b00      	cmp	r3, #0
 8002360:	d006      	beq.n	8002370 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	695b      	ldr	r3, [r3, #20]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <osThreadNew+0xa8>
        mem = 1;
 800236a:	2301      	movs	r3, #1
 800236c:	61bb      	str	r3, [r7, #24]
 800236e:	e010      	b.n	8002392 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d10c      	bne.n	8002392 <osThreadNew+0xca>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d108      	bne.n	8002392 <osThreadNew+0xca>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d104      	bne.n	8002392 <osThreadNew+0xca>
          mem = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
 800238c:	e001      	b.n	8002392 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800238e:	2300      	movs	r3, #0
 8002390:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d110      	bne.n	80023ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80023a0:	9202      	str	r2, [sp, #8]
 80023a2:	9301      	str	r3, [sp, #4]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6a3a      	ldr	r2, [r7, #32]
 80023ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f001 f944 	bl	800363c <xTaskCreateStatic>
 80023b4:	4603      	mov	r3, r0
 80023b6:	613b      	str	r3, [r7, #16]
 80023b8:	e013      	b.n	80023e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d110      	bne.n	80023e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f107 0310 	add.w	r3, r7, #16
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023d2:	68f8      	ldr	r0, [r7, #12]
 80023d4:	f001 f992 	bl	80036fc <xTaskCreate>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d001      	beq.n	80023e2 <osThreadNew+0x11a>
            hTask = NULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80023e2:	693b      	ldr	r3, [r7, #16]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3728      	adds	r7, #40	@ 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f4:	f3ef 8305 	mrs	r3, IPSR
 80023f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80023fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <osDelay+0x1c>
    stat = osErrorISR;
 8002400:	f06f 0305 	mvn.w	r3, #5
 8002404:	60fb      	str	r3, [r7, #12]
 8002406:	e007      	b.n	8002418 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002408:	2300      	movs	r3, #0
 800240a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f001 fab8 	bl	8003988 <vTaskDelay>
    }
  }

  return (stat);
 8002418:	68fb      	ldr	r3, [r7, #12]
}
 800241a:	4618      	mov	r0, r3
 800241c:	3710      	adds	r7, #16
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8002422:	b580      	push	{r7, lr}
 8002424:	b088      	sub	sp, #32
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800242e:	f3ef 8305 	mrs	r3, IPSR
 8002432:	60bb      	str	r3, [r7, #8]
  return(result);
 8002434:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8002436:	2b00      	cmp	r3, #0
 8002438:	d174      	bne.n	8002524 <osMutexNew+0x102>
    if (attr != NULL) {
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <osMutexNew+0x26>
      type = attr->attr_bits;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	e001      	b.n	800244c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b00      	cmp	r3, #0
 8002454:	d002      	beq.n	800245c <osMutexNew+0x3a>
      rmtx = 1U;
 8002456:	2301      	movs	r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e001      	b.n	8002460 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d15c      	bne.n	8002524 <osMutexNew+0x102>
      mem = -1;
 800246a:	f04f 33ff 	mov.w	r3, #4294967295
 800246e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d015      	beq.n	80024a2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d006      	beq.n	800248c <osMutexNew+0x6a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	2b4f      	cmp	r3, #79	@ 0x4f
 8002484:	d902      	bls.n	800248c <osMutexNew+0x6a>
          mem = 1;
 8002486:	2301      	movs	r3, #1
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	e00c      	b.n	80024a6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d108      	bne.n	80024a6 <osMutexNew+0x84>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d104      	bne.n	80024a6 <osMutexNew+0x84>
            mem = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	613b      	str	r3, [r7, #16]
 80024a0:	e001      	b.n	80024a6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d112      	bne.n	80024d2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4619      	mov	r1, r3
 80024b8:	2004      	movs	r0, #4
 80024ba:	f000 fb20 	bl	8002afe <xQueueCreateMutexStatic>
 80024be:	61f8      	str	r0, [r7, #28]
 80024c0:	e016      	b.n	80024f0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	4619      	mov	r1, r3
 80024c8:	2001      	movs	r0, #1
 80024ca:	f000 fb18 	bl	8002afe <xQueueCreateMutexStatic>
 80024ce:	61f8      	str	r0, [r7, #28]
 80024d0:	e00e      	b.n	80024f0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d004      	beq.n	80024e8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80024de:	2004      	movs	r0, #4
 80024e0:	f000 faf5 	bl	8002ace <xQueueCreateMutex>
 80024e4:	61f8      	str	r0, [r7, #28]
 80024e6:	e003      	b.n	80024f0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80024e8:	2001      	movs	r0, #1
 80024ea:	f000 faf0 	bl	8002ace <xQueueCreateMutex>
 80024ee:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00c      	beq.n	8002510 <osMutexNew+0xee>
        if (attr != NULL) {
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <osMutexNew+0xe2>
          name = attr->name;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	e001      	b.n	8002508 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8002504:	2300      	movs	r3, #0
 8002506:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8002508:	68f9      	ldr	r1, [r7, #12]
 800250a:	69f8      	ldr	r0, [r7, #28]
 800250c:	f001 f838 	bl	8003580 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <osMutexNew+0x102>
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f043 0301 	orr.w	r3, r3, #1
 8002522:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8002524:	69fb      	ldr	r3, [r7, #28]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3720      	adds	r7, #32
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
 8002536:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f023 0301 	bic.w	r3, r3, #1
 800253e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8002548:	2300      	movs	r3, #0
 800254a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800254c:	f3ef 8305 	mrs	r3, IPSR
 8002550:	60bb      	str	r3, [r7, #8]
  return(result);
 8002552:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8002558:	f06f 0305 	mvn.w	r3, #5
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e02c      	b.n	80025ba <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d103      	bne.n	800256e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8002566:	f06f 0303 	mvn.w	r3, #3
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	e025      	b.n	80025ba <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d011      	beq.n	8002598 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8002574:	6839      	ldr	r1, [r7, #0]
 8002576:	6938      	ldr	r0, [r7, #16]
 8002578:	f000 fb11 	bl	8002b9e <xQueueTakeMutexRecursive>
 800257c:	4603      	mov	r3, r0
 800257e:	2b01      	cmp	r3, #1
 8002580:	d01b      	beq.n	80025ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8002588:	f06f 0301 	mvn.w	r3, #1
 800258c:	617b      	str	r3, [r7, #20]
 800258e:	e014      	b.n	80025ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8002590:	f06f 0302 	mvn.w	r3, #2
 8002594:	617b      	str	r3, [r7, #20]
 8002596:	e010      	b.n	80025ba <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8002598:	6839      	ldr	r1, [r7, #0]
 800259a:	6938      	ldr	r0, [r7, #16]
 800259c:	f000 fdb8 	bl	8003110 <xQueueSemaphoreTake>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b01      	cmp	r3, #1
 80025a4:	d009      	beq.n	80025ba <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80025ac:	f06f 0301 	mvn.w	r3, #1
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e002      	b.n	80025ba <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80025b4:	f06f 0302 	mvn.w	r3, #2
 80025b8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80025ba:	697b      	ldr	r3, [r7, #20]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3718      	adds	r7, #24
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}

080025c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80025dc:	2300      	movs	r3, #0
 80025de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025e0:	f3ef 8305 	mrs	r3, IPSR
 80025e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80025e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80025ec:	f06f 0305 	mvn.w	r3, #5
 80025f0:	617b      	str	r3, [r7, #20]
 80025f2:	e01f      	b.n	8002634 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d103      	bne.n	8002602 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80025fa:	f06f 0303 	mvn.w	r3, #3
 80025fe:	617b      	str	r3, [r7, #20]
 8002600:	e018      	b.n	8002634 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d009      	beq.n	800261c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8002608:	6938      	ldr	r0, [r7, #16]
 800260a:	f000 fa93 	bl	8002b34 <xQueueGiveMutexRecursive>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d00f      	beq.n	8002634 <osMutexRelease+0x70>
        stat = osErrorResource;
 8002614:	f06f 0302 	mvn.w	r3, #2
 8002618:	617b      	str	r3, [r7, #20]
 800261a:	e00b      	b.n	8002634 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800261c:	2300      	movs	r3, #0
 800261e:	2200      	movs	r2, #0
 8002620:	2100      	movs	r1, #0
 8002622:	6938      	ldr	r0, [r7, #16]
 8002624:	f000 faf2 	bl	8002c0c <xQueueGenericSend>
 8002628:	4603      	mov	r3, r0
 800262a:	2b01      	cmp	r3, #1
 800262c:	d002      	beq.n	8002634 <osMutexRelease+0x70>
        stat = osErrorResource;
 800262e:	f06f 0302 	mvn.w	r3, #2
 8002632:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002634:	697b      	ldr	r3, [r7, #20]
}
 8002636:	4618      	mov	r0, r3
 8002638:	3718      	adds	r7, #24
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
	...

08002640 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4a07      	ldr	r2, [pc, #28]	@ (800266c <vApplicationGetIdleTaskMemory+0x2c>)
 8002650:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	4a06      	ldr	r2, [pc, #24]	@ (8002670 <vApplicationGetIdleTaskMemory+0x30>)
 8002656:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	601a      	str	r2, [r3, #0]
}
 800265e:	bf00      	nop
 8002660:	3714      	adds	r7, #20
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000084 	.word	0x20000084
 8002670:	200000e0 	.word	0x200000e0

08002674 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a07      	ldr	r2, [pc, #28]	@ (80026a0 <vApplicationGetTimerTaskMemory+0x2c>)
 8002684:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	4a06      	ldr	r2, [pc, #24]	@ (80026a4 <vApplicationGetTimerTaskMemory+0x30>)
 800268a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002692:	601a      	str	r2, [r3, #0]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	200002e0 	.word	0x200002e0
 80026a4:	2000033c 	.word	0x2000033c

080026a8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f103 0208 	add.w	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f04f 32ff 	mov.w	r2, #4294967295
 80026c0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f103 0208 	add.w	r2, r3, #8
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f103 0208 	add.w	r2, r3, #8
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr

08002702 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002702:	b480      	push	{r7}
 8002704:	b085      	sub	sp, #20
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	1c5a      	adds	r2, r3, #1
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	601a      	str	r2, [r3, #0]
}
 800273e:	bf00      	nop
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800274a:	b480      	push	{r7}
 800274c:	b085      	sub	sp, #20
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002760:	d103      	bne.n	800276a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	e00c      	b.n	8002784 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	3308      	adds	r3, #8
 800276e:	60fb      	str	r3, [r7, #12]
 8002770:	e002      	b.n	8002778 <vListInsert+0x2e>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	429a      	cmp	r2, r3
 8002782:	d2f6      	bcs.n	8002772 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685a      	ldr	r2, [r3, #4]
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	601a      	str	r2, [r3, #0]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6892      	ldr	r2, [r2, #8]
 80027d2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	687a      	ldr	r2, [r7, #4]
 80027da:	6852      	ldr	r2, [r2, #4]
 80027dc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d103      	bne.n	80027f0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	1e5a      	subs	r2, r3, #1
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280e:	4770      	bx	lr

08002810 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002828:	f383 8811 	msr	BASEPRI, r3
 800282c:	f3bf 8f6f 	isb	sy
 8002830:	f3bf 8f4f 	dsb	sy
 8002834:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002836:	bf00      	nop
 8002838:	bf00      	nop
 800283a:	e7fd      	b.n	8002838 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800283c:	f002 fba4 	bl	8004f88 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	441a      	add	r2, r3
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2200      	movs	r2, #0
 800285a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800286c:	3b01      	subs	r3, #1
 800286e:	68f9      	ldr	r1, [r7, #12]
 8002870:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	441a      	add	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	22ff      	movs	r2, #255	@ 0xff
 8002880:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	22ff      	movs	r2, #255	@ 0xff
 8002888:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d114      	bne.n	80028bc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d01a      	beq.n	80028d0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	3310      	adds	r3, #16
 800289e:	4618      	mov	r0, r3
 80028a0:	f001 fb36 	bl	8003f10 <xTaskRemoveFromEventList>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d012      	beq.n	80028d0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028aa:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <xQueueGenericReset+0xd0>)
 80028ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80028b0:	601a      	str	r2, [r3, #0]
 80028b2:	f3bf 8f4f 	dsb	sy
 80028b6:	f3bf 8f6f 	isb	sy
 80028ba:	e009      	b.n	80028d0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	3310      	adds	r3, #16
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff fef1 	bl	80026a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	3324      	adds	r3, #36	@ 0x24
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff feec 	bl	80026a8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028d0:	f002 fb8c 	bl	8004fec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028d4:	2301      	movs	r3, #1
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000ed04 	.word	0xe000ed04

080028e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b08e      	sub	sp, #56	@ 0x38
 80028e8:	af02      	add	r7, sp, #8
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
 80028f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10b      	bne.n	800292e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	e7fd      	b.n	800292a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <xQueueGenericCreateStatic+0x56>
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <xQueueGenericCreateStatic+0x5a>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <xQueueGenericCreateStatic+0x5c>
 800293e:	2300      	movs	r3, #0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d10b      	bne.n	800295c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002948:	f383 8811 	msr	BASEPRI, r3
 800294c:	f3bf 8f6f 	isb	sy
 8002950:	f3bf 8f4f 	dsb	sy
 8002954:	623b      	str	r3, [r7, #32]
}
 8002956:	bf00      	nop
 8002958:	bf00      	nop
 800295a:	e7fd      	b.n	8002958 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d102      	bne.n	8002968 <xQueueGenericCreateStatic+0x84>
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <xQueueGenericCreateStatic+0x88>
 8002968:	2301      	movs	r3, #1
 800296a:	e000      	b.n	800296e <xQueueGenericCreateStatic+0x8a>
 800296c:	2300      	movs	r3, #0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10b      	bne.n	800298a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	61fb      	str	r3, [r7, #28]
}
 8002984:	bf00      	nop
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800298a:	2350      	movs	r3, #80	@ 0x50
 800298c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b50      	cmp	r3, #80	@ 0x50
 8002992:	d00b      	beq.n	80029ac <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002998:	f383 8811 	msr	BASEPRI, r3
 800299c:	f3bf 8f6f 	isb	sy
 80029a0:	f3bf 8f4f 	dsb	sy
 80029a4:	61bb      	str	r3, [r7, #24]
}
 80029a6:	bf00      	nop
 80029a8:	bf00      	nop
 80029aa:	e7fd      	b.n	80029a8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029ac:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029c0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	4613      	mov	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	68b9      	ldr	r1, [r7, #8]
 80029ce:	68f8      	ldr	r0, [r7, #12]
 80029d0:	f000 f840 	bl	8002a54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3730      	adds	r7, #48	@ 0x30
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b08a      	sub	sp, #40	@ 0x28
 80029e2:	af02      	add	r7, sp, #8
 80029e4:	60f8      	str	r0, [r7, #12]
 80029e6:	60b9      	str	r1, [r7, #8]
 80029e8:	4613      	mov	r3, r2
 80029ea:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10b      	bne.n	8002a0a <xQueueGenericCreate+0x2c>
	__asm volatile
 80029f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	613b      	str	r3, [r7, #16]
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	e7fd      	b.n	8002a06 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	68ba      	ldr	r2, [r7, #8]
 8002a0e:	fb02 f303 	mul.w	r3, r2, r3
 8002a12:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	3350      	adds	r3, #80	@ 0x50
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fbd7 	bl	80051cc <pvPortMalloc>
 8002a1e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d011      	beq.n	8002a4a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	3350      	adds	r3, #80	@ 0x50
 8002a2e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a38:	79fa      	ldrb	r2, [r7, #7]
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	68b9      	ldr	r1, [r7, #8]
 8002a44:	68f8      	ldr	r0, [r7, #12]
 8002a46:	f000 f805 	bl	8002a54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3720      	adds	r7, #32
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b084      	sub	sp, #16
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d103      	bne.n	8002a70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	69ba      	ldr	r2, [r7, #24]
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e002      	b.n	8002a76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a76:	69bb      	ldr	r3, [r7, #24]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a7c:	69bb      	ldr	r3, [r7, #24]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a82:	2101      	movs	r1, #1
 8002a84:	69b8      	ldr	r0, [r7, #24]
 8002a86:	f7ff fec3 	bl	8002810 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00e      	beq.n	8002ac6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002aba:	2300      	movs	r3, #0
 8002abc:	2200      	movs	r2, #0
 8002abe:	2100      	movs	r1, #0
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8a3 	bl	8002c0c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	2300      	movs	r3, #0
 8002ade:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002ae0:	79fb      	ldrb	r3, [r7, #7]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	6978      	ldr	r0, [r7, #20]
 8002ae8:	f7ff ff79 	bl	80029de <xQueueGenericCreate>
 8002aec:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002aee:	68f8      	ldr	r0, [r7, #12]
 8002af0:	f7ff ffd3 	bl	8002a9a <prvInitialiseMutex>

		return xNewQueue;
 8002af4:	68fb      	ldr	r3, [r7, #12]
	}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b088      	sub	sp, #32
 8002b02:	af02      	add	r7, sp, #8
 8002b04:	4603      	mov	r3, r0
 8002b06:	6039      	str	r1, [r7, #0]
 8002b08:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	617b      	str	r3, [r7, #20]
 8002b0e:	2300      	movs	r3, #0
 8002b10:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002b12:	79fb      	ldrb	r3, [r7, #7]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6939      	ldr	r1, [r7, #16]
 8002b1c:	6978      	ldr	r0, [r7, #20]
 8002b1e:	f7ff fee1 	bl	80028e4 <xQueueGenericCreateStatic>
 8002b22:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	f7ff ffb8 	bl	8002a9a <prvInitialiseMutex>

		return xNewQueue;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
	}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3718      	adds	r7, #24
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10b      	bne.n	8002b5e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60fb      	str	r3, [r7, #12]
}
 8002b58:	bf00      	nop
 8002b5a:	bf00      	nop
 8002b5c:	e7fd      	b.n	8002b5a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	689c      	ldr	r4, [r3, #8]
 8002b62:	f001 fb95 	bl	8004290 <xTaskGetCurrentTaskHandle>
 8002b66:	4603      	mov	r3, r0
 8002b68:	429c      	cmp	r4, r3
 8002b6a:	d111      	bne.n	8002b90 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	1e5a      	subs	r2, r3, #1
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d105      	bne.n	8002b8a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8002b7e:	2300      	movs	r3, #0
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	6938      	ldr	r0, [r7, #16]
 8002b86:	f000 f841 	bl	8002c0c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	617b      	str	r3, [r7, #20]
 8002b8e:	e001      	b.n	8002b94 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002b94:	697b      	ldr	r3, [r7, #20]
	}
 8002b96:	4618      	mov	r0, r3
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8002b9e:	b590      	push	{r4, r7, lr}
 8002ba0:	b087      	sub	sp, #28
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10b      	bne.n	8002bca <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8002bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb6:	f383 8811 	msr	BASEPRI, r3
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	f3bf 8f4f 	dsb	sy
 8002bc2:	60fb      	str	r3, [r7, #12]
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop
 8002bc8:	e7fd      	b.n	8002bc6 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	689c      	ldr	r4, [r3, #8]
 8002bce:	f001 fb5f 	bl	8004290 <xTaskGetCurrentTaskHandle>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	429c      	cmp	r4, r3
 8002bd6:	d107      	bne.n	8002be8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8002be2:	2301      	movs	r3, #1
 8002be4:	617b      	str	r3, [r7, #20]
 8002be6:	e00c      	b.n	8002c02 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002be8:	6839      	ldr	r1, [r7, #0]
 8002bea:	6938      	ldr	r0, [r7, #16]
 8002bec:	f000 fa90 	bl	8003110 <xQueueSemaphoreTake>
 8002bf0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d004      	beq.n	8002c02 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8002c02:	697b      	ldr	r3, [r7, #20]
	}
 8002c04:	4618      	mov	r0, r3
 8002c06:	371c      	adds	r7, #28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd90      	pop	{r4, r7, pc}

08002c0c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	@ 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10b      	bne.n	8002c40 <xQueueGenericSend+0x34>
	__asm volatile
 8002c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c3a:	bf00      	nop
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d103      	bne.n	8002c4e <xQueueGenericSend+0x42>
 8002c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <xQueueGenericSend+0x46>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <xQueueGenericSend+0x48>
 8002c52:	2300      	movs	r3, #0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <xQueueGenericSend+0x64>
	__asm volatile
 8002c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002c6a:	bf00      	nop
 8002c6c:	bf00      	nop
 8002c6e:	e7fd      	b.n	8002c6c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	2b02      	cmp	r3, #2
 8002c74:	d103      	bne.n	8002c7e <xQueueGenericSend+0x72>
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d101      	bne.n	8002c82 <xQueueGenericSend+0x76>
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <xQueueGenericSend+0x78>
 8002c82:	2300      	movs	r3, #0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10b      	bne.n	8002ca0 <xQueueGenericSend+0x94>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c8c:	f383 8811 	msr	BASEPRI, r3
 8002c90:	f3bf 8f6f 	isb	sy
 8002c94:	f3bf 8f4f 	dsb	sy
 8002c98:	623b      	str	r3, [r7, #32]
}
 8002c9a:	bf00      	nop
 8002c9c:	bf00      	nop
 8002c9e:	e7fd      	b.n	8002c9c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ca0:	f001 fb06 	bl	80042b0 <xTaskGetSchedulerState>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d102      	bne.n	8002cb0 <xQueueGenericSend+0xa4>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <xQueueGenericSend+0xa8>
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e000      	b.n	8002cb6 <xQueueGenericSend+0xaa>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d10b      	bne.n	8002cd2 <xQueueGenericSend+0xc6>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	61fb      	str	r3, [r7, #28]
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cd2:	f002 f959 	bl	8004f88 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d302      	bcc.n	8002ce8 <xQueueGenericSend+0xdc>
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d129      	bne.n	8002d3c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	68b9      	ldr	r1, [r7, #8]
 8002cec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002cee:	f000 fb37 	bl	8003360 <prvCopyDataToQueue>
 8002cf2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d010      	beq.n	8002d1e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfe:	3324      	adds	r3, #36	@ 0x24
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 f905 	bl	8003f10 <xTaskRemoveFromEventList>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d013      	beq.n	8002d34 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d0c:	4b3f      	ldr	r3, [pc, #252]	@ (8002e0c <xQueueGenericSend+0x200>)
 8002d0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d12:	601a      	str	r2, [r3, #0]
 8002d14:	f3bf 8f4f 	dsb	sy
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	e00a      	b.n	8002d34 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d007      	beq.n	8002d34 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d24:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <xQueueGenericSend+0x200>)
 8002d26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d34:	f002 f95a 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e063      	b.n	8002e04 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d103      	bne.n	8002d4a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d42:	f002 f953 	bl	8004fec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002d46:	2300      	movs	r3, #0
 8002d48:	e05c      	b.n	8002e04 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d106      	bne.n	8002d5e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d50:	f107 0314 	add.w	r3, r7, #20
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 f93f 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d5e:	f002 f945 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d62:	f000 feaf 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d66:	f002 f90f 	bl	8004f88 <vPortEnterCritical>
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d70:	b25b      	sxtb	r3, r3
 8002d72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d76:	d103      	bne.n	8002d80 <xQueueGenericSend+0x174>
 8002d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d86:	b25b      	sxtb	r3, r3
 8002d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d8c:	d103      	bne.n	8002d96 <xQueueGenericSend+0x18a>
 8002d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d96:	f002 f929 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d9a:	1d3a      	adds	r2, r7, #4
 8002d9c:	f107 0314 	add.w	r3, r7, #20
 8002da0:	4611      	mov	r1, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f001 f92e 	bl	8004004 <xTaskCheckForTimeOut>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d124      	bne.n	8002df8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002dae:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002db0:	f000 fbce 	bl	8003550 <prvIsQueueFull>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dbc:	3310      	adds	r3, #16
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	4611      	mov	r1, r2
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f001 f852 	bl	8003e6c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002dc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dca:	f000 fb59 	bl	8003480 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002dce:	f000 fe87 	bl	8003ae0 <xTaskResumeAll>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f47f af7c 	bne.w	8002cd2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <xQueueGenericSend+0x200>)
 8002ddc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	f3bf 8f4f 	dsb	sy
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	e772      	b.n	8002cd2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002dec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dee:	f000 fb47 	bl	8003480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002df2:	f000 fe75 	bl	8003ae0 <xTaskResumeAll>
 8002df6:	e76c      	b.n	8002cd2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002df8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002dfa:	f000 fb41 	bl	8003480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dfe:	f000 fe6f 	bl	8003ae0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3738      	adds	r7, #56	@ 0x38
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	e000ed04 	.word	0xe000ed04

08002e10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b090      	sub	sp, #64	@ 0x40
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	60b9      	str	r1, [r7, #8]
 8002e1a:	607a      	str	r2, [r7, #4]
 8002e1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d10b      	bne.n	8002e40 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e2c:	f383 8811 	msr	BASEPRI, r3
 8002e30:	f3bf 8f6f 	isb	sy
 8002e34:	f3bf 8f4f 	dsb	sy
 8002e38:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e3a:	bf00      	nop
 8002e3c:	bf00      	nop
 8002e3e:	e7fd      	b.n	8002e3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d103      	bne.n	8002e4e <xQueueGenericSendFromISR+0x3e>
 8002e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <xQueueGenericSendFromISR+0x42>
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e000      	b.n	8002e54 <xQueueGenericSendFromISR+0x44>
 8002e52:	2300      	movs	r3, #0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10b      	bne.n	8002e70 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002e58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e5c:	f383 8811 	msr	BASEPRI, r3
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	f3bf 8f4f 	dsb	sy
 8002e68:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e6a:	bf00      	nop
 8002e6c:	bf00      	nop
 8002e6e:	e7fd      	b.n	8002e6c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d103      	bne.n	8002e7e <xQueueGenericSendFromISR+0x6e>
 8002e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <xQueueGenericSendFromISR+0x72>
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e000      	b.n	8002e84 <xQueueGenericSendFromISR+0x74>
 8002e82:	2300      	movs	r3, #0
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d10b      	bne.n	8002ea0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e8c:	f383 8811 	msr	BASEPRI, r3
 8002e90:	f3bf 8f6f 	isb	sy
 8002e94:	f3bf 8f4f 	dsb	sy
 8002e98:	623b      	str	r3, [r7, #32]
}
 8002e9a:	bf00      	nop
 8002e9c:	bf00      	nop
 8002e9e:	e7fd      	b.n	8002e9c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ea0:	f002 f952 	bl	8005148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002ea4:	f3ef 8211 	mrs	r2, BASEPRI
 8002ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eac:	f383 8811 	msr	BASEPRI, r3
 8002eb0:	f3bf 8f6f 	isb	sy
 8002eb4:	f3bf 8f4f 	dsb	sy
 8002eb8:	61fa      	str	r2, [r7, #28]
 8002eba:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002ebc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ebe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ec6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d302      	bcc.n	8002ed2 <xQueueGenericSendFromISR+0xc2>
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d12f      	bne.n	8002f32 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ed4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ed8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002edc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ee2:	683a      	ldr	r2, [r7, #0]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002ee8:	f000 fa3a 	bl	8003360 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002eec:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef4:	d112      	bne.n	8002f1c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d016      	beq.n	8002f2c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002efe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f00:	3324      	adds	r3, #36	@ 0x24
 8002f02:	4618      	mov	r0, r3
 8002f04:	f001 f804 	bl	8003f10 <xTaskRemoveFromEventList>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d00e      	beq.n	8002f2c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d00b      	beq.n	8002f2c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	601a      	str	r2, [r3, #0]
 8002f1a:	e007      	b.n	8002f2c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002f20:	3301      	adds	r3, #1
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	b25a      	sxtb	r2, r3
 8002f26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002f30:	e001      	b.n	8002f36 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f38:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f40:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3740      	adds	r7, #64	@ 0x40
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b08c      	sub	sp, #48	@ 0x30
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10b      	bne.n	8002f7e <xQueueReceive+0x32>
	__asm volatile
 8002f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6a:	f383 8811 	msr	BASEPRI, r3
 8002f6e:	f3bf 8f6f 	isb	sy
 8002f72:	f3bf 8f4f 	dsb	sy
 8002f76:	623b      	str	r3, [r7, #32]
}
 8002f78:	bf00      	nop
 8002f7a:	bf00      	nop
 8002f7c:	e7fd      	b.n	8002f7a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d103      	bne.n	8002f8c <xQueueReceive+0x40>
 8002f84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d101      	bne.n	8002f90 <xQueueReceive+0x44>
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e000      	b.n	8002f92 <xQueueReceive+0x46>
 8002f90:	2300      	movs	r3, #0
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10b      	bne.n	8002fae <xQueueReceive+0x62>
	__asm volatile
 8002f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	61fb      	str	r3, [r7, #28]
}
 8002fa8:	bf00      	nop
 8002faa:	bf00      	nop
 8002fac:	e7fd      	b.n	8002faa <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fae:	f001 f97f 	bl	80042b0 <xTaskGetSchedulerState>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <xQueueReceive+0x72>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <xQueueReceive+0x76>
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e000      	b.n	8002fc4 <xQueueReceive+0x78>
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d10b      	bne.n	8002fe0 <xQueueReceive+0x94>
	__asm volatile
 8002fc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fcc:	f383 8811 	msr	BASEPRI, r3
 8002fd0:	f3bf 8f6f 	isb	sy
 8002fd4:	f3bf 8f4f 	dsb	sy
 8002fd8:	61bb      	str	r3, [r7, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	bf00      	nop
 8002fde:	e7fd      	b.n	8002fdc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002fe0:	f001 ffd2 	bl	8004f88 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fe8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d01f      	beq.n	8003030 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002ff0:	68b9      	ldr	r1, [r7, #8]
 8002ff2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ff4:	f000 fa1e 	bl	8003434 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffa:	1e5a      	subs	r2, r3, #1
 8002ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ffe:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003000:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00f      	beq.n	8003028 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003008:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800300a:	3310      	adds	r3, #16
 800300c:	4618      	mov	r0, r3
 800300e:	f000 ff7f 	bl	8003f10 <xTaskRemoveFromEventList>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d007      	beq.n	8003028 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003018:	4b3c      	ldr	r3, [pc, #240]	@ (800310c <xQueueReceive+0x1c0>)
 800301a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800301e:	601a      	str	r2, [r3, #0]
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003028:	f001 ffe0 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 800302c:	2301      	movs	r3, #1
 800302e:	e069      	b.n	8003104 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d103      	bne.n	800303e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003036:	f001 ffd9 	bl	8004fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800303a:	2300      	movs	r3, #0
 800303c:	e062      	b.n	8003104 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800303e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003040:	2b00      	cmp	r3, #0
 8003042:	d106      	bne.n	8003052 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003044:	f107 0310 	add.w	r3, r7, #16
 8003048:	4618      	mov	r0, r3
 800304a:	f000 ffc5 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800304e:	2301      	movs	r3, #1
 8003050:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003052:	f001 ffcb 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003056:	f000 fd35 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800305a:	f001 ff95 	bl	8004f88 <vPortEnterCritical>
 800305e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003060:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003064:	b25b      	sxtb	r3, r3
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d103      	bne.n	8003074 <xQueueReceive+0x128>
 800306c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800306e:	2200      	movs	r2, #0
 8003070:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003076:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800307a:	b25b      	sxtb	r3, r3
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d103      	bne.n	800308a <xQueueReceive+0x13e>
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800308a:	f001 ffaf 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800308e:	1d3a      	adds	r2, r7, #4
 8003090:	f107 0310 	add.w	r3, r7, #16
 8003094:	4611      	mov	r1, r2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 ffb4 	bl	8004004 <xTaskCheckForTimeOut>
 800309c:	4603      	mov	r3, r0
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d123      	bne.n	80030ea <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030a4:	f000 fa3e 	bl	8003524 <prvIsQueueEmpty>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d017      	beq.n	80030de <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80030ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b0:	3324      	adds	r3, #36	@ 0x24
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f000 fed8 	bl	8003e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80030bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030be:	f000 f9df 	bl	8003480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80030c2:	f000 fd0d 	bl	8003ae0 <xTaskResumeAll>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d189      	bne.n	8002fe0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80030cc:	4b0f      	ldr	r3, [pc, #60]	@ (800310c <xQueueReceive+0x1c0>)
 80030ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030d2:	601a      	str	r2, [r3, #0]
 80030d4:	f3bf 8f4f 	dsb	sy
 80030d8:	f3bf 8f6f 	isb	sy
 80030dc:	e780      	b.n	8002fe0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80030de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030e0:	f000 f9ce 	bl	8003480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80030e4:	f000 fcfc 	bl	8003ae0 <xTaskResumeAll>
 80030e8:	e77a      	b.n	8002fe0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80030ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030ec:	f000 f9c8 	bl	8003480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80030f0:	f000 fcf6 	bl	8003ae0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030f6:	f000 fa15 	bl	8003524 <prvIsQueueEmpty>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f43f af6f 	beq.w	8002fe0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003102:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003104:	4618      	mov	r0, r3
 8003106:	3730      	adds	r7, #48	@ 0x30
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	e000ed04 	.word	0xe000ed04

08003110 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	@ 0x38
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800311a:	2300      	movs	r3, #0
 800311c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003122:	2300      	movs	r3, #0
 8003124:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800312c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003130:	f383 8811 	msr	BASEPRI, r3
 8003134:	f3bf 8f6f 	isb	sy
 8003138:	f3bf 8f4f 	dsb	sy
 800313c:	623b      	str	r3, [r7, #32]
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	e7fd      	b.n	8003140 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00b      	beq.n	8003164 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800314c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003150:	f383 8811 	msr	BASEPRI, r3
 8003154:	f3bf 8f6f 	isb	sy
 8003158:	f3bf 8f4f 	dsb	sy
 800315c:	61fb      	str	r3, [r7, #28]
}
 800315e:	bf00      	nop
 8003160:	bf00      	nop
 8003162:	e7fd      	b.n	8003160 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003164:	f001 f8a4 	bl	80042b0 <xTaskGetSchedulerState>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <xQueueSemaphoreTake+0x64>
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <xQueueSemaphoreTake+0x68>
 8003174:	2301      	movs	r3, #1
 8003176:	e000      	b.n	800317a <xQueueSemaphoreTake+0x6a>
 8003178:	2300      	movs	r3, #0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	61bb      	str	r3, [r7, #24]
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003196:	f001 fef7 	bl	8004f88 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800319a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800319c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80031a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d024      	beq.n	80031f0 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a8:	1e5a      	subs	r2, r3, #1
 80031aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ac:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d104      	bne.n	80031c0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80031b6:	f001 f9f5 	bl	80045a4 <pvTaskIncrementMutexHeldCount>
 80031ba:	4602      	mov	r2, r0
 80031bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031be:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00f      	beq.n	80031e8 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031ca:	3310      	adds	r3, #16
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 fe9f 	bl	8003f10 <xTaskRemoveFromEventList>
 80031d2:	4603      	mov	r3, r0
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d007      	beq.n	80031e8 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80031d8:	4b54      	ldr	r3, [pc, #336]	@ (800332c <xQueueSemaphoreTake+0x21c>)
 80031da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80031e8:	f001 ff00 	bl	8004fec <vPortExitCritical>
				return pdPASS;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e098      	b.n	8003322 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d112      	bne.n	800321c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80031f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80031fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003200:	f383 8811 	msr	BASEPRI, r3
 8003204:	f3bf 8f6f 	isb	sy
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	617b      	str	r3, [r7, #20]
}
 800320e:	bf00      	nop
 8003210:	bf00      	nop
 8003212:	e7fd      	b.n	8003210 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003214:	f001 feea 	bl	8004fec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003218:	2300      	movs	r3, #0
 800321a:	e082      	b.n	8003322 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800321c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003222:	f107 030c 	add.w	r3, r7, #12
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fed6 	bl	8003fd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800322c:	2301      	movs	r3, #1
 800322e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003230:	f001 fedc 	bl	8004fec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003234:	f000 fc46 	bl	8003ac4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003238:	f001 fea6 	bl	8004f88 <vPortEnterCritical>
 800323c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800323e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003242:	b25b      	sxtb	r3, r3
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d103      	bne.n	8003252 <xQueueSemaphoreTake+0x142>
 800324a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800324c:	2200      	movs	r2, #0
 800324e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003252:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003254:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003258:	b25b      	sxtb	r3, r3
 800325a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325e:	d103      	bne.n	8003268 <xQueueSemaphoreTake+0x158>
 8003260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003268:	f001 fec0 	bl	8004fec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800326c:	463a      	mov	r2, r7
 800326e:	f107 030c 	add.w	r3, r7, #12
 8003272:	4611      	mov	r1, r2
 8003274:	4618      	mov	r0, r3
 8003276:	f000 fec5 	bl	8004004 <xTaskCheckForTimeOut>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d132      	bne.n	80032e6 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003280:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003282:	f000 f94f 	bl	8003524 <prvIsQueueEmpty>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d026      	beq.n	80032da <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800328c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d109      	bne.n	80032a8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8003294:	f001 fe78 	bl	8004f88 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4618      	mov	r0, r3
 800329e:	f001 f825 	bl	80042ec <xTaskPriorityInherit>
 80032a2:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80032a4:	f001 fea2 	bl	8004fec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032aa:	3324      	adds	r3, #36	@ 0x24
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fddb 	bl	8003e6c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032b6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032b8:	f000 f8e2 	bl	8003480 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032bc:	f000 fc10 	bl	8003ae0 <xTaskResumeAll>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f47f af67 	bne.w	8003196 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80032c8:	4b18      	ldr	r3, [pc, #96]	@ (800332c <xQueueSemaphoreTake+0x21c>)
 80032ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	f3bf 8f4f 	dsb	sy
 80032d4:	f3bf 8f6f 	isb	sy
 80032d8:	e75d      	b.n	8003196 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80032da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032dc:	f000 f8d0 	bl	8003480 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80032e0:	f000 fbfe 	bl	8003ae0 <xTaskResumeAll>
 80032e4:	e757      	b.n	8003196 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80032e6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032e8:	f000 f8ca 	bl	8003480 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80032ec:	f000 fbf8 	bl	8003ae0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032f0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80032f2:	f000 f917 	bl	8003524 <prvIsQueueEmpty>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	f43f af4c 	beq.w	8003196 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80032fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00d      	beq.n	8003320 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8003304:	f001 fe40 	bl	8004f88 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003308:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800330a:	f000 f811 	bl	8003330 <prvGetDisinheritPriorityAfterTimeout>
 800330e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003316:	4618      	mov	r0, r3
 8003318:	f001 f8c0 	bl	800449c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800331c:	f001 fe66 	bl	8004fec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003320:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003322:	4618      	mov	r0, r3
 8003324:	3738      	adds	r7, #56	@ 0x38
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	e000ed04 	.word	0xe000ed04

08003330 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800333c:	2b00      	cmp	r3, #0
 800333e:	d006      	beq.n	800334e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800334a:	60fb      	str	r3, [r7, #12]
 800334c:	e001      	b.n	8003352 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003352:	68fb      	ldr	r3, [r7, #12]
	}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b086      	sub	sp, #24
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003374:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337a:	2b00      	cmp	r3, #0
 800337c:	d10d      	bne.n	800339a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d14d      	bne.n	8003422 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4618      	mov	r0, r3
 800338c:	f001 f816 	bl	80043bc <xTaskPriorityDisinherit>
 8003390:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	609a      	str	r2, [r3, #8]
 8003398:	e043      	b.n	8003422 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d119      	bne.n	80033d4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6858      	ldr	r0, [r3, #4]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	461a      	mov	r2, r3
 80033aa:	68b9      	ldr	r1, [r7, #8]
 80033ac:	f002 f928 	bl	8005600 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	441a      	add	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d32b      	bcc.n	8003422 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	e026      	b.n	8003422 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68d8      	ldr	r0, [r3, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033dc:	461a      	mov	r2, r3
 80033de:	68b9      	ldr	r1, [r7, #8]
 80033e0:	f002 f90e 	bl	8005600 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	68da      	ldr	r2, [r3, #12]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ec:	425b      	negs	r3, r3
 80033ee:	441a      	add	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	68da      	ldr	r2, [r3, #12]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d207      	bcs.n	8003410 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689a      	ldr	r2, [r3, #8]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003408:	425b      	negs	r3, r3
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d105      	bne.n	8003422 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d002      	beq.n	8003422 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	3b01      	subs	r3, #1
 8003420:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1c5a      	adds	r2, r3, #1
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800342a:	697b      	ldr	r3, [r7, #20]
}
 800342c:	4618      	mov	r0, r3
 800342e:	3718      	adds	r7, #24
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
 800343c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003442:	2b00      	cmp	r3, #0
 8003444:	d018      	beq.n	8003478 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	68da      	ldr	r2, [r3, #12]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800344e:	441a      	add	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68da      	ldr	r2, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	429a      	cmp	r2, r3
 800345e:	d303      	bcc.n	8003468 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68d9      	ldr	r1, [r3, #12]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	461a      	mov	r2, r3
 8003472:	6838      	ldr	r0, [r7, #0]
 8003474:	f002 f8c4 	bl	8005600 <memcpy>
	}
}
 8003478:	bf00      	nop
 800347a:	3708      	adds	r7, #8
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003488:	f001 fd7e 	bl	8004f88 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003492:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003494:	e011      	b.n	80034ba <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d012      	beq.n	80034c4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3324      	adds	r3, #36	@ 0x24
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fd34 	bl	8003f10 <xTaskRemoveFromEventList>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034ae:	f000 fe0d 	bl	80040cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	dce9      	bgt.n	8003496 <prvUnlockQueue+0x16>
 80034c2:	e000      	b.n	80034c6 <prvUnlockQueue+0x46>
					break;
 80034c4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	22ff      	movs	r2, #255	@ 0xff
 80034ca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034ce:	f001 fd8d 	bl	8004fec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034d2:	f001 fd59 	bl	8004f88 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034dc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034de:	e011      	b.n	8003504 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d012      	beq.n	800350e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3310      	adds	r3, #16
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fd0f 	bl	8003f10 <xTaskRemoveFromEventList>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034f8:	f000 fde8 	bl	80040cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	3b01      	subs	r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003508:	2b00      	cmp	r3, #0
 800350a:	dce9      	bgt.n	80034e0 <prvUnlockQueue+0x60>
 800350c:	e000      	b.n	8003510 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800350e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	22ff      	movs	r2, #255	@ 0xff
 8003514:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003518:	f001 fd68 	bl	8004fec <vPortExitCritical>
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800352c:	f001 fd2c 	bl	8004f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003534:	2b00      	cmp	r3, #0
 8003536:	d102      	bne.n	800353e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003538:	2301      	movs	r3, #1
 800353a:	60fb      	str	r3, [r7, #12]
 800353c:	e001      	b.n	8003542 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800353e:	2300      	movs	r3, #0
 8003540:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003542:	f001 fd53 	bl	8004fec <vPortExitCritical>

	return xReturn;
 8003546:	68fb      	ldr	r3, [r7, #12]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	bd80      	pop	{r7, pc}

08003550 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003558:	f001 fd16 	bl	8004f88 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003564:	429a      	cmp	r2, r3
 8003566:	d102      	bne.n	800356e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	e001      	b.n	8003572 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003572:	f001 fd3b 	bl	8004fec <vPortExitCritical>

	return xReturn;
 8003576:	68fb      	ldr	r3, [r7, #12]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	e014      	b.n	80035ba <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003590:	4a0f      	ldr	r2, [pc, #60]	@ (80035d0 <vQueueAddToRegistry+0x50>)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d10b      	bne.n	80035b4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800359c:	490c      	ldr	r1, [pc, #48]	@ (80035d0 <vQueueAddToRegistry+0x50>)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035a6:	4a0a      	ldr	r2, [pc, #40]	@ (80035d0 <vQueueAddToRegistry+0x50>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035b2:	e006      	b.n	80035c2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	3301      	adds	r3, #1
 80035b8:	60fb      	str	r3, [r7, #12]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2b07      	cmp	r3, #7
 80035be:	d9e7      	bls.n	8003590 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	2000073c 	.word	0x2000073c

080035d4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	60f8      	str	r0, [r7, #12]
 80035dc:	60b9      	str	r1, [r7, #8]
 80035de:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035e4:	f001 fcd0 	bl	8004f88 <vPortEnterCritical>
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035ee:	b25b      	sxtb	r3, r3
 80035f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f4:	d103      	bne.n	80035fe <vQueueWaitForMessageRestricted+0x2a>
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003604:	b25b      	sxtb	r3, r3
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d103      	bne.n	8003614 <vQueueWaitForMessageRestricted+0x40>
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003614:	f001 fcea 	bl	8004fec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361c:	2b00      	cmp	r3, #0
 800361e:	d106      	bne.n	800362e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	3324      	adds	r3, #36	@ 0x24
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	68b9      	ldr	r1, [r7, #8]
 8003628:	4618      	mov	r0, r3
 800362a:	f000 fc45 	bl	8003eb8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7ff ff26 	bl	8003480 <prvUnlockQueue>
	}
 8003634:	bf00      	nop
 8003636:	3718      	adds	r7, #24
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	@ 0x38
 8003640:	af04      	add	r7, sp, #16
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
 8003648:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800364a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364c:	2b00      	cmp	r3, #0
 800364e:	d10b      	bne.n	8003668 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003654:	f383 8811 	msr	BASEPRI, r3
 8003658:	f3bf 8f6f 	isb	sy
 800365c:	f3bf 8f4f 	dsb	sy
 8003660:	623b      	str	r3, [r7, #32]
}
 8003662:	bf00      	nop
 8003664:	bf00      	nop
 8003666:	e7fd      	b.n	8003664 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003668:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <xTaskCreateStatic+0x4a>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	61fb      	str	r3, [r7, #28]
}
 8003680:	bf00      	nop
 8003682:	bf00      	nop
 8003684:	e7fd      	b.n	8003682 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003686:	235c      	movs	r3, #92	@ 0x5c
 8003688:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	2b5c      	cmp	r3, #92	@ 0x5c
 800368e:	d00b      	beq.n	80036a8 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	61bb      	str	r3, [r7, #24]
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036a8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d01e      	beq.n	80036ee <xTaskCreateStatic+0xb2>
 80036b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d01b      	beq.n	80036ee <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036b8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036be:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c2:	2202      	movs	r2, #2
 80036c4:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036c8:	2300      	movs	r3, #0
 80036ca:	9303      	str	r3, [sp, #12]
 80036cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ce:	9302      	str	r3, [sp, #8]
 80036d0:	f107 0314 	add.w	r3, r7, #20
 80036d4:	9301      	str	r3, [sp, #4]
 80036d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f000 f850 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036e6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036e8:	f000 f8de 	bl	80038a8 <prvAddNewTaskToReadyList>
 80036ec:	e001      	b.n	80036f2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036f2:	697b      	ldr	r3, [r7, #20]
	}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3728      	adds	r7, #40	@ 0x28
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}

080036fc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	@ 0x30
 8003700:	af04      	add	r7, sp, #16
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	603b      	str	r3, [r7, #0]
 8003708:	4613      	mov	r3, r2
 800370a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fd5b 	bl	80051cc <pvPortMalloc>
 8003716:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800371e:	205c      	movs	r0, #92	@ 0x5c
 8003720:	f001 fd54 	bl	80051cc <pvPortMalloc>
 8003724:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d003      	beq.n	8003734 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	631a      	str	r2, [r3, #48]	@ 0x30
 8003732:	e005      	b.n	8003740 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003734:	6978      	ldr	r0, [r7, #20]
 8003736:	f001 fe17 	bl	8005368 <vPortFree>
 800373a:	e001      	b.n	8003740 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800373c:	2300      	movs	r3, #0
 800373e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d017      	beq.n	8003776 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800374e:	88fa      	ldrh	r2, [r7, #6]
 8003750:	2300      	movs	r3, #0
 8003752:	9303      	str	r3, [sp, #12]
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	9302      	str	r3, [sp, #8]
 8003758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800375a:	9301      	str	r3, [sp, #4]
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f80e 	bl	8003786 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800376a:	69f8      	ldr	r0, [r7, #28]
 800376c:	f000 f89c 	bl	80038a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003770:	2301      	movs	r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e002      	b.n	800377c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800377c:	69bb      	ldr	r3, [r7, #24]
	}
 800377e:	4618      	mov	r0, r3
 8003780:	3720      	adds	r7, #32
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003786:	b580      	push	{r7, lr}
 8003788:	b088      	sub	sp, #32
 800378a:	af00      	add	r7, sp, #0
 800378c:	60f8      	str	r0, [r7, #12]
 800378e:	60b9      	str	r1, [r7, #8]
 8003790:	607a      	str	r2, [r7, #4]
 8003792:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003796:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	461a      	mov	r2, r3
 800379e:	21a5      	movs	r1, #165	@ 0xa5
 80037a0:	f001 ff02 	bl	80055a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ae:	3b01      	subs	r3, #1
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	f023 0307 	bic.w	r3, r3, #7
 80037bc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f003 0307 	and.w	r3, r3, #7
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00b      	beq.n	80037e0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037cc:	f383 8811 	msr	BASEPRI, r3
 80037d0:	f3bf 8f6f 	isb	sy
 80037d4:	f3bf 8f4f 	dsb	sy
 80037d8:	617b      	str	r3, [r7, #20]
}
 80037da:	bf00      	nop
 80037dc:	bf00      	nop
 80037de:	e7fd      	b.n	80037dc <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01f      	beq.n	8003826 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
 80037ea:	e012      	b.n	8003812 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	4413      	add	r3, r2
 80037f2:	7819      	ldrb	r1, [r3, #0]
 80037f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	4413      	add	r3, r2
 80037fa:	3334      	adds	r3, #52	@ 0x34
 80037fc:	460a      	mov	r2, r1
 80037fe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003800:	68ba      	ldr	r2, [r7, #8]
 8003802:	69fb      	ldr	r3, [r7, #28]
 8003804:	4413      	add	r3, r2
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d006      	beq.n	800381a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	3301      	adds	r3, #1
 8003810:	61fb      	str	r3, [r7, #28]
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	2b0f      	cmp	r3, #15
 8003816:	d9e9      	bls.n	80037ec <prvInitialiseNewTask+0x66>
 8003818:	e000      	b.n	800381c <prvInitialiseNewTask+0x96>
			{
				break;
 800381a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800381c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003824:	e003      	b.n	800382e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	2b37      	cmp	r3, #55	@ 0x37
 8003832:	d901      	bls.n	8003838 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003834:	2337      	movs	r3, #55	@ 0x37
 8003836:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800383c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800383e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003840:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003842:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	2200      	movs	r2, #0
 8003848:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800384a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384c:	3304      	adds	r3, #4
 800384e:	4618      	mov	r0, r3
 8003850:	f7fe ff4a 	bl	80026e8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003856:	3318      	adds	r3, #24
 8003858:	4618      	mov	r0, r3
 800385a:	f7fe ff45 	bl	80026e8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003862:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003866:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800386e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003870:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003872:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003876:	2200      	movs	r2, #0
 8003878:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800387a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	68f9      	ldr	r1, [r7, #12]
 8003886:	69b8      	ldr	r0, [r7, #24]
 8003888:	f001 fa4e 	bl	8004d28 <pxPortInitialiseStack>
 800388c:	4602      	mov	r2, r0
 800388e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003890:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003892:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003898:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800389a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800389c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800389e:	bf00      	nop
 80038a0:	3720      	adds	r7, #32
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038b0:	f001 fb6a 	bl	8004f88 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038b4:	4b2d      	ldr	r3, [pc, #180]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3301      	adds	r3, #1
 80038ba:	4a2c      	ldr	r2, [pc, #176]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038be:	4b2c      	ldr	r3, [pc, #176]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d109      	bne.n	80038da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038c6:	4a2a      	ldr	r2, [pc, #168]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038cc:	4b27      	ldr	r3, [pc, #156]	@ (800396c <prvAddNewTaskToReadyList+0xc4>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d110      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038d4:	f000 fc1e 	bl	8004114 <prvInitialiseTaskLists>
 80038d8:	e00d      	b.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038da:	4b26      	ldr	r3, [pc, #152]	@ (8003974 <prvAddNewTaskToReadyList+0xcc>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038e2:	4b23      	ldr	r3, [pc, #140]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d802      	bhi.n	80038f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80038f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80038f6:	4b20      	ldr	r3, [pc, #128]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3301      	adds	r3, #1
 80038fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 80038fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003900:	4b1d      	ldr	r3, [pc, #116]	@ (8003978 <prvAddNewTaskToReadyList+0xd0>)
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390c:	4b1b      	ldr	r3, [pc, #108]	@ (800397c <prvAddNewTaskToReadyList+0xd4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d903      	bls.n	800391c <prvAddNewTaskToReadyList+0x74>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003918:	4a18      	ldr	r2, [pc, #96]	@ (800397c <prvAddNewTaskToReadyList+0xd4>)
 800391a:	6013      	str	r3, [r2, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	009b      	lsls	r3, r3, #2
 8003928:	4a15      	ldr	r2, [pc, #84]	@ (8003980 <prvAddNewTaskToReadyList+0xd8>)
 800392a:	441a      	add	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4619      	mov	r1, r3
 8003932:	4610      	mov	r0, r2
 8003934:	f7fe fee5 	bl	8002702 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003938:	f001 fb58 	bl	8004fec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800393c:	4b0d      	ldr	r3, [pc, #52]	@ (8003974 <prvAddNewTaskToReadyList+0xcc>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00e      	beq.n	8003962 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003944:	4b0a      	ldr	r3, [pc, #40]	@ (8003970 <prvAddNewTaskToReadyList+0xc8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	429a      	cmp	r2, r3
 8003950:	d207      	bcs.n	8003962 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003952:	4b0c      	ldr	r3, [pc, #48]	@ (8003984 <prvAddNewTaskToReadyList+0xdc>)
 8003954:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	f3bf 8f4f 	dsb	sy
 800395e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	20000c50 	.word	0x20000c50
 8003970:	2000077c 	.word	0x2000077c
 8003974:	20000c5c 	.word	0x20000c5c
 8003978:	20000c6c 	.word	0x20000c6c
 800397c:	20000c58 	.word	0x20000c58
 8003980:	20000780 	.word	0x20000780
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003990:	2300      	movs	r3, #0
 8003992:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800399a:	4b14      	ldr	r3, [pc, #80]	@ (80039ec <vTaskDelay+0x64>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d00b      	beq.n	80039ba <vTaskDelay+0x32>
	__asm volatile
 80039a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a6:	f383 8811 	msr	BASEPRI, r3
 80039aa:	f3bf 8f6f 	isb	sy
 80039ae:	f3bf 8f4f 	dsb	sy
 80039b2:	60bb      	str	r3, [r7, #8]
}
 80039b4:	bf00      	nop
 80039b6:	bf00      	nop
 80039b8:	e7fd      	b.n	80039b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039ba:	f000 f883 	bl	8003ac4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039be:	2100      	movs	r1, #0
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 fe03 	bl	80045cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80039c6:	f000 f88b 	bl	8003ae0 <xTaskResumeAll>
 80039ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d107      	bne.n	80039e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80039d2:	4b07      	ldr	r3, [pc, #28]	@ (80039f0 <vTaskDelay+0x68>)
 80039d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80039e2:	bf00      	nop
 80039e4:	3710      	adds	r7, #16
 80039e6:	46bd      	mov	sp, r7
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000c78 	.word	0x20000c78
 80039f0:	e000ed04 	.word	0xe000ed04

080039f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b08a      	sub	sp, #40	@ 0x28
 80039f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80039fe:	2300      	movs	r3, #0
 8003a00:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a02:	463a      	mov	r2, r7
 8003a04:	1d39      	adds	r1, r7, #4
 8003a06:	f107 0308 	add.w	r3, r7, #8
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fe fe18 	bl	8002640 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a10:	6839      	ldr	r1, [r7, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68ba      	ldr	r2, [r7, #8]
 8003a16:	9202      	str	r2, [sp, #8]
 8003a18:	9301      	str	r3, [sp, #4]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	9300      	str	r3, [sp, #0]
 8003a1e:	2300      	movs	r3, #0
 8003a20:	460a      	mov	r2, r1
 8003a22:	4922      	ldr	r1, [pc, #136]	@ (8003aac <vTaskStartScheduler+0xb8>)
 8003a24:	4822      	ldr	r0, [pc, #136]	@ (8003ab0 <vTaskStartScheduler+0xbc>)
 8003a26:	f7ff fe09 	bl	800363c <xTaskCreateStatic>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	4a21      	ldr	r2, [pc, #132]	@ (8003ab4 <vTaskStartScheduler+0xc0>)
 8003a2e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a30:	4b20      	ldr	r3, [pc, #128]	@ (8003ab4 <vTaskStartScheduler+0xc0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d002      	beq.n	8003a3e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	e001      	b.n	8003a42 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d102      	bne.n	8003a4e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a48:	f000 fe14 	bl	8004674 <xTimerCreateTimerTask>
 8003a4c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d116      	bne.n	8003a82 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a58:	f383 8811 	msr	BASEPRI, r3
 8003a5c:	f3bf 8f6f 	isb	sy
 8003a60:	f3bf 8f4f 	dsb	sy
 8003a64:	613b      	str	r3, [r7, #16]
}
 8003a66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003a68:	4b13      	ldr	r3, [pc, #76]	@ (8003ab8 <vTaskStartScheduler+0xc4>)
 8003a6a:	f04f 32ff 	mov.w	r2, #4294967295
 8003a6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <vTaskStartScheduler+0xc8>)
 8003a72:	2201      	movs	r2, #1
 8003a74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a76:	4b12      	ldr	r3, [pc, #72]	@ (8003ac0 <vTaskStartScheduler+0xcc>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003a7c:	f001 f9e0 	bl	8004e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003a80:	e00f      	b.n	8003aa2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a88:	d10b      	bne.n	8003aa2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a8e:	f383 8811 	msr	BASEPRI, r3
 8003a92:	f3bf 8f6f 	isb	sy
 8003a96:	f3bf 8f4f 	dsb	sy
 8003a9a:	60fb      	str	r3, [r7, #12]
}
 8003a9c:	bf00      	nop
 8003a9e:	bf00      	nop
 8003aa0:	e7fd      	b.n	8003a9e <vTaskStartScheduler+0xaa>
}
 8003aa2:	bf00      	nop
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	080056b8 	.word	0x080056b8
 8003ab0:	080040e5 	.word	0x080040e5
 8003ab4:	20000c74 	.word	0x20000c74
 8003ab8:	20000c70 	.word	0x20000c70
 8003abc:	20000c5c 	.word	0x20000c5c
 8003ac0:	20000c54 	.word	0x20000c54

08003ac4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003ac8:	4b04      	ldr	r3, [pc, #16]	@ (8003adc <vTaskSuspendAll+0x18>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	3301      	adds	r3, #1
 8003ace:	4a03      	ldr	r2, [pc, #12]	@ (8003adc <vTaskSuspendAll+0x18>)
 8003ad0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003ad2:	bf00      	nop
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr
 8003adc:	20000c78 	.word	0x20000c78

08003ae0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003aea:	2300      	movs	r3, #0
 8003aec:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003aee:	4b42      	ldr	r3, [pc, #264]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d10b      	bne.n	8003b0e <xTaskResumeAll+0x2e>
	__asm volatile
 8003af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afa:	f383 8811 	msr	BASEPRI, r3
 8003afe:	f3bf 8f6f 	isb	sy
 8003b02:	f3bf 8f4f 	dsb	sy
 8003b06:	603b      	str	r3, [r7, #0]
}
 8003b08:	bf00      	nop
 8003b0a:	bf00      	nop
 8003b0c:	e7fd      	b.n	8003b0a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b0e:	f001 fa3b 	bl	8004f88 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b12:	4b39      	ldr	r3, [pc, #228]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	4a37      	ldr	r2, [pc, #220]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b1a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1c:	4b36      	ldr	r3, [pc, #216]	@ (8003bf8 <xTaskResumeAll+0x118>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d162      	bne.n	8003bea <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b24:	4b35      	ldr	r3, [pc, #212]	@ (8003bfc <xTaskResumeAll+0x11c>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d05e      	beq.n	8003bea <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b2c:	e02f      	b.n	8003b8e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b2e:	4b34      	ldr	r3, [pc, #208]	@ (8003c00 <xTaskResumeAll+0x120>)
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	3318      	adds	r3, #24
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe fe3e 	bl	80027bc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	3304      	adds	r3, #4
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fe39 	bl	80027bc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <xTaskResumeAll+0x124>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d903      	bls.n	8003b5e <xTaskResumeAll+0x7e>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c04 <xTaskResumeAll+0x124>)
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b62:	4613      	mov	r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	4a27      	ldr	r2, [pc, #156]	@ (8003c08 <xTaskResumeAll+0x128>)
 8003b6c:	441a      	add	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3304      	adds	r3, #4
 8003b72:	4619      	mov	r1, r3
 8003b74:	4610      	mov	r0, r2
 8003b76:	f7fe fdc4 	bl	8002702 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b7e:	4b23      	ldr	r3, [pc, #140]	@ (8003c0c <xTaskResumeAll+0x12c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d302      	bcc.n	8003b8e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003b88:	4b21      	ldr	r3, [pc, #132]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003c00 <xTaskResumeAll+0x120>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1cb      	bne.n	8003b2e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d001      	beq.n	8003ba0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003b9c:	f000 fb58 	bl	8004250 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c14 <xTaskResumeAll+0x134>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d010      	beq.n	8003bce <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bac:	f000 f846 	bl	8003c3c <xTaskIncrementTick>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003bb6:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d1f1      	bne.n	8003bac <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003bc8:	4b12      	ldr	r3, [pc, #72]	@ (8003c14 <xTaskResumeAll+0x134>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003bce:	4b10      	ldr	r3, [pc, #64]	@ (8003c10 <xTaskResumeAll+0x130>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003bda:	4b0f      	ldr	r3, [pc, #60]	@ (8003c18 <xTaskResumeAll+0x138>)
 8003bdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	f3bf 8f4f 	dsb	sy
 8003be6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bea:	f001 f9ff 	bl	8004fec <vPortExitCritical>

	return xAlreadyYielded;
 8003bee:	68bb      	ldr	r3, [r7, #8]
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	20000c78 	.word	0x20000c78
 8003bfc:	20000c50 	.word	0x20000c50
 8003c00:	20000c10 	.word	0x20000c10
 8003c04:	20000c58 	.word	0x20000c58
 8003c08:	20000780 	.word	0x20000780
 8003c0c:	2000077c 	.word	0x2000077c
 8003c10:	20000c64 	.word	0x20000c64
 8003c14:	20000c60 	.word	0x20000c60
 8003c18:	e000ed04 	.word	0xe000ed04

08003c1c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c22:	4b05      	ldr	r3, [pc, #20]	@ (8003c38 <xTaskGetTickCount+0x1c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000c54 	.word	0x20000c54

08003c3c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c42:	2300      	movs	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c46:	4b4f      	ldr	r3, [pc, #316]	@ (8003d84 <xTaskIncrementTick+0x148>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f040 8090 	bne.w	8003d70 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c50:	4b4d      	ldr	r3, [pc, #308]	@ (8003d88 <xTaskIncrementTick+0x14c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	3301      	adds	r3, #1
 8003c56:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c58:	4a4b      	ldr	r2, [pc, #300]	@ (8003d88 <xTaskIncrementTick+0x14c>)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d121      	bne.n	8003ca8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003c64:	4b49      	ldr	r3, [pc, #292]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d00b      	beq.n	8003c86 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003c6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c72:	f383 8811 	msr	BASEPRI, r3
 8003c76:	f3bf 8f6f 	isb	sy
 8003c7a:	f3bf 8f4f 	dsb	sy
 8003c7e:	603b      	str	r3, [r7, #0]
}
 8003c80:	bf00      	nop
 8003c82:	bf00      	nop
 8003c84:	e7fd      	b.n	8003c82 <xTaskIncrementTick+0x46>
 8003c86:	4b41      	ldr	r3, [pc, #260]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	4b40      	ldr	r3, [pc, #256]	@ (8003d90 <xTaskIncrementTick+0x154>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a3e      	ldr	r2, [pc, #248]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003c92:	6013      	str	r3, [r2, #0]
 8003c94:	4a3e      	ldr	r2, [pc, #248]	@ (8003d90 <xTaskIncrementTick+0x154>)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d94 <xTaskIncrementTick+0x158>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3301      	adds	r3, #1
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	@ (8003d94 <xTaskIncrementTick+0x158>)
 8003ca2:	6013      	str	r3, [r2, #0]
 8003ca4:	f000 fad4 	bl	8004250 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ca8:	4b3b      	ldr	r3, [pc, #236]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d349      	bcc.n	8003d46 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cb2:	4b36      	ldr	r3, [pc, #216]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d104      	bne.n	8003cc6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cbc:	4b36      	ldr	r3, [pc, #216]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc2:	601a      	str	r2, [r3, #0]
					break;
 8003cc4:	e03f      	b.n	8003d46 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cc6:	4b31      	ldr	r3, [pc, #196]	@ (8003d8c <xTaskIncrementTick+0x150>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d203      	bcs.n	8003ce6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003cde:	4a2e      	ldr	r2, [pc, #184]	@ (8003d98 <xTaskIncrementTick+0x15c>)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003ce4:	e02f      	b.n	8003d46 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	3304      	adds	r3, #4
 8003cea:	4618      	mov	r0, r3
 8003cec:	f7fe fd66 	bl	80027bc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d004      	beq.n	8003d02 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	3318      	adds	r3, #24
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fe fd5d 	bl	80027bc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d06:	4b25      	ldr	r3, [pc, #148]	@ (8003d9c <xTaskIncrementTick+0x160>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <xTaskIncrementTick+0xda>
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d12:	4a22      	ldr	r2, [pc, #136]	@ (8003d9c <xTaskIncrementTick+0x160>)
 8003d14:	6013      	str	r3, [r2, #0]
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4a1f      	ldr	r2, [pc, #124]	@ (8003da0 <xTaskIncrementTick+0x164>)
 8003d24:	441a      	add	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4610      	mov	r0, r2
 8003d2e:	f7fe fce8 	bl	8002702 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <xTaskIncrementTick+0x168>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3b8      	bcc.n	8003cb2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d44:	e7b5      	b.n	8003cb2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d46:	4b17      	ldr	r3, [pc, #92]	@ (8003da4 <xTaskIncrementTick+0x168>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d4c:	4914      	ldr	r1, [pc, #80]	@ (8003da0 <xTaskIncrementTick+0x164>)
 8003d4e:	4613      	mov	r3, r2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	4413      	add	r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	440b      	add	r3, r1
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d901      	bls.n	8003d62 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003d62:	4b11      	ldr	r3, [pc, #68]	@ (8003da8 <xTaskIncrementTick+0x16c>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d007      	beq.n	8003d7a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	617b      	str	r3, [r7, #20]
 8003d6e:	e004      	b.n	8003d7a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003d70:	4b0e      	ldr	r3, [pc, #56]	@ (8003dac <xTaskIncrementTick+0x170>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	3301      	adds	r3, #1
 8003d76:	4a0d      	ldr	r2, [pc, #52]	@ (8003dac <xTaskIncrementTick+0x170>)
 8003d78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003d7a:	697b      	ldr	r3, [r7, #20]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000c78 	.word	0x20000c78
 8003d88:	20000c54 	.word	0x20000c54
 8003d8c:	20000c08 	.word	0x20000c08
 8003d90:	20000c0c 	.word	0x20000c0c
 8003d94:	20000c68 	.word	0x20000c68
 8003d98:	20000c70 	.word	0x20000c70
 8003d9c:	20000c58 	.word	0x20000c58
 8003da0:	20000780 	.word	0x20000780
 8003da4:	2000077c 	.word	0x2000077c
 8003da8:	20000c64 	.word	0x20000c64
 8003dac:	20000c60 	.word	0x20000c60

08003db0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003db6:	4b28      	ldr	r3, [pc, #160]	@ (8003e58 <vTaskSwitchContext+0xa8>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d003      	beq.n	8003dc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dbe:	4b27      	ldr	r3, [pc, #156]	@ (8003e5c <vTaskSwitchContext+0xac>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003dc4:	e042      	b.n	8003e4c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003dc6:	4b25      	ldr	r3, [pc, #148]	@ (8003e5c <vTaskSwitchContext+0xac>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003dcc:	4b24      	ldr	r3, [pc, #144]	@ (8003e60 <vTaskSwitchContext+0xb0>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	60fb      	str	r3, [r7, #12]
 8003dd2:	e011      	b.n	8003df8 <vTaskSwitchContext+0x48>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d10b      	bne.n	8003df2 <vTaskSwitchContext+0x42>
	__asm volatile
 8003dda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dde:	f383 8811 	msr	BASEPRI, r3
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	f3bf 8f4f 	dsb	sy
 8003dea:	607b      	str	r3, [r7, #4]
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	e7fd      	b.n	8003dee <vTaskSwitchContext+0x3e>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	3b01      	subs	r3, #1
 8003df6:	60fb      	str	r3, [r7, #12]
 8003df8:	491a      	ldr	r1, [pc, #104]	@ (8003e64 <vTaskSwitchContext+0xb4>)
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0e3      	beq.n	8003dd4 <vTaskSwitchContext+0x24>
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a13      	ldr	r2, [pc, #76]	@ (8003e64 <vTaskSwitchContext+0xb4>)
 8003e18:	4413      	add	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	605a      	str	r2, [r3, #4]
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	685a      	ldr	r2, [r3, #4]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	3308      	adds	r3, #8
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d104      	bne.n	8003e3c <vTaskSwitchContext+0x8c>
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	605a      	str	r2, [r3, #4]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	4a09      	ldr	r2, [pc, #36]	@ (8003e68 <vTaskSwitchContext+0xb8>)
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	4a06      	ldr	r2, [pc, #24]	@ (8003e60 <vTaskSwitchContext+0xb0>)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	6013      	str	r3, [r2, #0]
}
 8003e4c:	bf00      	nop
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	20000c78 	.word	0x20000c78
 8003e5c:	20000c64 	.word	0x20000c64
 8003e60:	20000c58 	.word	0x20000c58
 8003e64:	20000780 	.word	0x20000780
 8003e68:	2000077c 	.word	0x2000077c

08003e6c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d10b      	bne.n	8003e94 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e80:	f383 8811 	msr	BASEPRI, r3
 8003e84:	f3bf 8f6f 	isb	sy
 8003e88:	f3bf 8f4f 	dsb	sy
 8003e8c:	60fb      	str	r3, [r7, #12]
}
 8003e8e:	bf00      	nop
 8003e90:	bf00      	nop
 8003e92:	e7fd      	b.n	8003e90 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e94:	4b07      	ldr	r3, [pc, #28]	@ (8003eb4 <vTaskPlaceOnEventList+0x48>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3318      	adds	r3, #24
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fe fc54 	bl	800274a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	6838      	ldr	r0, [r7, #0]
 8003ea6:	f000 fb91 	bl	80045cc <prvAddCurrentTaskToDelayedList>
}
 8003eaa:	bf00      	nop
 8003eac:	3710      	adds	r7, #16
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	2000077c 	.word	0x2000077c

08003eb8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d10b      	bne.n	8003ee2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ece:	f383 8811 	msr	BASEPRI, r3
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	f3bf 8f4f 	dsb	sy
 8003eda:	617b      	str	r3, [r7, #20]
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	e7fd      	b.n	8003ede <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8003f0c <vTaskPlaceOnEventListRestricted+0x54>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	4619      	mov	r1, r3
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f7fe fc09 	bl	8002702 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8003efa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	68b8      	ldr	r0, [r7, #8]
 8003f00:	f000 fb64 	bl	80045cc <prvAddCurrentTaskToDelayedList>
	}
 8003f04:	bf00      	nop
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	2000077c 	.word	0x2000077c

08003f10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10b      	bne.n	8003f3e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2a:	f383 8811 	msr	BASEPRI, r3
 8003f2e:	f3bf 8f6f 	isb	sy
 8003f32:	f3bf 8f4f 	dsb	sy
 8003f36:	60fb      	str	r3, [r7, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	bf00      	nop
 8003f3c:	e7fd      	b.n	8003f3a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	3318      	adds	r3, #24
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fc3a 	bl	80027bc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f48:	4b1d      	ldr	r3, [pc, #116]	@ (8003fc0 <xTaskRemoveFromEventList+0xb0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d11d      	bne.n	8003f8c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	3304      	adds	r3, #4
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7fe fc31 	bl	80027bc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f5e:	4b19      	ldr	r3, [pc, #100]	@ (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d903      	bls.n	8003f6e <xTaskRemoveFromEventList+0x5e>
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6a:	4a16      	ldr	r2, [pc, #88]	@ (8003fc4 <xTaskRemoveFromEventList+0xb4>)
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f72:	4613      	mov	r3, r2
 8003f74:	009b      	lsls	r3, r3, #2
 8003f76:	4413      	add	r3, r2
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4a13      	ldr	r2, [pc, #76]	@ (8003fc8 <xTaskRemoveFromEventList+0xb8>)
 8003f7c:	441a      	add	r2, r3
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3304      	adds	r3, #4
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f7fe fbbc 	bl	8002702 <vListInsertEnd>
 8003f8a:	e005      	b.n	8003f98 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	3318      	adds	r3, #24
 8003f90:	4619      	mov	r1, r3
 8003f92:	480e      	ldr	r0, [pc, #56]	@ (8003fcc <xTaskRemoveFromEventList+0xbc>)
 8003f94:	f7fe fbb5 	bl	8002702 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003fd0 <xTaskRemoveFromEventList+0xc0>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d905      	bls.n	8003fb2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003faa:	4b0a      	ldr	r3, [pc, #40]	@ (8003fd4 <xTaskRemoveFromEventList+0xc4>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e001      	b.n	8003fb6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003fb6:	697b      	ldr	r3, [r7, #20]
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000c78 	.word	0x20000c78
 8003fc4:	20000c58 	.word	0x20000c58
 8003fc8:	20000780 	.word	0x20000780
 8003fcc:	20000c10 	.word	0x20000c10
 8003fd0:	2000077c 	.word	0x2000077c
 8003fd4:	20000c64 	.word	0x20000c64

08003fd8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	@ (8003ffc <vTaskInternalSetTimeOutState+0x24>)
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fe8:	4b05      	ldr	r3, [pc, #20]	@ (8004000 <vTaskInternalSetTimeOutState+0x28>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	605a      	str	r2, [r3, #4]
}
 8003ff0:	bf00      	nop
 8003ff2:	370c      	adds	r7, #12
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr
 8003ffc:	20000c68 	.word	0x20000c68
 8004000:	20000c54 	.word	0x20000c54

08004004 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b088      	sub	sp, #32
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10b      	bne.n	800402c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004018:	f383 8811 	msr	BASEPRI, r3
 800401c:	f3bf 8f6f 	isb	sy
 8004020:	f3bf 8f4f 	dsb	sy
 8004024:	613b      	str	r3, [r7, #16]
}
 8004026:	bf00      	nop
 8004028:	bf00      	nop
 800402a:	e7fd      	b.n	8004028 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004036:	f383 8811 	msr	BASEPRI, r3
 800403a:	f3bf 8f6f 	isb	sy
 800403e:	f3bf 8f4f 	dsb	sy
 8004042:	60fb      	str	r3, [r7, #12]
}
 8004044:	bf00      	nop
 8004046:	bf00      	nop
 8004048:	e7fd      	b.n	8004046 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800404a:	f000 ff9d 	bl	8004f88 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800404e:	4b1d      	ldr	r3, [pc, #116]	@ (80040c4 <xTaskCheckForTimeOut+0xc0>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	d102      	bne.n	800406e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004068:	2300      	movs	r3, #0
 800406a:	61fb      	str	r3, [r7, #28]
 800406c:	e023      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	4b15      	ldr	r3, [pc, #84]	@ (80040c8 <xTaskCheckForTimeOut+0xc4>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	429a      	cmp	r2, r3
 8004078:	d007      	beq.n	800408a <xTaskCheckForTimeOut+0x86>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	69ba      	ldr	r2, [r7, #24]
 8004080:	429a      	cmp	r2, r3
 8004082:	d302      	bcc.n	800408a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004084:	2301      	movs	r3, #1
 8004086:	61fb      	str	r3, [r7, #28]
 8004088:	e015      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	697a      	ldr	r2, [r7, #20]
 8004090:	429a      	cmp	r2, r3
 8004092:	d20b      	bcs.n	80040ac <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	1ad2      	subs	r2, r2, r3
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff99 	bl	8003fd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040a6:	2300      	movs	r3, #0
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	e004      	b.n	80040b6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040b6:	f000 ff99 	bl	8004fec <vPortExitCritical>

	return xReturn;
 80040ba:	69fb      	ldr	r3, [r7, #28]
}
 80040bc:	4618      	mov	r0, r3
 80040be:	3720      	adds	r7, #32
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20000c54 	.word	0x20000c54
 80040c8:	20000c68 	.word	0x20000c68

080040cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80040d0:	4b03      	ldr	r3, [pc, #12]	@ (80040e0 <vTaskMissedYield+0x14>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	601a      	str	r2, [r3, #0]
}
 80040d6:	bf00      	nop
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	20000c64 	.word	0x20000c64

080040e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80040ec:	f000 f852 	bl	8004194 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80040f0:	4b06      	ldr	r3, [pc, #24]	@ (800410c <prvIdleTask+0x28>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d9f9      	bls.n	80040ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80040f8:	4b05      	ldr	r3, [pc, #20]	@ (8004110 <prvIdleTask+0x2c>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004108:	e7f0      	b.n	80040ec <prvIdleTask+0x8>
 800410a:	bf00      	nop
 800410c:	20000780 	.word	0x20000780
 8004110:	e000ed04 	.word	0xe000ed04

08004114 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800411a:	2300      	movs	r3, #0
 800411c:	607b      	str	r3, [r7, #4]
 800411e:	e00c      	b.n	800413a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004120:	687a      	ldr	r2, [r7, #4]
 8004122:	4613      	mov	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	4a12      	ldr	r2, [pc, #72]	@ (8004174 <prvInitialiseTaskLists+0x60>)
 800412c:	4413      	add	r3, r2
 800412e:	4618      	mov	r0, r3
 8004130:	f7fe faba 	bl	80026a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	3301      	adds	r3, #1
 8004138:	607b      	str	r3, [r7, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2b37      	cmp	r3, #55	@ 0x37
 800413e:	d9ef      	bls.n	8004120 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004140:	480d      	ldr	r0, [pc, #52]	@ (8004178 <prvInitialiseTaskLists+0x64>)
 8004142:	f7fe fab1 	bl	80026a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004146:	480d      	ldr	r0, [pc, #52]	@ (800417c <prvInitialiseTaskLists+0x68>)
 8004148:	f7fe faae 	bl	80026a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800414c:	480c      	ldr	r0, [pc, #48]	@ (8004180 <prvInitialiseTaskLists+0x6c>)
 800414e:	f7fe faab 	bl	80026a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004152:	480c      	ldr	r0, [pc, #48]	@ (8004184 <prvInitialiseTaskLists+0x70>)
 8004154:	f7fe faa8 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004158:	480b      	ldr	r0, [pc, #44]	@ (8004188 <prvInitialiseTaskLists+0x74>)
 800415a:	f7fe faa5 	bl	80026a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800415e:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <prvInitialiseTaskLists+0x78>)
 8004160:	4a05      	ldr	r2, [pc, #20]	@ (8004178 <prvInitialiseTaskLists+0x64>)
 8004162:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004164:	4b0a      	ldr	r3, [pc, #40]	@ (8004190 <prvInitialiseTaskLists+0x7c>)
 8004166:	4a05      	ldr	r2, [pc, #20]	@ (800417c <prvInitialiseTaskLists+0x68>)
 8004168:	601a      	str	r2, [r3, #0]
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	20000780 	.word	0x20000780
 8004178:	20000be0 	.word	0x20000be0
 800417c:	20000bf4 	.word	0x20000bf4
 8004180:	20000c10 	.word	0x20000c10
 8004184:	20000c24 	.word	0x20000c24
 8004188:	20000c3c 	.word	0x20000c3c
 800418c:	20000c08 	.word	0x20000c08
 8004190:	20000c0c 	.word	0x20000c0c

08004194 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800419a:	e019      	b.n	80041d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800419c:	f000 fef4 	bl	8004f88 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041a0:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <prvCheckTasksWaitingTermination+0x50>)
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7fe fb05 	bl	80027bc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041b2:	4b0d      	ldr	r3, [pc, #52]	@ (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4a0b      	ldr	r2, [pc, #44]	@ (80041e8 <prvCheckTasksWaitingTermination+0x54>)
 80041ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041bc:	4b0b      	ldr	r3, [pc, #44]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4a0a      	ldr	r2, [pc, #40]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80041c6:	f000 ff11 	bl	8004fec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f810 	bl	80041f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041d0:	4b06      	ldr	r3, [pc, #24]	@ (80041ec <prvCheckTasksWaitingTermination+0x58>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1e1      	bne.n	800419c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80041d8:	bf00      	nop
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	20000c24 	.word	0x20000c24
 80041e8:	20000c50 	.word	0x20000c50
 80041ec:	20000c38 	.word	0x20000c38

080041f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d108      	bne.n	8004214 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4618      	mov	r0, r3
 8004208:	f001 f8ae 	bl	8005368 <vPortFree>
				vPortFree( pxTCB );
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f001 f8ab 	bl	8005368 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004212:	e019      	b.n	8004248 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800421a:	2b01      	cmp	r3, #1
 800421c:	d103      	bne.n	8004226 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f001 f8a2 	bl	8005368 <vPortFree>
	}
 8004224:	e010      	b.n	8004248 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800422c:	2b02      	cmp	r3, #2
 800422e:	d00b      	beq.n	8004248 <prvDeleteTCB+0x58>
	__asm volatile
 8004230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004234:	f383 8811 	msr	BASEPRI, r3
 8004238:	f3bf 8f6f 	isb	sy
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	60fb      	str	r3, [r7, #12]
}
 8004242:	bf00      	nop
 8004244:	bf00      	nop
 8004246:	e7fd      	b.n	8004244 <prvDeleteTCB+0x54>
	}
 8004248:	bf00      	nop
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004256:	4b0c      	ldr	r3, [pc, #48]	@ (8004288 <prvResetNextTaskUnblockTime+0x38>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d104      	bne.n	800426a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004260:	4b0a      	ldr	r3, [pc, #40]	@ (800428c <prvResetNextTaskUnblockTime+0x3c>)
 8004262:	f04f 32ff 	mov.w	r2, #4294967295
 8004266:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004268:	e008      	b.n	800427c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800426a:	4b07      	ldr	r3, [pc, #28]	@ (8004288 <prvResetNextTaskUnblockTime+0x38>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	4a04      	ldr	r2, [pc, #16]	@ (800428c <prvResetNextTaskUnblockTime+0x3c>)
 800427a:	6013      	str	r3, [r2, #0]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	20000c08 	.word	0x20000c08
 800428c:	20000c70 	.word	0x20000c70

08004290 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004296:	4b05      	ldr	r3, [pc, #20]	@ (80042ac <xTaskGetCurrentTaskHandle+0x1c>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800429c:	687b      	ldr	r3, [r7, #4]
	}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	2000077c 	.word	0x2000077c

080042b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042b6:	4b0b      	ldr	r3, [pc, #44]	@ (80042e4 <xTaskGetSchedulerState+0x34>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042be:	2301      	movs	r3, #1
 80042c0:	607b      	str	r3, [r7, #4]
 80042c2:	e008      	b.n	80042d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042c4:	4b08      	ldr	r3, [pc, #32]	@ (80042e8 <xTaskGetSchedulerState+0x38>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d102      	bne.n	80042d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042cc:	2302      	movs	r3, #2
 80042ce:	607b      	str	r3, [r7, #4]
 80042d0:	e001      	b.n	80042d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042d2:	2300      	movs	r3, #0
 80042d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042d6:	687b      	ldr	r3, [r7, #4]
	}
 80042d8:	4618      	mov	r0, r3
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	20000c5c 	.word	0x20000c5c
 80042e8:	20000c78 	.word	0x20000c78

080042ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d051      	beq.n	80043a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004306:	4b2a      	ldr	r3, [pc, #168]	@ (80043b0 <xTaskPriorityInherit+0xc4>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800430c:	429a      	cmp	r2, r3
 800430e:	d241      	bcs.n	8004394 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	2b00      	cmp	r3, #0
 8004316:	db06      	blt.n	8004326 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004318:	4b25      	ldr	r3, [pc, #148]	@ (80043b0 <xTaskPriorityInherit+0xc4>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	6959      	ldr	r1, [r3, #20]
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	4a1f      	ldr	r2, [pc, #124]	@ (80043b4 <xTaskPriorityInherit+0xc8>)
 8004338:	4413      	add	r3, r2
 800433a:	4299      	cmp	r1, r3
 800433c:	d122      	bne.n	8004384 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	3304      	adds	r3, #4
 8004342:	4618      	mov	r0, r3
 8004344:	f7fe fa3a 	bl	80027bc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004348:	4b19      	ldr	r3, [pc, #100]	@ (80043b0 <xTaskPriorityInherit+0xc4>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004356:	4b18      	ldr	r3, [pc, #96]	@ (80043b8 <xTaskPriorityInherit+0xcc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	429a      	cmp	r2, r3
 800435c:	d903      	bls.n	8004366 <xTaskPriorityInherit+0x7a>
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004362:	4a15      	ldr	r2, [pc, #84]	@ (80043b8 <xTaskPriorityInherit+0xcc>)
 8004364:	6013      	str	r3, [r2, #0]
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800436a:	4613      	mov	r3, r2
 800436c:	009b      	lsls	r3, r3, #2
 800436e:	4413      	add	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4a10      	ldr	r2, [pc, #64]	@ (80043b4 <xTaskPriorityInherit+0xc8>)
 8004374:	441a      	add	r2, r3
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	3304      	adds	r3, #4
 800437a:	4619      	mov	r1, r3
 800437c:	4610      	mov	r0, r2
 800437e:	f7fe f9c0 	bl	8002702 <vListInsertEnd>
 8004382:	e004      	b.n	800438e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004384:	4b0a      	ldr	r3, [pc, #40]	@ (80043b0 <xTaskPriorityInherit+0xc4>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800438e:	2301      	movs	r3, #1
 8004390:	60fb      	str	r3, [r7, #12]
 8004392:	e008      	b.n	80043a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004398:	4b05      	ldr	r3, [pc, #20]	@ (80043b0 <xTaskPriorityInherit+0xc4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800439e:	429a      	cmp	r2, r3
 80043a0:	d201      	bcs.n	80043a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043a6:	68fb      	ldr	r3, [r7, #12]
	}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}
 80043b0:	2000077c 	.word	0x2000077c
 80043b4:	20000780 	.word	0x20000780
 80043b8:	20000c58 	.word	0x20000c58

080043bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d058      	beq.n	8004484 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80043d2:	4b2f      	ldr	r3, [pc, #188]	@ (8004490 <xTaskPriorityDisinherit+0xd4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d00b      	beq.n	80043f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80043dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e0:	f383 8811 	msr	BASEPRI, r3
 80043e4:	f3bf 8f6f 	isb	sy
 80043e8:	f3bf 8f4f 	dsb	sy
 80043ec:	60fb      	str	r3, [r7, #12]
}
 80043ee:	bf00      	nop
 80043f0:	bf00      	nop
 80043f2:	e7fd      	b.n	80043f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10b      	bne.n	8004414 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80043fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004400:	f383 8811 	msr	BASEPRI, r3
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	f3bf 8f4f 	dsb	sy
 800440c:	60bb      	str	r3, [r7, #8]
}
 800440e:	bf00      	nop
 8004410:	bf00      	nop
 8004412:	e7fd      	b.n	8004410 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004426:	429a      	cmp	r2, r3
 8004428:	d02c      	beq.n	8004484 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800442e:	2b00      	cmp	r3, #0
 8004430:	d128      	bne.n	8004484 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	3304      	adds	r3, #4
 8004436:	4618      	mov	r0, r3
 8004438:	f7fe f9c0 	bl	80027bc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004448:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004454:	4b0f      	ldr	r3, [pc, #60]	@ (8004494 <xTaskPriorityDisinherit+0xd8>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d903      	bls.n	8004464 <xTaskPriorityDisinherit+0xa8>
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <xTaskPriorityDisinherit+0xd8>)
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004468:	4613      	mov	r3, r2
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	4413      	add	r3, r2
 800446e:	009b      	lsls	r3, r3, #2
 8004470:	4a09      	ldr	r2, [pc, #36]	@ (8004498 <xTaskPriorityDisinherit+0xdc>)
 8004472:	441a      	add	r2, r3
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	3304      	adds	r3, #4
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f7fe f941 	bl	8002702 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004480:	2301      	movs	r3, #1
 8004482:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004484:	697b      	ldr	r3, [r7, #20]
	}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	2000077c 	.word	0x2000077c
 8004494:	20000c58 	.word	0x20000c58
 8004498:	20000780 	.word	0x20000780

0800449c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800449c:	b580      	push	{r7, lr}
 800449e:	b088      	sub	sp, #32
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80044aa:	2301      	movs	r3, #1
 80044ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d06c      	beq.n	800458e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10b      	bne.n	80044d4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80044bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044c0:	f383 8811 	msr	BASEPRI, r3
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	f3bf 8f4f 	dsb	sy
 80044cc:	60fb      	str	r3, [r7, #12]
}
 80044ce:	bf00      	nop
 80044d0:	bf00      	nop
 80044d2:	e7fd      	b.n	80044d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	429a      	cmp	r2, r3
 80044dc:	d902      	bls.n	80044e4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e002      	b.n	80044ea <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044e8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ee:	69fa      	ldr	r2, [r7, #28]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d04c      	beq.n	800458e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d147      	bne.n	800458e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80044fe:	4b26      	ldr	r3, [pc, #152]	@ (8004598 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	429a      	cmp	r2, r3
 8004506:	d10b      	bne.n	8004520 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60bb      	str	r3, [r7, #8]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004524:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800452c:	69bb      	ldr	r3, [r7, #24]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b00      	cmp	r3, #0
 8004532:	db04      	blt.n	800453e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	6959      	ldr	r1, [r3, #20]
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4613      	mov	r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4a13      	ldr	r2, [pc, #76]	@ (800459c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800454e:	4413      	add	r3, r2
 8004550:	4299      	cmp	r1, r3
 8004552:	d11c      	bne.n	800458e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	3304      	adds	r3, #4
 8004558:	4618      	mov	r0, r3
 800455a:	f7fe f92f 	bl	80027bc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004562:	4b0f      	ldr	r3, [pc, #60]	@ (80045a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800456a:	69bb      	ldr	r3, [r7, #24]
 800456c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456e:	4a0c      	ldr	r2, [pc, #48]	@ (80045a0 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	4613      	mov	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a07      	ldr	r2, [pc, #28]	@ (800459c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004580:	441a      	add	r2, r3
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	3304      	adds	r3, #4
 8004586:	4619      	mov	r1, r3
 8004588:	4610      	mov	r0, r2
 800458a:	f7fe f8ba 	bl	8002702 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800458e:	bf00      	nop
 8004590:	3720      	adds	r7, #32
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
 8004596:	bf00      	nop
 8004598:	2000077c 	.word	0x2000077c
 800459c:	20000780 	.word	0x20000780
 80045a0:	20000c58 	.word	0x20000c58

080045a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80045a4:	b480      	push	{r7}
 80045a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80045a8:	4b07      	ldr	r3, [pc, #28]	@ (80045c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d004      	beq.n	80045ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80045b0:	4b05      	ldr	r3, [pc, #20]	@ (80045c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80045b6:	3201      	adds	r2, #1
 80045b8:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80045ba:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80045bc:	681b      	ldr	r3, [r3, #0]
	}
 80045be:	4618      	mov	r0, r3
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr
 80045c8:	2000077c 	.word	0x2000077c

080045cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80045d6:	4b21      	ldr	r3, [pc, #132]	@ (800465c <prvAddCurrentTaskToDelayedList+0x90>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045dc:	4b20      	ldr	r3, [pc, #128]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3304      	adds	r3, #4
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f8ea 	bl	80027bc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ee:	d10a      	bne.n	8004606 <prvAddCurrentTaskToDelayedList+0x3a>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d007      	beq.n	8004606 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80045f6:	4b1a      	ldr	r3, [pc, #104]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4819      	ldr	r0, [pc, #100]	@ (8004664 <prvAddCurrentTaskToDelayedList+0x98>)
 8004600:	f7fe f87f 	bl	8002702 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004604:	e026      	b.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4413      	add	r3, r2
 800460c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800460e:	4b14      	ldr	r3, [pc, #80]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004616:	68ba      	ldr	r2, [r7, #8]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	429a      	cmp	r2, r3
 800461c:	d209      	bcs.n	8004632 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800461e:	4b12      	ldr	r3, [pc, #72]	@ (8004668 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	4b0f      	ldr	r3, [pc, #60]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3304      	adds	r3, #4
 8004628:	4619      	mov	r1, r3
 800462a:	4610      	mov	r0, r2
 800462c:	f7fe f88d 	bl	800274a <vListInsert>
}
 8004630:	e010      	b.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	4b0a      	ldr	r3, [pc, #40]	@ (8004660 <prvAddCurrentTaskToDelayedList+0x94>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3304      	adds	r3, #4
 800463c:	4619      	mov	r1, r3
 800463e:	4610      	mov	r0, r2
 8004640:	f7fe f883 	bl	800274a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004644:	4b0a      	ldr	r3, [pc, #40]	@ (8004670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	429a      	cmp	r2, r3
 800464c:	d202      	bcs.n	8004654 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800464e:	4a08      	ldr	r2, [pc, #32]	@ (8004670 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	6013      	str	r3, [r2, #0]
}
 8004654:	bf00      	nop
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	20000c54 	.word	0x20000c54
 8004660:	2000077c 	.word	0x2000077c
 8004664:	20000c3c 	.word	0x20000c3c
 8004668:	20000c0c 	.word	0x20000c0c
 800466c:	20000c08 	.word	0x20000c08
 8004670:	20000c70 	.word	0x20000c70

08004674 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08a      	sub	sp, #40	@ 0x28
 8004678:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800467e:	f000 fb13 	bl	8004ca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004682:	4b1d      	ldr	r3, [pc, #116]	@ (80046f8 <xTimerCreateTimerTask+0x84>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d021      	beq.n	80046ce <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004692:	1d3a      	adds	r2, r7, #4
 8004694:	f107 0108 	add.w	r1, r7, #8
 8004698:	f107 030c 	add.w	r3, r7, #12
 800469c:	4618      	mov	r0, r3
 800469e:	f7fd ffe9 	bl	8002674 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	9202      	str	r2, [sp, #8]
 80046aa:	9301      	str	r3, [sp, #4]
 80046ac:	2302      	movs	r3, #2
 80046ae:	9300      	str	r3, [sp, #0]
 80046b0:	2300      	movs	r3, #0
 80046b2:	460a      	mov	r2, r1
 80046b4:	4911      	ldr	r1, [pc, #68]	@ (80046fc <xTimerCreateTimerTask+0x88>)
 80046b6:	4812      	ldr	r0, [pc, #72]	@ (8004700 <xTimerCreateTimerTask+0x8c>)
 80046b8:	f7fe ffc0 	bl	800363c <xTaskCreateStatic>
 80046bc:	4603      	mov	r3, r0
 80046be:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <xTimerCreateTimerTask+0x90>)
 80046c0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80046c2:	4b10      	ldr	r3, [pc, #64]	@ (8004704 <xTimerCreateTimerTask+0x90>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80046ca:	2301      	movs	r3, #1
 80046cc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <xTimerCreateTimerTask+0x78>
	__asm volatile
 80046d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d8:	f383 8811 	msr	BASEPRI, r3
 80046dc:	f3bf 8f6f 	isb	sy
 80046e0:	f3bf 8f4f 	dsb	sy
 80046e4:	613b      	str	r3, [r7, #16]
}
 80046e6:	bf00      	nop
 80046e8:	bf00      	nop
 80046ea:	e7fd      	b.n	80046e8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80046ec:	697b      	ldr	r3, [r7, #20]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3718      	adds	r7, #24
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000cac 	.word	0x20000cac
 80046fc:	080056c0 	.word	0x080056c0
 8004700:	08004841 	.word	0x08004841
 8004704:	20000cb0 	.word	0x20000cb0

08004708 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	@ 0x28
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
 8004714:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004716:	2300      	movs	r3, #0
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10b      	bne.n	8004738 <xTimerGenericCommand+0x30>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	bf00      	nop
 8004736:	e7fd      	b.n	8004734 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004738:	4b19      	ldr	r3, [pc, #100]	@ (80047a0 <xTimerGenericCommand+0x98>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d02a      	beq.n	8004796 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	2b05      	cmp	r3, #5
 8004750:	dc18      	bgt.n	8004784 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004752:	f7ff fdad 	bl	80042b0 <xTaskGetSchedulerState>
 8004756:	4603      	mov	r3, r0
 8004758:	2b02      	cmp	r3, #2
 800475a:	d109      	bne.n	8004770 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800475c:	4b10      	ldr	r3, [pc, #64]	@ (80047a0 <xTimerGenericCommand+0x98>)
 800475e:	6818      	ldr	r0, [r3, #0]
 8004760:	f107 0110 	add.w	r1, r7, #16
 8004764:	2300      	movs	r3, #0
 8004766:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004768:	f7fe fa50 	bl	8002c0c <xQueueGenericSend>
 800476c:	6278      	str	r0, [r7, #36]	@ 0x24
 800476e:	e012      	b.n	8004796 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004770:	4b0b      	ldr	r3, [pc, #44]	@ (80047a0 <xTimerGenericCommand+0x98>)
 8004772:	6818      	ldr	r0, [r3, #0]
 8004774:	f107 0110 	add.w	r1, r7, #16
 8004778:	2300      	movs	r3, #0
 800477a:	2200      	movs	r2, #0
 800477c:	f7fe fa46 	bl	8002c0c <xQueueGenericSend>
 8004780:	6278      	str	r0, [r7, #36]	@ 0x24
 8004782:	e008      	b.n	8004796 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004784:	4b06      	ldr	r3, [pc, #24]	@ (80047a0 <xTimerGenericCommand+0x98>)
 8004786:	6818      	ldr	r0, [r3, #0]
 8004788:	f107 0110 	add.w	r1, r7, #16
 800478c:	2300      	movs	r3, #0
 800478e:	683a      	ldr	r2, [r7, #0]
 8004790:	f7fe fb3e 	bl	8002e10 <xQueueGenericSendFromISR>
 8004794:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004798:	4618      	mov	r0, r3
 800479a:	3728      	adds	r7, #40	@ 0x28
 800479c:	46bd      	mov	sp, r7
 800479e:	bd80      	pop	{r7, pc}
 80047a0:	20000cac 	.word	0x20000cac

080047a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b088      	sub	sp, #32
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047ae:	4b23      	ldr	r3, [pc, #140]	@ (800483c <prvProcessExpiredTimer+0x98>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	3304      	adds	r3, #4
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fd fffd 	bl	80027bc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80047c8:	f003 0304 	and.w	r3, r3, #4
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d023      	beq.n	8004818 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	699a      	ldr	r2, [r3, #24]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	18d1      	adds	r1, r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	6978      	ldr	r0, [r7, #20]
 80047de:	f000 f8d5 	bl	800498c <prvInsertTimerInActiveList>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80047e8:	2300      	movs	r3, #0
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	2300      	movs	r3, #0
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	2100      	movs	r1, #0
 80047f2:	6978      	ldr	r0, [r7, #20]
 80047f4:	f7ff ff88 	bl	8004708 <xTimerGenericCommand>
 80047f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d114      	bne.n	800482a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004804:	f383 8811 	msr	BASEPRI, r3
 8004808:	f3bf 8f6f 	isb	sy
 800480c:	f3bf 8f4f 	dsb	sy
 8004810:	60fb      	str	r3, [r7, #12]
}
 8004812:	bf00      	nop
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	b2da      	uxtb	r2, r3
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6a1b      	ldr	r3, [r3, #32]
 800482e:	6978      	ldr	r0, [r7, #20]
 8004830:	4798      	blx	r3
}
 8004832:	bf00      	nop
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	20000ca4 	.word	0x20000ca4

08004840 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004848:	f107 0308 	add.w	r3, r7, #8
 800484c:	4618      	mov	r0, r3
 800484e:	f000 f859 	bl	8004904 <prvGetNextExpireTime>
 8004852:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	4619      	mov	r1, r3
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f000 f805 	bl	8004868 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800485e:	f000 f8d7 	bl	8004a10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004862:	bf00      	nop
 8004864:	e7f0      	b.n	8004848 <prvTimerTask+0x8>
	...

08004868 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
 8004870:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004872:	f7ff f927 	bl	8003ac4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004876:	f107 0308 	add.w	r3, r7, #8
 800487a:	4618      	mov	r0, r3
 800487c:	f000 f866 	bl	800494c <prvSampleTimeNow>
 8004880:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d130      	bne.n	80048ea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <prvProcessTimerOrBlockTask+0x3c>
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	429a      	cmp	r2, r3
 8004894:	d806      	bhi.n	80048a4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004896:	f7ff f923 	bl	8003ae0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff ff81 	bl	80047a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80048a2:	e024      	b.n	80048ee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d008      	beq.n	80048bc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80048aa:	4b13      	ldr	r3, [pc, #76]	@ (80048f8 <prvProcessTimerOrBlockTask+0x90>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <prvProcessTimerOrBlockTask+0x50>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <prvProcessTimerOrBlockTask+0x52>
 80048b8:	2300      	movs	r3, #0
 80048ba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80048bc:	4b0f      	ldr	r3, [pc, #60]	@ (80048fc <prvProcessTimerOrBlockTask+0x94>)
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	f7fe fe83 	bl	80035d4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80048ce:	f7ff f907 	bl	8003ae0 <xTaskResumeAll>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10a      	bne.n	80048ee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <prvProcessTimerOrBlockTask+0x98>)
 80048da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	f3bf 8f6f 	isb	sy
}
 80048e8:	e001      	b.n	80048ee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80048ea:	f7ff f8f9 	bl	8003ae0 <xTaskResumeAll>
}
 80048ee:	bf00      	nop
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000ca8 	.word	0x20000ca8
 80048fc:	20000cac 	.word	0x20000cac
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004904:	b480      	push	{r7}
 8004906:	b085      	sub	sp, #20
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <prvGetNextExpireTime+0x44>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <prvGetNextExpireTime+0x16>
 8004916:	2201      	movs	r2, #1
 8004918:	e000      	b.n	800491c <prvGetNextExpireTime+0x18>
 800491a:	2200      	movs	r2, #0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d105      	bne.n	8004934 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004928:	4b07      	ldr	r3, [pc, #28]	@ (8004948 <prvGetNextExpireTime+0x44>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
 8004932:	e001      	b.n	8004938 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004934:	2300      	movs	r3, #0
 8004936:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004938:	68fb      	ldr	r3, [r7, #12]
}
 800493a:	4618      	mov	r0, r3
 800493c:	3714      	adds	r7, #20
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	20000ca4 	.word	0x20000ca4

0800494c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b084      	sub	sp, #16
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004954:	f7ff f962 	bl	8003c1c <xTaskGetTickCount>
 8004958:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800495a:	4b0b      	ldr	r3, [pc, #44]	@ (8004988 <prvSampleTimeNow+0x3c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d205      	bcs.n	8004970 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004964:	f000 f93a 	bl	8004bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	e002      	b.n	8004976 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004976:	4a04      	ldr	r2, [pc, #16]	@ (8004988 <prvSampleTimeNow+0x3c>)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800497c:	68fb      	ldr	r3, [r7, #12]
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	20000cb4 	.word	0x20000cb4

0800498c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
 8004992:	60f8      	str	r0, [r7, #12]
 8004994:	60b9      	str	r1, [r7, #8]
 8004996:	607a      	str	r2, [r7, #4]
 8004998:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800499a:	2300      	movs	r3, #0
 800499c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	429a      	cmp	r2, r3
 80049b0:	d812      	bhi.n	80049d8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049b2:	687a      	ldr	r2, [r7, #4]
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	1ad2      	subs	r2, r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	699b      	ldr	r3, [r3, #24]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d302      	bcc.n	80049c6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80049c0:	2301      	movs	r3, #1
 80049c2:	617b      	str	r3, [r7, #20]
 80049c4:	e01b      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <prvInsertTimerInActiveList+0x7c>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3304      	adds	r3, #4
 80049ce:	4619      	mov	r1, r3
 80049d0:	4610      	mov	r0, r2
 80049d2:	f7fd feba 	bl	800274a <vListInsert>
 80049d6:	e012      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d206      	bcs.n	80049ee <prvInsertTimerInActiveList+0x62>
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d302      	bcc.n	80049ee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80049e8:	2301      	movs	r3, #1
 80049ea:	617b      	str	r3, [r7, #20]
 80049ec:	e007      	b.n	80049fe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049ee:	4b07      	ldr	r3, [pc, #28]	@ (8004a0c <prvInsertTimerInActiveList+0x80>)
 80049f0:	681a      	ldr	r2, [r3, #0]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	3304      	adds	r3, #4
 80049f6:	4619      	mov	r1, r3
 80049f8:	4610      	mov	r0, r2
 80049fa:	f7fd fea6 	bl	800274a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80049fe:	697b      	ldr	r3, [r7, #20]
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000ca8 	.word	0x20000ca8
 8004a0c:	20000ca4 	.word	0x20000ca4

08004a10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b08e      	sub	sp, #56	@ 0x38
 8004a14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a16:	e0ce      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da19      	bge.n	8004a52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004a1e:	1d3b      	adds	r3, r7, #4
 8004a20:	3304      	adds	r3, #4
 8004a22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10b      	bne.n	8004a42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61fb      	str	r3, [r7, #28]
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	e7fd      	b.n	8004a3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a48:	6850      	ldr	r0, [r2, #4]
 8004a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a4c:	6892      	ldr	r2, [r2, #8]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f2c0 80ae 	blt.w	8004bb6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d004      	beq.n	8004a70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fd fea6 	bl	80027bc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a70:	463b      	mov	r3, r7
 8004a72:	4618      	mov	r0, r3
 8004a74:	f7ff ff6a 	bl	800494c <prvSampleTimeNow>
 8004a78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b09      	cmp	r3, #9
 8004a7e:	f200 8097 	bhi.w	8004bb0 <prvProcessReceivedCommands+0x1a0>
 8004a82:	a201      	add	r2, pc, #4	@ (adr r2, 8004a88 <prvProcessReceivedCommands+0x78>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004ab1 	.word	0x08004ab1
 8004a8c:	08004ab1 	.word	0x08004ab1
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004b27 	.word	0x08004b27
 8004a98:	08004b3b 	.word	0x08004b3b
 8004a9c:	08004b87 	.word	0x08004b87
 8004aa0:	08004ab1 	.word	0x08004ab1
 8004aa4:	08004ab1 	.word	0x08004ab1
 8004aa8:	08004b27 	.word	0x08004b27
 8004aac:	08004b3b 	.word	0x08004b3b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab6:	f043 0301 	orr.w	r3, r3, #1
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004abe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004ac2:	68ba      	ldr	r2, [r7, #8]
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	18d1      	adds	r1, r2, r3
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ace:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ad0:	f7ff ff5c 	bl	800498c <prvInsertTimerInActiveList>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d06c      	beq.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ae0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ae8:	f003 0304 	and.w	r3, r3, #4
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d061      	beq.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	441a      	add	r2, r3
 8004af8:	2300      	movs	r3, #0
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	2300      	movs	r3, #0
 8004afe:	2100      	movs	r1, #0
 8004b00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b02:	f7ff fe01 	bl	8004708 <xTimerGenericCommand>
 8004b06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d152      	bne.n	8004bb4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	61bb      	str	r3, [r7, #24]
}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b28:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004b38:	e03d      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b40:	f043 0301 	orr.w	r3, r3, #1
 8004b44:	b2da      	uxtb	r2, r3
 8004b46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b48:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004b4c:	68ba      	ldr	r2, [r7, #8]
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10b      	bne.n	8004b72 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004b5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b5e:	f383 8811 	msr	BASEPRI, r3
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	f3bf 8f4f 	dsb	sy
 8004b6a:	617b      	str	r3, [r7, #20]
}
 8004b6c:	bf00      	nop
 8004b6e:	bf00      	nop
 8004b70:	e7fd      	b.n	8004b6e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b78:	18d1      	adds	r1, r2, r3
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b80:	f7ff ff04 	bl	800498c <prvInsertTimerInActiveList>
					break;
 8004b84:	e017      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d103      	bne.n	8004b9c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004b94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b96:	f000 fbe7 	bl	8005368 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004b9a:	e00c      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004b9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b9e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ba2:	f023 0301 	bic.w	r3, r3, #1
 8004ba6:	b2da      	uxtb	r2, r3
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004bae:	e002      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004bb0:	bf00      	nop
 8004bb2:	e000      	b.n	8004bb6 <prvProcessReceivedCommands+0x1a6>
					break;
 8004bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004bb6:	4b08      	ldr	r3, [pc, #32]	@ (8004bd8 <prvProcessReceivedCommands+0x1c8>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	1d39      	adds	r1, r7, #4
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fe f9c4 	bl	8002f4c <xQueueReceive>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f47f af26 	bne.w	8004a18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004bcc:	bf00      	nop
 8004bce:	bf00      	nop
 8004bd0:	3730      	adds	r7, #48	@ 0x30
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20000cac 	.word	0x20000cac

08004bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b088      	sub	sp, #32
 8004be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004be2:	e049      	b.n	8004c78 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004be4:	4b2e      	ldr	r3, [pc, #184]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bee:	4b2c      	ldr	r3, [pc, #176]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f7fd fddd 	bl	80027bc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	6a1b      	ldr	r3, [r3, #32]
 8004c06:	68f8      	ldr	r0, [r7, #12]
 8004c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004c10:	f003 0304 	and.w	r3, r3, #4
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d02f      	beq.n	8004c78 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	699b      	ldr	r3, [r3, #24]
 8004c1c:	693a      	ldr	r2, [r7, #16]
 8004c1e:	4413      	add	r3, r2
 8004c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d90e      	bls.n	8004c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c36:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	3304      	adds	r3, #4
 8004c3e:	4619      	mov	r1, r3
 8004c40:	4610      	mov	r0, r2
 8004c42:	f7fd fd82 	bl	800274a <vListInsert>
 8004c46:	e017      	b.n	8004c78 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c48:	2300      	movs	r3, #0
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	693a      	ldr	r2, [r7, #16]
 8004c50:	2100      	movs	r1, #0
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f7ff fd58 	bl	8004708 <xTimerGenericCommand>
 8004c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10b      	bne.n	8004c78 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	603b      	str	r3, [r7, #0]
}
 8004c72:	bf00      	nop
 8004c74:	bf00      	nop
 8004c76:	e7fd      	b.n	8004c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004c78:	4b09      	ldr	r3, [pc, #36]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d1b0      	bne.n	8004be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004c82:	4b07      	ldr	r3, [pc, #28]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004c88:	4b06      	ldr	r3, [pc, #24]	@ (8004ca4 <prvSwitchTimerLists+0xc8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a04      	ldr	r2, [pc, #16]	@ (8004ca0 <prvSwitchTimerLists+0xc4>)
 8004c8e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004c90:	4a04      	ldr	r2, [pc, #16]	@ (8004ca4 <prvSwitchTimerLists+0xc8>)
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	6013      	str	r3, [r2, #0]
}
 8004c96:	bf00      	nop
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000ca4 	.word	0x20000ca4
 8004ca4:	20000ca8 	.word	0x20000ca8

08004ca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004cae:	f000 f96b 	bl	8004f88 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004cb2:	4b15      	ldr	r3, [pc, #84]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d120      	bne.n	8004cfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004cba:	4814      	ldr	r0, [pc, #80]	@ (8004d0c <prvCheckForValidListAndQueue+0x64>)
 8004cbc:	f7fd fcf4 	bl	80026a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004cc0:	4813      	ldr	r0, [pc, #76]	@ (8004d10 <prvCheckForValidListAndQueue+0x68>)
 8004cc2:	f7fd fcf1 	bl	80026a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004cc6:	4b13      	ldr	r3, [pc, #76]	@ (8004d14 <prvCheckForValidListAndQueue+0x6c>)
 8004cc8:	4a10      	ldr	r2, [pc, #64]	@ (8004d0c <prvCheckForValidListAndQueue+0x64>)
 8004cca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004ccc:	4b12      	ldr	r3, [pc, #72]	@ (8004d18 <prvCheckForValidListAndQueue+0x70>)
 8004cce:	4a10      	ldr	r2, [pc, #64]	@ (8004d10 <prvCheckForValidListAndQueue+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	9300      	str	r3, [sp, #0]
 8004cd6:	4b11      	ldr	r3, [pc, #68]	@ (8004d1c <prvCheckForValidListAndQueue+0x74>)
 8004cd8:	4a11      	ldr	r2, [pc, #68]	@ (8004d20 <prvCheckForValidListAndQueue+0x78>)
 8004cda:	2110      	movs	r1, #16
 8004cdc:	200a      	movs	r0, #10
 8004cde:	f7fd fe01 	bl	80028e4 <xQueueGenericCreateStatic>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	4a08      	ldr	r2, [pc, #32]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004ce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ce8:	4b07      	ldr	r3, [pc, #28]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d005      	beq.n	8004cfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004cf0:	4b05      	ldr	r3, [pc, #20]	@ (8004d08 <prvCheckForValidListAndQueue+0x60>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	490b      	ldr	r1, [pc, #44]	@ (8004d24 <prvCheckForValidListAndQueue+0x7c>)
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fe fc42 	bl	8003580 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cfc:	f000 f976 	bl	8004fec <vPortExitCritical>
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	20000cac 	.word	0x20000cac
 8004d0c:	20000c7c 	.word	0x20000c7c
 8004d10:	20000c90 	.word	0x20000c90
 8004d14:	20000ca4 	.word	0x20000ca4
 8004d18:	20000ca8 	.word	0x20000ca8
 8004d1c:	20000d58 	.word	0x20000d58
 8004d20:	20000cb8 	.word	0x20000cb8
 8004d24:	080056c8 	.word	0x080056c8

08004d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d28:	b480      	push	{r7}
 8004d2a:	b085      	sub	sp, #20
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	60f8      	str	r0, [r7, #12]
 8004d30:	60b9      	str	r1, [r7, #8]
 8004d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	3b04      	subs	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b04      	subs	r3, #4
 8004d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3b04      	subs	r3, #4
 8004d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d58:	4a0c      	ldr	r2, [pc, #48]	@ (8004d8c <pxPortInitialiseStack+0x64>)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3b14      	subs	r3, #20
 8004d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d64:	687a      	ldr	r2, [r7, #4]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	3b04      	subs	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f06f 0202 	mvn.w	r2, #2
 8004d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	3b20      	subs	r3, #32
 8004d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	08004d91 	.word	0x08004d91

08004d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d9a:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <prvTaskExitError+0x58>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004da2:	d00b      	beq.n	8004dbc <prvTaskExitError+0x2c>
	__asm volatile
 8004da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da8:	f383 8811 	msr	BASEPRI, r3
 8004dac:	f3bf 8f6f 	isb	sy
 8004db0:	f3bf 8f4f 	dsb	sy
 8004db4:	60fb      	str	r3, [r7, #12]
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	e7fd      	b.n	8004db8 <prvTaskExitError+0x28>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	60bb      	str	r3, [r7, #8]
}
 8004dce:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004dd0:	bf00      	nop
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0fc      	beq.n	8004dd2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004dd8:	bf00      	nop
 8004dda:	bf00      	nop
 8004ddc:	3714      	adds	r7, #20
 8004dde:	46bd      	mov	sp, r7
 8004de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	2000000c 	.word	0x2000000c
 8004dec:	00000000 	.word	0x00000000

08004df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004df0:	4b07      	ldr	r3, [pc, #28]	@ (8004e10 <pxCurrentTCBConst2>)
 8004df2:	6819      	ldr	r1, [r3, #0]
 8004df4:	6808      	ldr	r0, [r1, #0]
 8004df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dfa:	f380 8809 	msr	PSP, r0
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f04f 0000 	mov.w	r0, #0
 8004e06:	f380 8811 	msr	BASEPRI, r0
 8004e0a:	4770      	bx	lr
 8004e0c:	f3af 8000 	nop.w

08004e10 <pxCurrentTCBConst2>:
 8004e10:	2000077c 	.word	0x2000077c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004e14:	bf00      	nop
 8004e16:	bf00      	nop

08004e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004e18:	4808      	ldr	r0, [pc, #32]	@ (8004e3c <prvPortStartFirstTask+0x24>)
 8004e1a:	6800      	ldr	r0, [r0, #0]
 8004e1c:	6800      	ldr	r0, [r0, #0]
 8004e1e:	f380 8808 	msr	MSP, r0
 8004e22:	f04f 0000 	mov.w	r0, #0
 8004e26:	f380 8814 	msr	CONTROL, r0
 8004e2a:	b662      	cpsie	i
 8004e2c:	b661      	cpsie	f
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	df00      	svc	0
 8004e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004e3a:	bf00      	nop
 8004e3c:	e000ed08 	.word	0xe000ed08

08004e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004e46:	4b47      	ldr	r3, [pc, #284]	@ (8004f64 <xPortStartScheduler+0x124>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a47      	ldr	r2, [pc, #284]	@ (8004f68 <xPortStartScheduler+0x128>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d10b      	bne.n	8004e68 <xPortStartScheduler+0x28>
	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	60fb      	str	r3, [r7, #12]
}
 8004e62:	bf00      	nop
 8004e64:	bf00      	nop
 8004e66:	e7fd      	b.n	8004e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004e68:	4b3e      	ldr	r3, [pc, #248]	@ (8004f64 <xPortStartScheduler+0x124>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a3f      	ldr	r2, [pc, #252]	@ (8004f6c <xPortStartScheduler+0x12c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d10b      	bne.n	8004e8a <xPortStartScheduler+0x4a>
	__asm volatile
 8004e72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e76:	f383 8811 	msr	BASEPRI, r3
 8004e7a:	f3bf 8f6f 	isb	sy
 8004e7e:	f3bf 8f4f 	dsb	sy
 8004e82:	613b      	str	r3, [r7, #16]
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	e7fd      	b.n	8004e86 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004e8a:	4b39      	ldr	r3, [pc, #228]	@ (8004f70 <xPortStartScheduler+0x130>)
 8004e8c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	22ff      	movs	r2, #255	@ 0xff
 8004e9a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004ea4:	78fb      	ldrb	r3, [r7, #3]
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	4b31      	ldr	r3, [pc, #196]	@ (8004f74 <xPortStartScheduler+0x134>)
 8004eb0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004eb2:	4b31      	ldr	r3, [pc, #196]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004eb4:	2207      	movs	r2, #7
 8004eb6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004eb8:	e009      	b.n	8004ece <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004eba:	4b2f      	ldr	r3, [pc, #188]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004ec2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004ece:	78fb      	ldrb	r3, [r7, #3]
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b80      	cmp	r3, #128	@ 0x80
 8004ed8:	d0ef      	beq.n	8004eba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004eda:	4b27      	ldr	r3, [pc, #156]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f1c3 0307 	rsb	r3, r3, #7
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d00b      	beq.n	8004efe <xPortStartScheduler+0xbe>
	__asm volatile
 8004ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004eea:	f383 8811 	msr	BASEPRI, r3
 8004eee:	f3bf 8f6f 	isb	sy
 8004ef2:	f3bf 8f4f 	dsb	sy
 8004ef6:	60bb      	str	r3, [r7, #8]
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	e7fd      	b.n	8004efa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004efe:	4b1e      	ldr	r3, [pc, #120]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	4a1c      	ldr	r2, [pc, #112]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f06:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f10:	4a19      	ldr	r2, [pc, #100]	@ (8004f78 <xPortStartScheduler+0x138>)
 8004f12:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	b2da      	uxtb	r2, r3
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004f1c:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a16      	ldr	r2, [pc, #88]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f22:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004f26:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004f28:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a13      	ldr	r2, [pc, #76]	@ (8004f7c <xPortStartScheduler+0x13c>)
 8004f2e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004f32:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004f34:	f000 f8da 	bl	80050ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004f38:	4b11      	ldr	r3, [pc, #68]	@ (8004f80 <xPortStartScheduler+0x140>)
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004f3e:	f000 f8f9 	bl	8005134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004f42:	4b10      	ldr	r3, [pc, #64]	@ (8004f84 <xPortStartScheduler+0x144>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a0f      	ldr	r2, [pc, #60]	@ (8004f84 <xPortStartScheduler+0x144>)
 8004f48:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004f4c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004f4e:	f7ff ff63 	bl	8004e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004f52:	f7fe ff2d 	bl	8003db0 <vTaskSwitchContext>
	prvTaskExitError();
 8004f56:	f7ff ff1b 	bl	8004d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004f5a:	2300      	movs	r3, #0
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	3718      	adds	r7, #24
 8004f60:	46bd      	mov	sp, r7
 8004f62:	bd80      	pop	{r7, pc}
 8004f64:	e000ed00 	.word	0xe000ed00
 8004f68:	410fc271 	.word	0x410fc271
 8004f6c:	410fc270 	.word	0x410fc270
 8004f70:	e000e400 	.word	0xe000e400
 8004f74:	20000da8 	.word	0x20000da8
 8004f78:	20000dac 	.word	0x20000dac
 8004f7c:	e000ed20 	.word	0xe000ed20
 8004f80:	2000000c 	.word	0x2000000c
 8004f84:	e000ef34 	.word	0xe000ef34

08004f88 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004fa2:	4b10      	ldr	r3, [pc, #64]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	3301      	adds	r3, #1
 8004fa8:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004faa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004fac:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <vPortEnterCritical+0x5c>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d110      	bne.n	8004fd6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004fe8 <vPortEnterCritical+0x60>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00b      	beq.n	8004fd6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fc2:	f383 8811 	msr	BASEPRI, r3
 8004fc6:	f3bf 8f6f 	isb	sy
 8004fca:	f3bf 8f4f 	dsb	sy
 8004fce:	603b      	str	r3, [r7, #0]
}
 8004fd0:	bf00      	nop
 8004fd2:	bf00      	nop
 8004fd4:	e7fd      	b.n	8004fd2 <vPortEnterCritical+0x4a>
	}
}
 8004fd6:	bf00      	nop
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	2000000c 	.word	0x2000000c
 8004fe8:	e000ed04 	.word	0xe000ed04

08004fec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004ff2:	4b12      	ldr	r3, [pc, #72]	@ (800503c <vPortExitCritical+0x50>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <vPortExitCritical+0x26>
	__asm volatile
 8004ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffe:	f383 8811 	msr	BASEPRI, r3
 8005002:	f3bf 8f6f 	isb	sy
 8005006:	f3bf 8f4f 	dsb	sy
 800500a:	607b      	str	r3, [r7, #4]
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	e7fd      	b.n	800500e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005012:	4b0a      	ldr	r3, [pc, #40]	@ (800503c <vPortExitCritical+0x50>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3b01      	subs	r3, #1
 8005018:	4a08      	ldr	r2, [pc, #32]	@ (800503c <vPortExitCritical+0x50>)
 800501a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800501c:	4b07      	ldr	r3, [pc, #28]	@ (800503c <vPortExitCritical+0x50>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d105      	bne.n	8005030 <vPortExitCritical+0x44>
 8005024:	2300      	movs	r3, #0
 8005026:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	f383 8811 	msr	BASEPRI, r3
}
 800502e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr
 800503c:	2000000c 	.word	0x2000000c

08005040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005040:	f3ef 8009 	mrs	r0, PSP
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <pxCurrentTCBConst>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	f01e 0f10 	tst.w	lr, #16
 8005050:	bf08      	it	eq
 8005052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800505a:	6010      	str	r0, [r2, #0]
 800505c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005064:	f380 8811 	msr	BASEPRI, r0
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	f3bf 8f6f 	isb	sy
 8005070:	f7fe fe9e 	bl	8003db0 <vTaskSwitchContext>
 8005074:	f04f 0000 	mov.w	r0, #0
 8005078:	f380 8811 	msr	BASEPRI, r0
 800507c:	bc09      	pop	{r0, r3}
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	6808      	ldr	r0, [r1, #0]
 8005082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005086:	f01e 0f10 	tst.w	lr, #16
 800508a:	bf08      	it	eq
 800508c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005090:	f380 8809 	msr	PSP, r0
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	f3af 8000 	nop.w

080050a0 <pxCurrentTCBConst>:
 80050a0:	2000077c 	.word	0x2000077c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80050a4:	bf00      	nop
 80050a6:	bf00      	nop

080050a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	607b      	str	r3, [r7, #4]
}
 80050c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80050c2:	f7fe fdbb 	bl	8003c3c <xTaskIncrementTick>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80050cc:	4b06      	ldr	r3, [pc, #24]	@ (80050e8 <xPortSysTickHandler+0x40>)
 80050ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050d2:	601a      	str	r2, [r3, #0]
 80050d4:	2300      	movs	r3, #0
 80050d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	f383 8811 	msr	BASEPRI, r3
}
 80050de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80050e0:	bf00      	nop
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}
 80050e8:	e000ed04 	.word	0xe000ed04

080050ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <vPortSetupTimerInterrupt+0x34>)
 80050f2:	2200      	movs	r2, #0
 80050f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80050f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <vPortSetupTimerInterrupt+0x38>)
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80050fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005128 <vPortSetupTimerInterrupt+0x3c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a0a      	ldr	r2, [pc, #40]	@ (800512c <vPortSetupTimerInterrupt+0x40>)
 8005102:	fba2 2303 	umull	r2, r3, r2, r3
 8005106:	099b      	lsrs	r3, r3, #6
 8005108:	4a09      	ldr	r2, [pc, #36]	@ (8005130 <vPortSetupTimerInterrupt+0x44>)
 800510a:	3b01      	subs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800510e:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <vPortSetupTimerInterrupt+0x34>)
 8005110:	2207      	movs	r2, #7
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	bf00      	nop
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	e000e010 	.word	0xe000e010
 8005124:	e000e018 	.word	0xe000e018
 8005128:	20000000 	.word	0x20000000
 800512c:	10624dd3 	.word	0x10624dd3
 8005130:	e000e014 	.word	0xe000e014

08005134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005144 <vPortEnableVFP+0x10>
 8005138:	6801      	ldr	r1, [r0, #0]
 800513a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800513e:	6001      	str	r1, [r0, #0]
 8005140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005142:	bf00      	nop
 8005144:	e000ed88 	.word	0xe000ed88

08005148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800514e:	f3ef 8305 	mrs	r3, IPSR
 8005152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2b0f      	cmp	r3, #15
 8005158:	d915      	bls.n	8005186 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800515a:	4a18      	ldr	r2, [pc, #96]	@ (80051bc <vPortValidateInterruptPriority+0x74>)
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4413      	add	r3, r2
 8005160:	781b      	ldrb	r3, [r3, #0]
 8005162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005164:	4b16      	ldr	r3, [pc, #88]	@ (80051c0 <vPortValidateInterruptPriority+0x78>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	7afa      	ldrb	r2, [r7, #11]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20b      	bcs.n	8005186 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	607b      	str	r3, [r7, #4]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005186:	4b0f      	ldr	r3, [pc, #60]	@ (80051c4 <vPortValidateInterruptPriority+0x7c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800518e:	4b0e      	ldr	r3, [pc, #56]	@ (80051c8 <vPortValidateInterruptPriority+0x80>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d90b      	bls.n	80051ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	603b      	str	r3, [r7, #0]
}
 80051a8:	bf00      	nop
 80051aa:	bf00      	nop
 80051ac:	e7fd      	b.n	80051aa <vPortValidateInterruptPriority+0x62>
	}
 80051ae:	bf00      	nop
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	e000e3f0 	.word	0xe000e3f0
 80051c0:	20000da8 	.word	0x20000da8
 80051c4:	e000ed0c 	.word	0xe000ed0c
 80051c8:	20000dac 	.word	0x20000dac

080051cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b08a      	sub	sp, #40	@ 0x28
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80051d8:	f7fe fc74 	bl	8003ac4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80051dc:	4b5c      	ldr	r3, [pc, #368]	@ (8005350 <pvPortMalloc+0x184>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80051e4:	f000 f924 	bl	8005430 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80051e8:	4b5a      	ldr	r3, [pc, #360]	@ (8005354 <pvPortMalloc+0x188>)
 80051ea:	681a      	ldr	r2, [r3, #0]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4013      	ands	r3, r2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 8095 	bne.w	8005320 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01e      	beq.n	800523a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80051fc:	2208      	movs	r2, #8
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	4413      	add	r3, r2
 8005202:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	2b00      	cmp	r3, #0
 800520c:	d015      	beq.n	800523a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f023 0307 	bic.w	r3, r3, #7
 8005214:	3308      	adds	r3, #8
 8005216:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b00      	cmp	r3, #0
 8005220:	d00b      	beq.n	800523a <pvPortMalloc+0x6e>
	__asm volatile
 8005222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005226:	f383 8811 	msr	BASEPRI, r3
 800522a:	f3bf 8f6f 	isb	sy
 800522e:	f3bf 8f4f 	dsb	sy
 8005232:	617b      	str	r3, [r7, #20]
}
 8005234:	bf00      	nop
 8005236:	bf00      	nop
 8005238:	e7fd      	b.n	8005236 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d06f      	beq.n	8005320 <pvPortMalloc+0x154>
 8005240:	4b45      	ldr	r3, [pc, #276]	@ (8005358 <pvPortMalloc+0x18c>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	429a      	cmp	r2, r3
 8005248:	d86a      	bhi.n	8005320 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800524a:	4b44      	ldr	r3, [pc, #272]	@ (800535c <pvPortMalloc+0x190>)
 800524c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800524e:	4b43      	ldr	r3, [pc, #268]	@ (800535c <pvPortMalloc+0x190>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005254:	e004      	b.n	8005260 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005258:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800525a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	429a      	cmp	r2, r3
 8005268:	d903      	bls.n	8005272 <pvPortMalloc+0xa6>
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d1f1      	bne.n	8005256 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005272:	4b37      	ldr	r3, [pc, #220]	@ (8005350 <pvPortMalloc+0x184>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	429a      	cmp	r2, r3
 800527a:	d051      	beq.n	8005320 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2208      	movs	r2, #8
 8005282:	4413      	add	r3, r2
 8005284:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800528e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	1ad2      	subs	r2, r2, r3
 8005296:	2308      	movs	r3, #8
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	429a      	cmp	r2, r3
 800529c:	d920      	bls.n	80052e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800529e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00b      	beq.n	80052c8 <pvPortMalloc+0xfc>
	__asm volatile
 80052b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052b4:	f383 8811 	msr	BASEPRI, r3
 80052b8:	f3bf 8f6f 	isb	sy
 80052bc:	f3bf 8f4f 	dsb	sy
 80052c0:	613b      	str	r3, [r7, #16]
}
 80052c2:	bf00      	nop
 80052c4:	bf00      	nop
 80052c6:	e7fd      	b.n	80052c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	1ad2      	subs	r2, r2, r3
 80052d0:	69bb      	ldr	r3, [r7, #24]
 80052d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80052d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d6:	687a      	ldr	r2, [r7, #4]
 80052d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80052da:	69b8      	ldr	r0, [r7, #24]
 80052dc:	f000 f90a 	bl	80054f4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80052e0:	4b1d      	ldr	r3, [pc, #116]	@ (8005358 <pvPortMalloc+0x18c>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	1ad3      	subs	r3, r2, r3
 80052ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005358 <pvPortMalloc+0x18c>)
 80052ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80052ee:	4b1a      	ldr	r3, [pc, #104]	@ (8005358 <pvPortMalloc+0x18c>)
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	4b1b      	ldr	r3, [pc, #108]	@ (8005360 <pvPortMalloc+0x194>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d203      	bcs.n	8005302 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80052fa:	4b17      	ldr	r3, [pc, #92]	@ (8005358 <pvPortMalloc+0x18c>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a18      	ldr	r2, [pc, #96]	@ (8005360 <pvPortMalloc+0x194>)
 8005300:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	4b13      	ldr	r3, [pc, #76]	@ (8005354 <pvPortMalloc+0x188>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	431a      	orrs	r2, r3
 800530c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005316:	4b13      	ldr	r3, [pc, #76]	@ (8005364 <pvPortMalloc+0x198>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3301      	adds	r3, #1
 800531c:	4a11      	ldr	r2, [pc, #68]	@ (8005364 <pvPortMalloc+0x198>)
 800531e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005320:	f7fe fbde 	bl	8003ae0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <pvPortMalloc+0x17a>
	__asm volatile
 800532e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005332:	f383 8811 	msr	BASEPRI, r3
 8005336:	f3bf 8f6f 	isb	sy
 800533a:	f3bf 8f4f 	dsb	sy
 800533e:	60fb      	str	r3, [r7, #12]
}
 8005340:	bf00      	nop
 8005342:	bf00      	nop
 8005344:	e7fd      	b.n	8005342 <pvPortMalloc+0x176>
	return pvReturn;
 8005346:	69fb      	ldr	r3, [r7, #28]
}
 8005348:	4618      	mov	r0, r3
 800534a:	3728      	adds	r7, #40	@ 0x28
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}
 8005350:	200049b8 	.word	0x200049b8
 8005354:	200049cc 	.word	0x200049cc
 8005358:	200049bc 	.word	0x200049bc
 800535c:	200049b0 	.word	0x200049b0
 8005360:	200049c0 	.word	0x200049c0
 8005364:	200049c4 	.word	0x200049c4

08005368 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d04f      	beq.n	800541a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800537a:	2308      	movs	r3, #8
 800537c:	425b      	negs	r3, r3
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4413      	add	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	4b25      	ldr	r3, [pc, #148]	@ (8005424 <vPortFree+0xbc>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4013      	ands	r3, r2
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10b      	bne.n	80053ae <vPortFree+0x46>
	__asm volatile
 8005396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800539a:	f383 8811 	msr	BASEPRI, r3
 800539e:	f3bf 8f6f 	isb	sy
 80053a2:	f3bf 8f4f 	dsb	sy
 80053a6:	60fb      	str	r3, [r7, #12]
}
 80053a8:	bf00      	nop
 80053aa:	bf00      	nop
 80053ac:	e7fd      	b.n	80053aa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <vPortFree+0x66>
	__asm volatile
 80053b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053ba:	f383 8811 	msr	BASEPRI, r3
 80053be:	f3bf 8f6f 	isb	sy
 80053c2:	f3bf 8f4f 	dsb	sy
 80053c6:	60bb      	str	r3, [r7, #8]
}
 80053c8:	bf00      	nop
 80053ca:	bf00      	nop
 80053cc:	e7fd      	b.n	80053ca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	685a      	ldr	r2, [r3, #4]
 80053d2:	4b14      	ldr	r3, [pc, #80]	@ (8005424 <vPortFree+0xbc>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4013      	ands	r3, r2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d01e      	beq.n	800541a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d11a      	bne.n	800541a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	685a      	ldr	r2, [r3, #4]
 80053e8:	4b0e      	ldr	r3, [pc, #56]	@ (8005424 <vPortFree+0xbc>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	43db      	mvns	r3, r3
 80053ee:	401a      	ands	r2, r3
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80053f4:	f7fe fb66 	bl	8003ac4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005428 <vPortFree+0xc0>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4413      	add	r3, r2
 8005402:	4a09      	ldr	r2, [pc, #36]	@ (8005428 <vPortFree+0xc0>)
 8005404:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005406:	6938      	ldr	r0, [r7, #16]
 8005408:	f000 f874 	bl	80054f4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800540c:	4b07      	ldr	r3, [pc, #28]	@ (800542c <vPortFree+0xc4>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	3301      	adds	r3, #1
 8005412:	4a06      	ldr	r2, [pc, #24]	@ (800542c <vPortFree+0xc4>)
 8005414:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005416:	f7fe fb63 	bl	8003ae0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800541a:	bf00      	nop
 800541c:	3718      	adds	r7, #24
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	200049cc 	.word	0x200049cc
 8005428:	200049bc 	.word	0x200049bc
 800542c:	200049c8 	.word	0x200049c8

08005430 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005436:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800543a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800543c:	4b27      	ldr	r3, [pc, #156]	@ (80054dc <prvHeapInit+0xac>)
 800543e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f003 0307 	and.w	r3, r3, #7
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00c      	beq.n	8005464 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3307      	adds	r3, #7
 800544e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0307 	bic.w	r3, r3, #7
 8005456:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	4a1f      	ldr	r2, [pc, #124]	@ (80054dc <prvHeapInit+0xac>)
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005468:	4a1d      	ldr	r2, [pc, #116]	@ (80054e0 <prvHeapInit+0xb0>)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800546e:	4b1c      	ldr	r3, [pc, #112]	@ (80054e0 <prvHeapInit+0xb0>)
 8005470:	2200      	movs	r2, #0
 8005472:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	68ba      	ldr	r2, [r7, #8]
 8005478:	4413      	add	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800547c:	2208      	movs	r2, #8
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	1a9b      	subs	r3, r3, r2
 8005482:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f023 0307 	bic.w	r3, r3, #7
 800548a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	4a15      	ldr	r2, [pc, #84]	@ (80054e4 <prvHeapInit+0xb4>)
 8005490:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005492:	4b14      	ldr	r3, [pc, #80]	@ (80054e4 <prvHeapInit+0xb4>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2200      	movs	r2, #0
 8005498:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800549a:	4b12      	ldr	r3, [pc, #72]	@ (80054e4 <prvHeapInit+0xb4>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	68fa      	ldr	r2, [r7, #12]
 80054aa:	1ad2      	subs	r2, r2, r3
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80054b0:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <prvHeapInit+0xb4>)
 80054b2:	681a      	ldr	r2, [r3, #0]
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <prvHeapInit+0xb8>)
 80054be:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	4a09      	ldr	r2, [pc, #36]	@ (80054ec <prvHeapInit+0xbc>)
 80054c6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80054c8:	4b09      	ldr	r3, [pc, #36]	@ (80054f0 <prvHeapInit+0xc0>)
 80054ca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80054ce:	601a      	str	r2, [r3, #0]
}
 80054d0:	bf00      	nop
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	20000db0 	.word	0x20000db0
 80054e0:	200049b0 	.word	0x200049b0
 80054e4:	200049b8 	.word	0x200049b8
 80054e8:	200049c0 	.word	0x200049c0
 80054ec:	200049bc 	.word	0x200049bc
 80054f0:	200049cc 	.word	0x200049cc

080054f4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80054fc:	4b28      	ldr	r3, [pc, #160]	@ (80055a0 <prvInsertBlockIntoFreeList+0xac>)
 80054fe:	60fb      	str	r3, [r7, #12]
 8005500:	e002      	b.n	8005508 <prvInsertBlockIntoFreeList+0x14>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	60fb      	str	r3, [r7, #12]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	687a      	ldr	r2, [r7, #4]
 800550e:	429a      	cmp	r2, r3
 8005510:	d8f7      	bhi.n	8005502 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4413      	add	r3, r2
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	429a      	cmp	r2, r3
 8005522:	d108      	bne.n	8005536 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	441a      	add	r2, r3
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	429a      	cmp	r2, r3
 8005548:	d118      	bne.n	800557c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	4b15      	ldr	r3, [pc, #84]	@ (80055a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	429a      	cmp	r2, r3
 8005554:	d00d      	beq.n	8005572 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685a      	ldr	r2, [r3, #4]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	441a      	add	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	e008      	b.n	8005584 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005572:	4b0c      	ldr	r3, [pc, #48]	@ (80055a4 <prvInsertBlockIntoFreeList+0xb0>)
 8005574:	681a      	ldr	r2, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	e003      	b.n	8005584 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d002      	beq.n	8005592 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005592:	bf00      	nop
 8005594:	3714      	adds	r7, #20
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	200049b0 	.word	0x200049b0
 80055a4:	200049b8 	.word	0x200049b8

080055a8 <memset>:
 80055a8:	4402      	add	r2, r0
 80055aa:	4603      	mov	r3, r0
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d100      	bne.n	80055b2 <memset+0xa>
 80055b0:	4770      	bx	lr
 80055b2:	f803 1b01 	strb.w	r1, [r3], #1
 80055b6:	e7f9      	b.n	80055ac <memset+0x4>

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	@ (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	@ (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	@ (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	@ (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 f826 	bl	800561c <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	08005714 	.word	0x08005714
 80055f4:	08005714 	.word	0x08005714
 80055f8:	08005714 	.word	0x08005714
 80055fc:	08005718 	.word	0x08005718

08005600 <memcpy>:
 8005600:	440a      	add	r2, r1
 8005602:	4291      	cmp	r1, r2
 8005604:	f100 33ff 	add.w	r3, r0, #4294967295
 8005608:	d100      	bne.n	800560c <memcpy+0xc>
 800560a:	4770      	bx	lr
 800560c:	b510      	push	{r4, lr}
 800560e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005612:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005616:	4291      	cmp	r1, r2
 8005618:	d1f9      	bne.n	800560e <memcpy+0xe>
 800561a:	bd10      	pop	{r4, pc}

0800561c <_init>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr

08005628 <_fini>:
 8005628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800562a:	bf00      	nop
 800562c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562e:	bc08      	pop	{r3}
 8005630:	469e      	mov	lr, r3
 8005632:	4770      	bx	lr
