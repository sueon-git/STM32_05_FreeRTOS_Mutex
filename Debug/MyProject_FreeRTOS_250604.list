
MyProject_FreeRTOS_250604.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005590  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005730  08005730  00006730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057f4  080057f4  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080057f4  080057f4  000067f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057fc  080057fc  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057fc  080057fc  000067fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005800  08005800  00006800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005804  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  20000060  08005864  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b68  08005864  00007b68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010fd8  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000294b  00000000  00000000  00018068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001a9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b04  00000000  00000000  0001b818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035c1  00000000  00000000  0001c31c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fda0  00000000  00000000  0001f8dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f906  00000000  00000000  0002f67d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bef83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  000befc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000080  00000000  00000000  000c2fec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005718 	.word	0x08005718

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08005718 	.word	0x08005718

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <LedBlinkTask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// LED 깜빡이는 작업을 수행할 함수
void LedBlinkTask(void *argument)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  for(;;) // 무한 루프
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // NUCLEO-F401RE의 LD2 LED (녹색) 토글
 80005c4:	2120      	movs	r1, #32
 80005c6:	4804      	ldr	r0, [pc, #16]	@ (80005d8 <LedBlinkTask+0x1c>)
 80005c8:	f000 fd93 	bl	80010f2 <HAL_GPIO_TogglePin>
    osDelay(100);                         // 0.1초 동안 작업 지연 (RTOS 방식)
 80005cc:	2064      	movs	r0, #100	@ 0x64
 80005ce:	f001 ff5f 	bl	8002490 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // NUCLEO-F401RE의 LD2 LED (녹색) 토글
 80005d2:	bf00      	nop
 80005d4:	e7f6      	b.n	80005c4 <LedBlinkTask+0x8>
 80005d6:	bf00      	nop
 80005d8:	40020000 	.word	0x40020000

080005dc <SerialPrintTask>:
  }
}

// 시리얼 포트로 메시지를 출력하는 작업을 수행할 함수
void SerialPrintTask(void *argument)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b090      	sub	sp, #64	@ 0x40
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  uint32_t counter = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  char msg_buffer[50];

  for(;;) // 무한 루프
  {
    sprintf(msg_buffer, "Task 2! Count: %lu\r\n", counter++); // 메시지 만들기
 80005e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80005ea:	1c5a      	adds	r2, r3, #1
 80005ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80005ee:	f107 0008 	add.w	r0, r7, #8
 80005f2:	461a      	mov	r2, r3
 80005f4:	490a      	ldr	r1, [pc, #40]	@ (8000620 <SerialPrintTask+0x44>)
 80005f6:	f004 fbef 	bl	8004dd8 <siprintf>

    // UART(USART2)를 통해 메시지 전송
    // huart2 핸들은 main.c 상단 또는 main.h에 선언되어 있어야 하며, MX_USART2_UART_Init()에서 초기화됩니다.
    // CubeMX 설정 시 USART2를 활성화했다면 자동으로 생성됩니다.
    HAL_UART_Transmit(&huart2, (uint8_t*)msg_buffer, strlen(msg_buffer), 100); // 100ms 타임아웃
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	4618      	mov	r0, r3
 8000600:	f7ff fdee 	bl	80001e0 <strlen>
 8000604:	4603      	mov	r3, r0
 8000606:	b29a      	uxth	r2, r3
 8000608:	f107 0108 	add.w	r1, r7, #8
 800060c:	2364      	movs	r3, #100	@ 0x64
 800060e:	4805      	ldr	r0, [pc, #20]	@ (8000624 <SerialPrintTask+0x48>)
 8000610:	f001 fa72 	bl	8001af8 <HAL_UART_Transmit>

    osDelay(1000); // 1초(1000ms) 간격으로 메시지 전송
 8000614:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000618:	f001 ff3a 	bl	8002490 <osDelay>
    sprintf(msg_buffer, "Task 2! Count: %lu\r\n", counter++); // 메시지 만들기
 800061c:	bf00      	nop
 800061e:	e7e3      	b.n	80005e8 <SerialPrintTask+0xc>
 8000620:	0800573c 	.word	0x0800573c
 8000624:	2000007c 	.word	0x2000007c

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b092      	sub	sp, #72	@ 0x48
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fa6b 	bl	8000b08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f849 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8dd 	bl	80007f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063a:	f000 f8b1 	bl	80007a0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063e:	f001 fe4b 	bl	80022d8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000642:	4a1a      	ldr	r2, [pc, #104]	@ (80006ac <main+0x84>)
 8000644:	2100      	movs	r1, #0
 8000646:	481a      	ldr	r0, [pc, #104]	@ (80006b0 <main+0x88>)
 8000648:	f001 fe90 	bl	800236c <osThreadNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a19      	ldr	r2, [pc, #100]	@ (80006b4 <main+0x8c>)
 8000650:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  // LedBlinkTask를 위한 속성 정의 및 생성
  const osThreadAttr_t ledBlinkTask_attributes = {
 8000652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000656:	2224      	movs	r2, #36	@ 0x24
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fbde 	bl	8004e1c <memset>
 8000660:	4b15      	ldr	r3, [pc, #84]	@ (80006b8 <main+0x90>)
 8000662:	627b      	str	r3, [r7, #36]	@ 0x24
 8000664:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000668:	63bb      	str	r3, [r7, #56]	@ 0x38
 800066a:	2318      	movs	r3, #24
 800066c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    .name = "LedBlink",
    .stack_size = 128 * 4, // 512 바이트
    .priority = (osPriority_t) osPriorityNormal,
  };
  osThreadNew(LedBlinkTask, NULL, &ledBlinkTask_attributes);
 800066e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000672:	461a      	mov	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	4811      	ldr	r0, [pc, #68]	@ (80006bc <main+0x94>)
 8000678:	f001 fe78 	bl	800236c <osThreadNew>

  // SerialPrintTask를 위한 속성 정의 및 생성
  const osThreadAttr_t serialPrintTask_attributes = {
 800067c:	463b      	mov	r3, r7
 800067e:	2224      	movs	r2, #36	@ 0x24
 8000680:	2100      	movs	r1, #0
 8000682:	4618      	mov	r0, r3
 8000684:	f004 fbca 	bl	8004e1c <memset>
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <main+0x98>)
 800068a:	603b      	str	r3, [r7, #0]
 800068c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	2318      	movs	r3, #24
 8000694:	61bb      	str	r3, [r7, #24]
    .name = "SerialPrint",
    .stack_size = 128 * 4, // sprintf 등을 사용하므로 충분히 할당 (512 바이트)
    .priority = (osPriority_t) osPriorityNormal,
  };
  osThreadNew(SerialPrintTask, NULL, &serialPrintTask_attributes);
 8000696:	463b      	mov	r3, r7
 8000698:	461a      	mov	r2, r3
 800069a:	2100      	movs	r1, #0
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <main+0x9c>)
 800069e:	f001 fe65 	bl	800236c <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006a2:	f001 fe3d 	bl	8002320 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006a6:	bf00      	nop
 80006a8:	e7fd      	b.n	80006a6 <main+0x7e>
 80006aa:	bf00      	nop
 80006ac:	08005784 	.word	0x08005784
 80006b0:	080008d1 	.word	0x080008d1
 80006b4:	200000c4 	.word	0x200000c4
 80006b8:	08005754 	.word	0x08005754
 80006bc:	080005bd 	.word	0x080005bd
 80006c0:	08005760 	.word	0x08005760
 80006c4:	080005dd 	.word	0x080005dd

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f004 fba0 	bl	8004e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b29      	ldr	r3, [pc, #164]	@ (8000798 <SystemClock_Config+0xd0>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a28      	ldr	r2, [pc, #160]	@ (8000798 <SystemClock_Config+0xd0>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b26      	ldr	r3, [pc, #152]	@ (8000798 <SystemClock_Config+0xd0>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b23      	ldr	r3, [pc, #140]	@ (800079c <SystemClock_Config+0xd4>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000714:	4a21      	ldr	r2, [pc, #132]	@ (800079c <SystemClock_Config+0xd4>)
 8000716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800071a:	6013      	str	r3, [r2, #0]
 800071c:	4b1f      	ldr	r3, [pc, #124]	@ (800079c <SystemClock_Config+0xd4>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000728:	2302      	movs	r3, #2
 800072a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000730:	2310      	movs	r3, #16
 8000732:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000734:	2302      	movs	r3, #2
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000738:	2300      	movs	r3, #0
 800073a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800073c:	2310      	movs	r3, #16
 800073e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000740:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000744:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000746:	2304      	movs	r3, #4
 8000748:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800074a:	2307      	movs	r3, #7
 800074c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800074e:	f107 0320 	add.w	r3, r7, #32
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fce8 	bl	8001128 <HAL_RCC_OscConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800075e:	f000 f8bf 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000762:	230f      	movs	r3, #15
 8000764:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000766:	2302      	movs	r3, #2
 8000768:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800076e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000772:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2102      	movs	r1, #2
 800077e:	4618      	mov	r0, r3
 8000780:	f000 ff4a 	bl	8001618 <HAL_RCC_ClockConfig>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800078a:	f000 f8a9 	bl	80008e0 <Error_Handler>
  }
}
 800078e:	bf00      	nop
 8000790:	3750      	adds	r7, #80	@ 0x50
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	40023800 	.word	0x40023800
 800079c:	40007000 	.word	0x40007000

080007a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007a4:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007a6:	4a12      	ldr	r2, [pc, #72]	@ (80007f0 <MX_USART2_UART_Init+0x50>)
 80007a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007aa:	4b10      	ldr	r3, [pc, #64]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007c4:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007c6:	220c      	movs	r2, #12
 80007c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007d0:	4b06      	ldr	r3, [pc, #24]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_USART2_UART_Init+0x4c>)
 80007d8:	f001 f93e 	bl	8001a58 <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007e2:	f000 f87d 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000007c 	.word	0x2000007c
 80007f0:	40004400 	.word	0x40004400

080007f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b08a      	sub	sp, #40	@ 0x28
 80007f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b2d      	ldr	r3, [pc, #180]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a2c      	ldr	r2, [pc, #176]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b2a      	ldr	r3, [pc, #168]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b26      	ldr	r3, [pc, #152]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a25      	ldr	r2, [pc, #148]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b23      	ldr	r3, [pc, #140]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b1f      	ldr	r3, [pc, #124]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a1e      	ldr	r2, [pc, #120]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b1c      	ldr	r3, [pc, #112]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b18      	ldr	r3, [pc, #96]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a17      	ldr	r2, [pc, #92]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0302 	orr.w	r3, r3, #2
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b15      	ldr	r3, [pc, #84]	@ (80008c4 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0302 	and.w	r3, r3, #2
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2120      	movs	r1, #32
 800087e:	4812      	ldr	r0, [pc, #72]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 8000880:	f000 fc1e 	bl	80010c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	480c      	ldr	r0, [pc, #48]	@ (80008cc <MX_GPIO_Init+0xd8>)
 800089c:	f000 fa8c 	bl	8000db8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008a0:	2320      	movs	r3, #32
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <MX_GPIO_Init+0xd4>)
 80008b8:	f000 fa7e 	bl	8000db8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80008bc:	bf00      	nop
 80008be:	3728      	adds	r7, #40	@ 0x28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020000 	.word	0x40020000
 80008cc:	40020800 	.word	0x40020800

080008d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008d8:	2001      	movs	r0, #1
 80008da:	f001 fdd9 	bl	8002490 <osDelay>
 80008de:	e7fb      	b.n	80008d8 <StartDefaultTask+0x8>

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <HAL_MspInit+0x54>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a11      	ldr	r2, [pc, #68]	@ (8000940 <HAL_MspInit+0x54>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <HAL_MspInit+0x54>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <HAL_MspInit+0x54>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a0a      	ldr	r2, [pc, #40]	@ (8000940 <HAL_MspInit+0x54>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <HAL_MspInit+0x54>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800092a:	2200      	movs	r2, #0
 800092c:	210f      	movs	r1, #15
 800092e:	f06f 0001 	mvn.w	r0, #1
 8000932:	f000 fa18 	bl	8000d66 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40023800 	.word	0x40023800

08000944 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	@ 0x28
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800094c:	f107 0314 	add.w	r3, r7, #20
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
 8000954:	605a      	str	r2, [r3, #4]
 8000956:	609a      	str	r2, [r3, #8]
 8000958:	60da      	str	r2, [r3, #12]
 800095a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a19      	ldr	r2, [pc, #100]	@ (80009c8 <HAL_UART_MspInit+0x84>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d12b      	bne.n	80009be <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	613b      	str	r3, [r7, #16]
 800096a:	4b18      	ldr	r3, [pc, #96]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096e:	4a17      	ldr	r2, [pc, #92]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000974:	6413      	str	r3, [r2, #64]	@ 0x40
 8000976:	4b15      	ldr	r3, [pc, #84]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	4b11      	ldr	r3, [pc, #68]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800098a:	4a10      	ldr	r2, [pc, #64]	@ (80009cc <HAL_UART_MspInit+0x88>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6313      	str	r3, [r2, #48]	@ 0x30
 8000992:	4b0e      	ldr	r3, [pc, #56]	@ (80009cc <HAL_UART_MspInit+0x88>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
 800099c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800099e:	230c      	movs	r3, #12
 80009a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009ae:	2307      	movs	r3, #7
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4805      	ldr	r0, [pc, #20]	@ (80009d0 <HAL_UART_MspInit+0x8c>)
 80009ba:	f000 f9fd 	bl	8000db8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	@ 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40004400 	.word	0x40004400
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020000 	.word	0x40020000

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <NMI_Handler+0x4>

080009dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e0:	bf00      	nop
 80009e2:	e7fd      	b.n	80009e0 <HardFault_Handler+0x4>

080009e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e8:	bf00      	nop
 80009ea:	e7fd      	b.n	80009e8 <MemManage_Handler+0x4>

080009ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009f0:	bf00      	nop
 80009f2:	e7fd      	b.n	80009f0 <BusFault_Handler+0x4>

080009f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f8:	bf00      	nop
 80009fa:	e7fd      	b.n	80009f8 <UsageFault_Handler+0x4>

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0e:	f000 f8cd 	bl	8000bac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a12:	f003 f965 	bl	8003ce0 <xTaskGetSchedulerState>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d001      	beq.n	8000a20 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a1c:	f003 ff5c 	bl	80048d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b086      	sub	sp, #24
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a2c:	4a14      	ldr	r2, [pc, #80]	@ (8000a80 <_sbrk+0x5c>)
 8000a2e:	4b15      	ldr	r3, [pc, #84]	@ (8000a84 <_sbrk+0x60>)
 8000a30:	1ad3      	subs	r3, r2, r3
 8000a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a38:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <_sbrk+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d102      	bne.n	8000a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a40:	4b11      	ldr	r3, [pc, #68]	@ (8000a88 <_sbrk+0x64>)
 8000a42:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <_sbrk+0x68>)
 8000a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a46:	4b10      	ldr	r3, [pc, #64]	@ (8000a88 <_sbrk+0x64>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4413      	add	r3, r2
 8000a4e:	693a      	ldr	r2, [r7, #16]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d207      	bcs.n	8000a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a54:	f004 f9ea 	bl	8004e2c <__errno>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	220c      	movs	r2, #12
 8000a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a62:	e009      	b.n	8000a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <_sbrk+0x64>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	@ (8000a88 <_sbrk+0x64>)
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4413      	add	r3, r2
 8000a72:	4a05      	ldr	r2, [pc, #20]	@ (8000a88 <_sbrk+0x64>)
 8000a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20018000 	.word	0x20018000
 8000a84:	00000400 	.word	0x00000400
 8000a88:	200000c8 	.word	0x200000c8
 8000a8c:	20004b68 	.word	0x20004b68

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	@ (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	@ (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000aec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ab8:	f7ff ffea 	bl	8000a90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000abc:	480c      	ldr	r0, [pc, #48]	@ (8000af0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000abe:	490d      	ldr	r1, [pc, #52]	@ (8000af4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ac0:	4a0d      	ldr	r2, [pc, #52]	@ (8000af8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ac2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac4:	e002      	b.n	8000acc <LoopCopyDataInit>

08000ac6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aca:	3304      	adds	r3, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000acc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ace:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad0:	d3f9      	bcc.n	8000ac6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad4:	4c0a      	ldr	r4, [pc, #40]	@ (8000b00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad8:	e001      	b.n	8000ade <LoopFillZerobss>

08000ada <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ada:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000adc:	3204      	adds	r2, #4

08000ade <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ade:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae0:	d3fb      	bcc.n	8000ada <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f004 f9a9 	bl	8004e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fd9f 	bl	8000628 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000aec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000af8:	08005804 	.word	0x08005804
  ldr r2, =_sbss
 8000afc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000b00:	20004b68 	.word	0x20004b68

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	@ (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	@ (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	@ (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f90d 	bl	8000d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	200f      	movs	r0, #15
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fed6 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	@ (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 f917 	bl	8000d9e <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 f8ed 	bl	8000d66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	@ (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	@ (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	200000cc 	.word	0x200000cc

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	200000cc 	.word	0x200000cc

08000bec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b085      	sub	sp, #20
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	f003 0307 	and.w	r3, r3, #7
 8000bfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c02:	68ba      	ldr	r2, [r7, #8]
 8000c04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c08:	4013      	ands	r3, r2
 8000c0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1e:	4a04      	ldr	r2, [pc, #16]	@ (8000c30 <__NVIC_SetPriorityGrouping+0x44>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	60d3      	str	r3, [r2, #12]
}
 8000c24:	bf00      	nop
 8000c26:	3714      	adds	r7, #20
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c38:	4b04      	ldr	r3, [pc, #16]	@ (8000c4c <__NVIC_GetPriorityGrouping+0x18>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	0a1b      	lsrs	r3, r3, #8
 8000c3e:	f003 0307 	and.w	r3, r3, #7
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000ed00 	.word	0xe000ed00

08000c50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	6039      	str	r1, [r7, #0]
 8000c5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db0a      	blt.n	8000c7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	b2da      	uxtb	r2, r3
 8000c68:	490c      	ldr	r1, [pc, #48]	@ (8000c9c <__NVIC_SetPriority+0x4c>)
 8000c6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6e:	0112      	lsls	r2, r2, #4
 8000c70:	b2d2      	uxtb	r2, r2
 8000c72:	440b      	add	r3, r1
 8000c74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c78:	e00a      	b.n	8000c90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	b2da      	uxtb	r2, r3
 8000c7e:	4908      	ldr	r1, [pc, #32]	@ (8000ca0 <__NVIC_SetPriority+0x50>)
 8000c80:	79fb      	ldrb	r3, [r7, #7]
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	3b04      	subs	r3, #4
 8000c88:	0112      	lsls	r2, r2, #4
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	440b      	add	r3, r1
 8000c8e:	761a      	strb	r2, [r3, #24]
}
 8000c90:	bf00      	nop
 8000c92:	370c      	adds	r7, #12
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000e100 	.word	0xe000e100
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b089      	sub	sp, #36	@ 0x24
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f003 0307 	and.w	r3, r3, #7
 8000cb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	f1c3 0307 	rsb	r3, r3, #7
 8000cbe:	2b04      	cmp	r3, #4
 8000cc0:	bf28      	it	cs
 8000cc2:	2304      	movcs	r3, #4
 8000cc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3304      	adds	r3, #4
 8000cca:	2b06      	cmp	r3, #6
 8000ccc:	d902      	bls.n	8000cd4 <NVIC_EncodePriority+0x30>
 8000cce:	69fb      	ldr	r3, [r7, #28]
 8000cd0:	3b03      	subs	r3, #3
 8000cd2:	e000      	b.n	8000cd6 <NVIC_EncodePriority+0x32>
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	401a      	ands	r2, r3
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cec:	f04f 31ff 	mov.w	r1, #4294967295
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf6:	43d9      	mvns	r1, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cfc:	4313      	orrs	r3, r2
         );
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3724      	adds	r7, #36	@ 0x24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr
	...

08000d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3b01      	subs	r3, #1
 8000d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d1c:	d301      	bcc.n	8000d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1e:	2301      	movs	r3, #1
 8000d20:	e00f      	b.n	8000d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d22:	4a0a      	ldr	r2, [pc, #40]	@ (8000d4c <SysTick_Config+0x40>)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d2a:	210f      	movs	r1, #15
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f7ff ff8e 	bl	8000c50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d34:	4b05      	ldr	r3, [pc, #20]	@ (8000d4c <SysTick_Config+0x40>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d3a:	4b04      	ldr	r3, [pc, #16]	@ (8000d4c <SysTick_Config+0x40>)
 8000d3c:	2207      	movs	r2, #7
 8000d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3708      	adds	r7, #8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff ff47 	bl	8000bec <__NVIC_SetPriorityGrouping>
}
 8000d5e:	bf00      	nop
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b086      	sub	sp, #24
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	60b9      	str	r1, [r7, #8]
 8000d70:	607a      	str	r2, [r7, #4]
 8000d72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d78:	f7ff ff5c 	bl	8000c34 <__NVIC_GetPriorityGrouping>
 8000d7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68b9      	ldr	r1, [r7, #8]
 8000d82:	6978      	ldr	r0, [r7, #20]
 8000d84:	f7ff ff8e 	bl	8000ca4 <NVIC_EncodePriority>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8e:	4611      	mov	r1, r2
 8000d90:	4618      	mov	r0, r3
 8000d92:	f7ff ff5d 	bl	8000c50 <__NVIC_SetPriority>
}
 8000d96:	bf00      	nop
 8000d98:	3718      	adds	r7, #24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b082      	sub	sp, #8
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f7ff ffb0 	bl	8000d0c <SysTick_Config>
 8000dac:	4603      	mov	r3, r0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
	...

08000db8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b089      	sub	sp, #36	@ 0x24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dce:	2300      	movs	r3, #0
 8000dd0:	61fb      	str	r3, [r7, #28]
 8000dd2:	e159      	b.n	8001088 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	4013      	ands	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	f040 8148 	bne.w	8001082 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	f003 0303 	and.w	r3, r3, #3
 8000dfa:	2b01      	cmp	r3, #1
 8000dfc:	d005      	beq.n	8000e0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d130      	bne.n	8000e6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	689b      	ldr	r3, [r3, #8]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	2203      	movs	r2, #3
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	43db      	mvns	r3, r3
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	4013      	ands	r3, r2
 8000e20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e22:	683b      	ldr	r3, [r7, #0]
 8000e24:	68da      	ldr	r2, [r3, #12]
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e40:	2201      	movs	r2, #1
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	091b      	lsrs	r3, r3, #4
 8000e56:	f003 0201 	and.w	r2, r3, #1
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d017      	beq.n	8000ea8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	68db      	ldr	r3, [r3, #12]
 8000e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b02      	cmp	r3, #2
 8000eb2:	d123      	bne.n	8000efc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	f003 0307 	and.w	r3, r3, #7
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691a      	ldr	r2, [r3, #16]
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0307 	and.w	r3, r3, #7
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	08da      	lsrs	r2, r3, #3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3208      	adds	r2, #8
 8000ef6:	69b9      	ldr	r1, [r7, #24]
 8000ef8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	2203      	movs	r2, #3
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	f003 0203 	and.w	r2, r3, #3
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a2 	beq.w	8001082 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	4b57      	ldr	r3, [pc, #348]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f46:	4a56      	ldr	r2, [pc, #344]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f4e:	4b54      	ldr	r3, [pc, #336]	@ (80010a0 <HAL_GPIO_Init+0x2e8>)
 8000f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f5a:	4a52      	ldr	r2, [pc, #328]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f68:	69fb      	ldr	r3, [r7, #28]
 8000f6a:	f003 0303 	and.w	r3, r3, #3
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	220f      	movs	r2, #15
 8000f72:	fa02 f303 	lsl.w	r3, r2, r3
 8000f76:	43db      	mvns	r3, r3
 8000f78:	69ba      	ldr	r2, [r7, #24]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a49      	ldr	r2, [pc, #292]	@ (80010a8 <HAL_GPIO_Init+0x2f0>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d019      	beq.n	8000fba <HAL_GPIO_Init+0x202>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a48      	ldr	r2, [pc, #288]	@ (80010ac <HAL_GPIO_Init+0x2f4>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d013      	beq.n	8000fb6 <HAL_GPIO_Init+0x1fe>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a47      	ldr	r2, [pc, #284]	@ (80010b0 <HAL_GPIO_Init+0x2f8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d00d      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fa>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a46      	ldr	r2, [pc, #280]	@ (80010b4 <HAL_GPIO_Init+0x2fc>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d007      	beq.n	8000fae <HAL_GPIO_Init+0x1f6>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a45      	ldr	r2, [pc, #276]	@ (80010b8 <HAL_GPIO_Init+0x300>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d101      	bne.n	8000faa <HAL_GPIO_Init+0x1f2>
 8000fa6:	2304      	movs	r3, #4
 8000fa8:	e008      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000faa:	2307      	movs	r3, #7
 8000fac:	e006      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e004      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb2:	2302      	movs	r3, #2
 8000fb4:	e002      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	e000      	b.n	8000fbc <HAL_GPIO_Init+0x204>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	69fa      	ldr	r2, [r7, #28]
 8000fbe:	f002 0203 	and.w	r2, r2, #3
 8000fc2:	0092      	lsls	r2, r2, #2
 8000fc4:	4093      	lsls	r3, r2
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fcc:	4935      	ldr	r1, [pc, #212]	@ (80010a4 <HAL_GPIO_Init+0x2ec>)
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	089b      	lsrs	r3, r3, #2
 8000fd2:	3302      	adds	r3, #2
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8000fdc:	689b      	ldr	r3, [r3, #8]
 8000fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	43db      	mvns	r3, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4013      	ands	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d003      	beq.n	8000ffe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff6:	69ba      	ldr	r2, [r7, #24]
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001004:	4b2d      	ldr	r3, [pc, #180]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	43db      	mvns	r3, r3
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	4013      	ands	r3, r2
 8001012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d003      	beq.n	8001028 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001028:	4a24      	ldr	r2, [pc, #144]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800102e:	4b23      	ldr	r3, [pc, #140]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001030:	685b      	ldr	r3, [r3, #4]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001046:	2b00      	cmp	r3, #0
 8001048:	d003      	beq.n	8001052 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001052:	4a1a      	ldr	r2, [pc, #104]	@ (80010bc <HAL_GPIO_Init+0x304>)
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001058:	4b18      	ldr	r3, [pc, #96]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d003      	beq.n	800107c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800107c:	4a0f      	ldr	r2, [pc, #60]	@ (80010bc <HAL_GPIO_Init+0x304>)
 800107e:	69bb      	ldr	r3, [r7, #24]
 8001080:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3301      	adds	r3, #1
 8001086:	61fb      	str	r3, [r7, #28]
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	2b0f      	cmp	r3, #15
 800108c:	f67f aea2 	bls.w	8000dd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001090:	bf00      	nop
 8001092:	bf00      	nop
 8001094:	3724      	adds	r7, #36	@ 0x24
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40013800 	.word	0x40013800
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40021000 	.word	0x40021000
 80010bc:	40013c00 	.word	0x40013c00

080010c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	460b      	mov	r3, r1
 80010ca:	807b      	strh	r3, [r7, #2]
 80010cc:	4613      	mov	r3, r2
 80010ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010d0:	787b      	ldrb	r3, [r7, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d003      	beq.n	80010de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010d6:	887a      	ldrh	r2, [r7, #2]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010dc:	e003      	b.n	80010e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010de:	887b      	ldrh	r3, [r7, #2]
 80010e0:	041a      	lsls	r2, r3, #16
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	619a      	str	r2, [r3, #24]
}
 80010e6:	bf00      	nop
 80010e8:	370c      	adds	r7, #12
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr

080010f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010f2:	b480      	push	{r7}
 80010f4:	b085      	sub	sp, #20
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
 80010fa:	460b      	mov	r3, r1
 80010fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	695b      	ldr	r3, [r3, #20]
 8001102:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001104:	887a      	ldrh	r2, [r7, #2]
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4013      	ands	r3, r2
 800110a:	041a      	lsls	r2, r3, #16
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43d9      	mvns	r1, r3
 8001110:	887b      	ldrh	r3, [r7, #2]
 8001112:	400b      	ands	r3, r1
 8001114:	431a      	orrs	r2, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	619a      	str	r2, [r3, #24]
}
 800111a:	bf00      	nop
 800111c:	3714      	adds	r7, #20
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d101      	bne.n	800113a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	e267      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d075      	beq.n	8001232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001146:	4b88      	ldr	r3, [pc, #544]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	f003 030c 	and.w	r3, r3, #12
 800114e:	2b04      	cmp	r3, #4
 8001150:	d00c      	beq.n	800116c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001152:	4b85      	ldr	r3, [pc, #532]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800115a:	2b08      	cmp	r3, #8
 800115c:	d112      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4b82      	ldr	r3, [pc, #520]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800116a:	d10b      	bne.n	8001184 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800116c:	4b7e      	ldr	r3, [pc, #504]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d05b      	beq.n	8001230 <HAL_RCC_OscConfig+0x108>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d157      	bne.n	8001230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001180:	2301      	movs	r3, #1
 8001182:	e242      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800118c:	d106      	bne.n	800119c <HAL_RCC_OscConfig+0x74>
 800118e:	4b76      	ldr	r3, [pc, #472]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a75      	ldr	r2, [pc, #468]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001198:	6013      	str	r3, [r2, #0]
 800119a:	e01d      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80011a4:	d10c      	bne.n	80011c0 <HAL_RCC_OscConfig+0x98>
 80011a6:	4b70      	ldr	r3, [pc, #448]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80011b0:	6013      	str	r3, [r2, #0]
 80011b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e00b      	b.n	80011d8 <HAL_RCC_OscConfig+0xb0>
 80011c0:	4b69      	ldr	r3, [pc, #420]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a68      	ldr	r2, [pc, #416]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80011ca:	6013      	str	r3, [r2, #0]
 80011cc:	4b66      	ldr	r3, [pc, #408]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a65      	ldr	r2, [pc, #404]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d013      	beq.n	8001208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e0:	f7ff fcf8 	bl	8000bd4 <HAL_GetTick>
 80011e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e6:	e008      	b.n	80011fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011e8:	f7ff fcf4 	bl	8000bd4 <HAL_GetTick>
 80011ec:	4602      	mov	r2, r0
 80011ee:	693b      	ldr	r3, [r7, #16]
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	2b64      	cmp	r3, #100	@ 0x64
 80011f4:	d901      	bls.n	80011fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80011f6:	2303      	movs	r3, #3
 80011f8:	e207      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0f0      	beq.n	80011e8 <HAL_RCC_OscConfig+0xc0>
 8001206:	e014      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001208:	f7ff fce4 	bl	8000bd4 <HAL_GetTick>
 800120c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120e:	e008      	b.n	8001222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001210:	f7ff fce0 	bl	8000bd4 <HAL_GetTick>
 8001214:	4602      	mov	r2, r0
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	2b64      	cmp	r3, #100	@ 0x64
 800121c:	d901      	bls.n	8001222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e1f3      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001222:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f0      	bne.n	8001210 <HAL_RCC_OscConfig+0xe8>
 800122e:	e000      	b.n	8001232 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	2b00      	cmp	r3, #0
 800123c:	d063      	beq.n	8001306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800123e:	4b4a      	ldr	r3, [pc, #296]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
 8001246:	2b00      	cmp	r3, #0
 8001248:	d00b      	beq.n	8001262 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001252:	2b08      	cmp	r3, #8
 8001254:	d11c      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b44      	ldr	r3, [pc, #272]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d116      	bne.n	8001290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001262:	4b41      	ldr	r3, [pc, #260]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d005      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d001      	beq.n	800127a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e1c7      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	691b      	ldr	r3, [r3, #16]
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4937      	ldr	r1, [pc, #220]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 800128a:	4313      	orrs	r3, r2
 800128c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128e:	e03a      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001298:	4b34      	ldr	r3, [pc, #208]	@ (800136c <HAL_RCC_OscConfig+0x244>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129e:	f7ff fc99 	bl	8000bd4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc95 	bl	8000bd4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1a8      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012c4:	4b28      	ldr	r3, [pc, #160]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691b      	ldr	r3, [r3, #16]
 80012d0:	00db      	lsls	r3, r3, #3
 80012d2:	4925      	ldr	r1, [pc, #148]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e015      	b.n	8001306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012da:	4b24      	ldr	r3, [pc, #144]	@ (800136c <HAL_RCC_OscConfig+0x244>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fc78 	bl	8000bd4 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80012e8:	f7ff fc74 	bl	8000bd4 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e187      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0302 	and.w	r3, r3, #2
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0308 	and.w	r3, r3, #8
 800130e:	2b00      	cmp	r3, #0
 8001310:	d036      	beq.n	8001380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d016      	beq.n	8001348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800131a:	4b15      	ldr	r3, [pc, #84]	@ (8001370 <HAL_RCC_OscConfig+0x248>)
 800131c:	2201      	movs	r2, #1
 800131e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001320:	f7ff fc58 	bl	8000bd4 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fc54 	bl	8000bd4 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e167      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <HAL_RCC_OscConfig+0x240>)
 800133c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d0f0      	beq.n	8001328 <HAL_RCC_OscConfig+0x200>
 8001346:	e01b      	b.n	8001380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001348:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <HAL_RCC_OscConfig+0x248>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800134e:	f7ff fc41 	bl	8000bd4 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001354:	e00e      	b.n	8001374 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fc3d 	bl	8000bd4 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d907      	bls.n	8001374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e150      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
 8001368:	40023800 	.word	0x40023800
 800136c:	42470000 	.word	0x42470000
 8001370:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1ea      	bne.n	8001356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 8097 	beq.w	80014bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b81      	ldr	r3, [pc, #516]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b7d      	ldr	r3, [pc, #500]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	4a7c      	ldr	r2, [pc, #496]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ae:	4b7a      	ldr	r3, [pc, #488]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b77      	ldr	r3, [pc, #476]	@ (800159c <HAL_RCC_OscConfig+0x474>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d118      	bne.n	80013fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b74      	ldr	r3, [pc, #464]	@ (800159c <HAL_RCC_OscConfig+0x474>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a73      	ldr	r2, [pc, #460]	@ (800159c <HAL_RCC_OscConfig+0x474>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fbfd 	bl	8000bd4 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fbf9 	bl	8000bd4 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e10c      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b6a      	ldr	r3, [pc, #424]	@ (800159c <HAL_RCC_OscConfig+0x474>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d106      	bne.n	8001412 <HAL_RCC_OscConfig+0x2ea>
 8001404:	4b64      	ldr	r3, [pc, #400]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001408:	4a63      	ldr	r2, [pc, #396]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 800140a:	f043 0301 	orr.w	r3, r3, #1
 800140e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001410:	e01c      	b.n	800144c <HAL_RCC_OscConfig+0x324>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2b05      	cmp	r3, #5
 8001418:	d10c      	bne.n	8001434 <HAL_RCC_OscConfig+0x30c>
 800141a:	4b5f      	ldr	r3, [pc, #380]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 800141c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800141e:	4a5e      	ldr	r2, [pc, #376]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6713      	str	r3, [r2, #112]	@ 0x70
 8001426:	4b5c      	ldr	r3, [pc, #368]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800142a:	4a5b      	ldr	r2, [pc, #364]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6713      	str	r3, [r2, #112]	@ 0x70
 8001432:	e00b      	b.n	800144c <HAL_RCC_OscConfig+0x324>
 8001434:	4b58      	ldr	r3, [pc, #352]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001438:	4a57      	ldr	r2, [pc, #348]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 800143a:	f023 0301 	bic.w	r3, r3, #1
 800143e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001440:	4b55      	ldr	r3, [pc, #340]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001444:	4a54      	ldr	r2, [pc, #336]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001446:	f023 0304 	bic.w	r3, r3, #4
 800144a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d015      	beq.n	8001480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001454:	f7ff fbbe 	bl	8000bd4 <HAL_GetTick>
 8001458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800145a:	e00a      	b.n	8001472 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800145c:	f7ff fbba 	bl	8000bd4 <HAL_GetTick>
 8001460:	4602      	mov	r2, r0
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800146a:	4293      	cmp	r3, r2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e0cb      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001472:	4b49      	ldr	r3, [pc, #292]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0ee      	beq.n	800145c <HAL_RCC_OscConfig+0x334>
 800147e:	e014      	b.n	80014aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001480:	f7ff fba8 	bl	8000bd4 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001486:	e00a      	b.n	800149e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001488:	f7ff fba4 	bl	8000bd4 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001496:	4293      	cmp	r3, r2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e0b5      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1ee      	bne.n	8001488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d105      	bne.n	80014bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b4:	4a38      	ldr	r2, [pc, #224]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80014b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80014ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	f000 80a1 	beq.w	8001608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014c6:	4b34      	ldr	r3, [pc, #208]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	2b08      	cmp	r3, #8
 80014d0:	d05c      	beq.n	800158c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	699b      	ldr	r3, [r3, #24]
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d141      	bne.n	800155e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014da:	4b31      	ldr	r3, [pc, #196]	@ (80015a0 <HAL_RCC_OscConfig+0x478>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014e0:	f7ff fb78 	bl	8000bd4 <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e8:	f7ff fb74 	bl	8000bd4 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e087      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014fa:	4b27      	ldr	r3, [pc, #156]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1f0      	bne.n	80014e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001514:	019b      	lsls	r3, r3, #6
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800151c:	085b      	lsrs	r3, r3, #1
 800151e:	3b01      	subs	r3, #1
 8001520:	041b      	lsls	r3, r3, #16
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001528:	061b      	lsls	r3, r3, #24
 800152a:	491b      	ldr	r1, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 800152c:	4313      	orrs	r3, r2
 800152e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001530:	4b1b      	ldr	r3, [pc, #108]	@ (80015a0 <HAL_RCC_OscConfig+0x478>)
 8001532:	2201      	movs	r2, #1
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb4d 	bl	8000bd4 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb49 	bl	8000bd4 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e05c      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001550:	4b11      	ldr	r3, [pc, #68]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d0f0      	beq.n	800153e <HAL_RCC_OscConfig+0x416>
 800155c:	e054      	b.n	8001608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_RCC_OscConfig+0x478>)
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001564:	f7ff fb36 	bl	8000bd4 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800156c:	f7ff fb32 	bl	8000bd4 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e045      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_RCC_OscConfig+0x470>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x444>
 800158a:	e03d      	b.n	8001608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d107      	bne.n	80015a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e038      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	40007000 	.word	0x40007000
 80015a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001614 <HAL_RCC_OscConfig+0x4ec>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	699b      	ldr	r3, [r3, #24]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d028      	beq.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80015bc:	429a      	cmp	r2, r3
 80015be:	d121      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d11a      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80015d4:	4013      	ands	r3, r2
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80015da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80015dc:	4293      	cmp	r3, r2
 80015de:	d111      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ea:	085b      	lsrs	r3, r3, #1
 80015ec:	3b01      	subs	r3, #1
 80015ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d107      	bne.n	8001604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80015fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800

08001618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
 8001620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d101      	bne.n	800162c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e0cc      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800162c:	4b68      	ldr	r3, [pc, #416]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f003 0307 	and.w	r3, r3, #7
 8001634:	683a      	ldr	r2, [r7, #0]
 8001636:	429a      	cmp	r2, r3
 8001638:	d90c      	bls.n	8001654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163a:	4b65      	ldr	r3, [pc, #404]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001642:	4b63      	ldr	r3, [pc, #396]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	683a      	ldr	r2, [r7, #0]
 800164c:	429a      	cmp	r2, r3
 800164e:	d001      	beq.n	8001654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e0b8      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	2b00      	cmp	r3, #0
 800165e:	d020      	beq.n	80016a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0304 	and.w	r3, r3, #4
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800166c:	4b59      	ldr	r3, [pc, #356]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	4a58      	ldr	r2, [pc, #352]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001672:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001676:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0308 	and.w	r3, r3, #8
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001684:	4b53      	ldr	r3, [pc, #332]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a52      	ldr	r2, [pc, #328]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800168e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001690:	4b50      	ldr	r3, [pc, #320]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	494d      	ldr	r1, [pc, #308]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	4313      	orrs	r3, r2
 80016a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d044      	beq.n	8001738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d107      	bne.n	80016c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	4b47      	ldr	r3, [pc, #284]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d119      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e07f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d003      	beq.n	80016d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d107      	bne.n	80016e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d6:	4b3f      	ldr	r3, [pc, #252]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d109      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e06f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f003 0302 	and.w	r3, r3, #2
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e067      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f6:	4b37      	ldr	r3, [pc, #220]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f023 0203 	bic.w	r2, r3, #3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	4934      	ldr	r1, [pc, #208]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001704:	4313      	orrs	r3, r2
 8001706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001708:	f7ff fa64 	bl	8000bd4 <HAL_GetTick>
 800170c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170e:	e00a      	b.n	8001726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001710:	f7ff fa60 	bl	8000bd4 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800171e:	4293      	cmp	r3, r2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e04f      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	4b2b      	ldr	r3, [pc, #172]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 020c 	and.w	r2, r3, #12
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	429a      	cmp	r2, r3
 8001736:	d1eb      	bne.n	8001710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001738:	4b25      	ldr	r3, [pc, #148]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0307 	and.w	r3, r3, #7
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	429a      	cmp	r2, r3
 8001744:	d20c      	bcs.n	8001760 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001746:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	b2d2      	uxtb	r2, r2
 800174c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800174e:	4b20      	ldr	r3, [pc, #128]	@ (80017d0 <HAL_RCC_ClockConfig+0x1b8>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	683a      	ldr	r2, [r7, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	d001      	beq.n	8001760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e032      	b.n	80017c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0304 	and.w	r3, r3, #4
 8001768:	2b00      	cmp	r3, #0
 800176a:	d008      	beq.n	800177e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800176c:	4b19      	ldr	r3, [pc, #100]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	4916      	ldr	r1, [pc, #88]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800177a:	4313      	orrs	r3, r2
 800177c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0308 	and.w	r3, r3, #8
 8001786:	2b00      	cmp	r3, #0
 8001788:	d009      	beq.n	800179e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800178a:	4b12      	ldr	r3, [pc, #72]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	00db      	lsls	r3, r3, #3
 8001798:	490e      	ldr	r1, [pc, #56]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800179e:	f000 f821 	bl	80017e4 <HAL_RCC_GetSysClockFreq>
 80017a2:	4602      	mov	r2, r0
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 030f 	and.w	r3, r3, #15
 80017ae:	490a      	ldr	r1, [pc, #40]	@ (80017d8 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	fa22 f303 	lsr.w	r3, r2, r3
 80017b6:	4a09      	ldr	r2, [pc, #36]	@ (80017dc <HAL_RCC_ClockConfig+0x1c4>)
 80017b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80017ba:	4b09      	ldr	r3, [pc, #36]	@ (80017e0 <HAL_RCC_ClockConfig+0x1c8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f7ff f9c4 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023c00 	.word	0x40023c00
 80017d4:	40023800 	.word	0x40023800
 80017d8:	080057a8 	.word	0x080057a8
 80017dc:	20000000 	.word	0x20000000
 80017e0:	20000004 	.word	0x20000004

080017e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017e8:	b094      	sub	sp, #80	@ 0x50
 80017ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80017f0:	2300      	movs	r3, #0
 80017f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80017f8:	2300      	movs	r3, #0
 80017fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017fc:	4b79      	ldr	r3, [pc, #484]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 030c 	and.w	r3, r3, #12
 8001804:	2b08      	cmp	r3, #8
 8001806:	d00d      	beq.n	8001824 <HAL_RCC_GetSysClockFreq+0x40>
 8001808:	2b08      	cmp	r3, #8
 800180a:	f200 80e1 	bhi.w	80019d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800180e:	2b00      	cmp	r3, #0
 8001810:	d002      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x34>
 8001812:	2b04      	cmp	r3, #4
 8001814:	d003      	beq.n	800181e <HAL_RCC_GetSysClockFreq+0x3a>
 8001816:	e0db      	b.n	80019d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001818:	4b73      	ldr	r3, [pc, #460]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800181a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800181c:	e0db      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800181e:	4b73      	ldr	r3, [pc, #460]	@ (80019ec <HAL_RCC_GetSysClockFreq+0x208>)
 8001820:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001822:	e0d8      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001824:	4b6f      	ldr	r3, [pc, #444]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800182c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800182e:	4b6d      	ldr	r3, [pc, #436]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001836:	2b00      	cmp	r3, #0
 8001838:	d063      	beq.n	8001902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183a:	4b6a      	ldr	r3, [pc, #424]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	099b      	lsrs	r3, r3, #6
 8001840:	2200      	movs	r2, #0
 8001842:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001844:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184c:	633b      	str	r3, [r7, #48]	@ 0x30
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	@ 0x34
 8001852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001856:	4622      	mov	r2, r4
 8001858:	462b      	mov	r3, r5
 800185a:	f04f 0000 	mov.w	r0, #0
 800185e:	f04f 0100 	mov.w	r1, #0
 8001862:	0159      	lsls	r1, r3, #5
 8001864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001868:	0150      	lsls	r0, r2, #5
 800186a:	4602      	mov	r2, r0
 800186c:	460b      	mov	r3, r1
 800186e:	4621      	mov	r1, r4
 8001870:	1a51      	subs	r1, r2, r1
 8001872:	6139      	str	r1, [r7, #16]
 8001874:	4629      	mov	r1, r5
 8001876:	eb63 0301 	sbc.w	r3, r3, r1
 800187a:	617b      	str	r3, [r7, #20]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001888:	4659      	mov	r1, fp
 800188a:	018b      	lsls	r3, r1, #6
 800188c:	4651      	mov	r1, sl
 800188e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001892:	4651      	mov	r1, sl
 8001894:	018a      	lsls	r2, r1, #6
 8001896:	4651      	mov	r1, sl
 8001898:	ebb2 0801 	subs.w	r8, r2, r1
 800189c:	4659      	mov	r1, fp
 800189e:	eb63 0901 	sbc.w	r9, r3, r1
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b6:	4690      	mov	r8, r2
 80018b8:	4699      	mov	r9, r3
 80018ba:	4623      	mov	r3, r4
 80018bc:	eb18 0303 	adds.w	r3, r8, r3
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	462b      	mov	r3, r5
 80018c4:	eb49 0303 	adc.w	r3, r9, r3
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	f04f 0300 	mov.w	r3, #0
 80018d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018d6:	4629      	mov	r1, r5
 80018d8:	024b      	lsls	r3, r1, #9
 80018da:	4621      	mov	r1, r4
 80018dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80018e0:	4621      	mov	r1, r4
 80018e2:	024a      	lsls	r2, r1, #9
 80018e4:	4610      	mov	r0, r2
 80018e6:	4619      	mov	r1, r3
 80018e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80018ea:	2200      	movs	r2, #0
 80018ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80018ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80018f4:	f7fe fccc 	bl	8000290 <__aeabi_uldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4613      	mov	r3, r2
 80018fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001900:	e058      	b.n	80019b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001902:	4b38      	ldr	r3, [pc, #224]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	099b      	lsrs	r3, r3, #6
 8001908:	2200      	movs	r2, #0
 800190a:	4618      	mov	r0, r3
 800190c:	4611      	mov	r1, r2
 800190e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001912:	623b      	str	r3, [r7, #32]
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
 8001918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800191c:	4642      	mov	r2, r8
 800191e:	464b      	mov	r3, r9
 8001920:	f04f 0000 	mov.w	r0, #0
 8001924:	f04f 0100 	mov.w	r1, #0
 8001928:	0159      	lsls	r1, r3, #5
 800192a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800192e:	0150      	lsls	r0, r2, #5
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4641      	mov	r1, r8
 8001936:	ebb2 0a01 	subs.w	sl, r2, r1
 800193a:	4649      	mov	r1, r9
 800193c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800194c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001954:	ebb2 040a 	subs.w	r4, r2, sl
 8001958:	eb63 050b 	sbc.w	r5, r3, fp
 800195c:	f04f 0200 	mov.w	r2, #0
 8001960:	f04f 0300 	mov.w	r3, #0
 8001964:	00eb      	lsls	r3, r5, #3
 8001966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800196a:	00e2      	lsls	r2, r4, #3
 800196c:	4614      	mov	r4, r2
 800196e:	461d      	mov	r5, r3
 8001970:	4643      	mov	r3, r8
 8001972:	18e3      	adds	r3, r4, r3
 8001974:	603b      	str	r3, [r7, #0]
 8001976:	464b      	mov	r3, r9
 8001978:	eb45 0303 	adc.w	r3, r5, r3
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800198a:	4629      	mov	r1, r5
 800198c:	028b      	lsls	r3, r1, #10
 800198e:	4621      	mov	r1, r4
 8001990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001994:	4621      	mov	r1, r4
 8001996:	028a      	lsls	r2, r1, #10
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800199e:	2200      	movs	r2, #0
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	61fa      	str	r2, [r7, #28]
 80019a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019a8:	f7fe fc72 	bl	8000290 <__aeabi_uldivmod>
 80019ac:	4602      	mov	r2, r0
 80019ae:	460b      	mov	r3, r1
 80019b0:	4613      	mov	r3, r2
 80019b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80019b4:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	0c1b      	lsrs	r3, r3, #16
 80019ba:	f003 0303 	and.w	r3, r3, #3
 80019be:	3301      	adds	r3, #1
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80019c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80019c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80019c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80019cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019ce:	e002      	b.n	80019d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019d0:	4b05      	ldr	r3, [pc, #20]	@ (80019e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80019d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3750      	adds	r7, #80	@ 0x50
 80019dc:	46bd      	mov	sp, r7
 80019de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019e2:	bf00      	nop
 80019e4:	40023800 	.word	0x40023800
 80019e8:	00f42400 	.word	0x00f42400
 80019ec:	007a1200 	.word	0x007a1200

080019f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019f4:	4b03      	ldr	r3, [pc, #12]	@ (8001a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000000 	.word	0x20000000

08001a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a0c:	f7ff fff0 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	@ (8001a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4903      	ldr	r1, [pc, #12]	@ (8001a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a1e:	5ccb      	ldrb	r3, [r1, r3]
 8001a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	080057b8 	.word	0x080057b8

08001a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a34:	f7ff ffdc 	bl	80019f0 <HAL_RCC_GetHCLKFreq>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	4b05      	ldr	r3, [pc, #20]	@ (8001a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	0b5b      	lsrs	r3, r3, #13
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	4903      	ldr	r1, [pc, #12]	@ (8001a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a46:	5ccb      	ldrb	r3, [r1, r3]
 8001a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40023800 	.word	0x40023800
 8001a54:	080057b8 	.word	0x080057b8

08001a58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e042      	b.n	8001af0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001a70:	b2db      	uxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d106      	bne.n	8001a84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7fe ff60 	bl	8000944 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2224      	movs	r2, #36	@ 0x24
 8001a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f000 f973 	bl	8001d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	691a      	ldr	r2, [r3, #16]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ab0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695a      	ldr	r2, [r3, #20]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ac0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68da      	ldr	r2, [r3, #12]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ad0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2220      	movs	r2, #32
 8001ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b08a      	sub	sp, #40	@ 0x28
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	2b20      	cmp	r3, #32
 8001b16:	d175      	bne.n	8001c04 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d002      	beq.n	8001b24 <HAL_UART_Transmit+0x2c>
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e06e      	b.n	8001c06 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2221      	movs	r2, #33	@ 0x21
 8001b32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b36:	f7ff f84d 	bl	8000bd4 <HAL_GetTick>
 8001b3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	88fa      	ldrh	r2, [r7, #6]
 8001b40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	88fa      	ldrh	r2, [r7, #6]
 8001b46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b50:	d108      	bne.n	8001b64 <HAL_UART_Transmit+0x6c>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	691b      	ldr	r3, [r3, #16]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d104      	bne.n	8001b64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	e003      	b.n	8001b6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001b6c:	e02e      	b.n	8001bcc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	68f8      	ldr	r0, [r7, #12]
 8001b7a:	f000 f848 	bl	8001c0e <UART_WaitOnFlagUntilTimeout>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2220      	movs	r2, #32
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e03a      	b.n	8001c06 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10b      	bne.n	8001bae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ba4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	3302      	adds	r3, #2
 8001baa:	61bb      	str	r3, [r7, #24]
 8001bac:	e007      	b.n	8001bbe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	781a      	ldrb	r2, [r3, #0]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d1cb      	bne.n	8001b6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	2140      	movs	r1, #64	@ 0x40
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f814 	bl	8001c0e <UART_WaitOnFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d005      	beq.n	8001bf8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e006      	b.n	8001c06 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	2220      	movs	r2, #32
 8001bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001c00:	2300      	movs	r3, #0
 8001c02:	e000      	b.n	8001c06 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001c04:	2302      	movs	r3, #2
  }
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3720      	adds	r7, #32
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c0e:	b580      	push	{r7, lr}
 8001c10:	b086      	sub	sp, #24
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c1e:	e03b      	b.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c26:	d037      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c28:	f7fe ffd4 	bl	8000bd4 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	6a3a      	ldr	r2, [r7, #32]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d302      	bcc.n	8001c3e <UART_WaitOnFlagUntilTimeout+0x30>
 8001c38:	6a3b      	ldr	r3, [r7, #32]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e03a      	b.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0304 	and.w	r3, r3, #4
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d023      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2b80      	cmp	r3, #128	@ 0x80
 8001c54:	d020      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	2b40      	cmp	r3, #64	@ 0x40
 8001c5a:	d01d      	beq.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0308 	and.w	r3, r3, #8
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d116      	bne.n	8001c98 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c80:	68f8      	ldr	r0, [r7, #12]
 8001c82:	f000 f81d 	bl	8001cc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2208      	movs	r2, #8
 8001c8a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e00f      	b.n	8001cb8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	68bb      	ldr	r3, [r7, #8]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	68ba      	ldr	r2, [r7, #8]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	bf0c      	ite	eq
 8001ca8:	2301      	moveq	r3, #1
 8001caa:	2300      	movne	r3, #0
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d0b4      	beq.n	8001c20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3718      	adds	r7, #24
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b095      	sub	sp, #84	@ 0x54
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	330c      	adds	r3, #12
 8001cce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cd2:	e853 3f00 	ldrex	r3, [r3]
 8001cd6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cda:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001cde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	330c      	adds	r3, #12
 8001ce6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001ce8:	643a      	str	r2, [r7, #64]	@ 0x40
 8001cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001cee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001cf0:	e841 2300 	strex	r3, r2, [r1]
 8001cf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001cf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d1e5      	bne.n	8001cc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	3314      	adds	r3, #20
 8001d02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	e853 3f00 	ldrex	r3, [r3]
 8001d0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	3314      	adds	r3, #20
 8001d1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001d1c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001d1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001d24:	e841 2300 	strex	r3, r2, [r1]
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d1e5      	bne.n	8001cfc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d119      	bne.n	8001d6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	330c      	adds	r3, #12
 8001d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	e853 3f00 	ldrex	r3, [r3]
 8001d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	f023 0310 	bic.w	r3, r3, #16
 8001d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	330c      	adds	r3, #12
 8001d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001d58:	61ba      	str	r2, [r7, #24]
 8001d5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d5c:	6979      	ldr	r1, [r7, #20]
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	e841 2300 	strex	r3, r2, [r1]
 8001d64:	613b      	str	r3, [r7, #16]
   return(result);
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1e5      	bne.n	8001d38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2200      	movs	r2, #0
 8001d78:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8001d7a:	bf00      	nop
 8001d7c:	3754      	adds	r7, #84	@ 0x54
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
	...

08001d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d8c:	b0c0      	sub	sp, #256	@ 0x100
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8001da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001da4:	68d9      	ldr	r1, [r3, #12]
 8001da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	ea40 0301 	orr.w	r3, r0, r1
 8001db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	431a      	orrs	r2, r3
 8001dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dcc:	69db      	ldr	r3, [r3, #28]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8001de0:	f021 010c 	bic.w	r1, r1, #12
 8001de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8001dee:	430b      	orrs	r3, r1
 8001df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	695b      	ldr	r3, [r3, #20]
 8001dfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e02:	6999      	ldr	r1, [r3, #24]
 8001e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	ea40 0301 	orr.w	r3, r0, r1
 8001e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	4b8f      	ldr	r3, [pc, #572]	@ (8002054 <UART_SetConfig+0x2cc>)
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d005      	beq.n	8001e28 <UART_SetConfig+0xa0>
 8001e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e20:	681a      	ldr	r2, [r3, #0]
 8001e22:	4b8d      	ldr	r3, [pc, #564]	@ (8002058 <UART_SetConfig+0x2d0>)
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d104      	bne.n	8001e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e28:	f7ff fe02 	bl	8001a30 <HAL_RCC_GetPCLK2Freq>
 8001e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8001e30:	e003      	b.n	8001e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e32:	f7ff fde9 	bl	8001a08 <HAL_RCC_GetPCLK1Freq>
 8001e36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001e3e:	69db      	ldr	r3, [r3, #28]
 8001e40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e44:	f040 810c 	bne.w	8002060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001e52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8001e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	462b      	mov	r3, r5
 8001e5e:	1891      	adds	r1, r2, r2
 8001e60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8001e62:	415b      	adcs	r3, r3
 8001e64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	eb12 0801 	adds.w	r8, r2, r1
 8001e70:	4629      	mov	r1, r5
 8001e72:	eb43 0901 	adc.w	r9, r3, r1
 8001e76:	f04f 0200 	mov.w	r2, #0
 8001e7a:	f04f 0300 	mov.w	r3, #0
 8001e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e8a:	4690      	mov	r8, r2
 8001e8c:	4699      	mov	r9, r3
 8001e8e:	4623      	mov	r3, r4
 8001e90:	eb18 0303 	adds.w	r3, r8, r3
 8001e94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8001e98:	462b      	mov	r3, r5
 8001e9a:	eb49 0303 	adc.w	r3, r9, r3
 8001e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8001eae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	18db      	adds	r3, r3, r3
 8001eba:	653b      	str	r3, [r7, #80]	@ 0x50
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	eb42 0303 	adc.w	r3, r2, r3
 8001ec2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8001ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8001ecc:	f7fe f9e0 	bl	8000290 <__aeabi_uldivmod>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4b61      	ldr	r3, [pc, #388]	@ (800205c <UART_SetConfig+0x2d4>)
 8001ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eda:	095b      	lsrs	r3, r3, #5
 8001edc:	011c      	lsls	r4, r3, #4
 8001ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8001ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8001ef0:	4642      	mov	r2, r8
 8001ef2:	464b      	mov	r3, r9
 8001ef4:	1891      	adds	r1, r2, r2
 8001ef6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8001ef8:	415b      	adcs	r3, r3
 8001efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001f00:	4641      	mov	r1, r8
 8001f02:	eb12 0a01 	adds.w	sl, r2, r1
 8001f06:	4649      	mov	r1, r9
 8001f08:	eb43 0b01 	adc.w	fp, r3, r1
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	f04f 0300 	mov.w	r3, #0
 8001f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f20:	4692      	mov	sl, r2
 8001f22:	469b      	mov	fp, r3
 8001f24:	4643      	mov	r3, r8
 8001f26:	eb1a 0303 	adds.w	r3, sl, r3
 8001f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8001f2e:	464b      	mov	r3, r9
 8001f30:	eb4b 0303 	adc.w	r3, fp, r3
 8001f34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8001f44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	18db      	adds	r3, r3, r3
 8001f50:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f52:	4613      	mov	r3, r2
 8001f54:	eb42 0303 	adc.w	r3, r2, r3
 8001f58:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8001f62:	f7fe f995 	bl	8000290 <__aeabi_uldivmod>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	4611      	mov	r1, r2
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	@ (800205c <UART_SetConfig+0x2d4>)
 8001f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f72:	095b      	lsrs	r3, r3, #5
 8001f74:	2264      	movs	r2, #100	@ 0x64
 8001f76:	fb02 f303 	mul.w	r3, r2, r3
 8001f7a:	1acb      	subs	r3, r1, r3
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8001f82:	4b36      	ldr	r3, [pc, #216]	@ (800205c <UART_SetConfig+0x2d4>)
 8001f84:	fba3 2302 	umull	r2, r3, r3, r2
 8001f88:	095b      	lsrs	r3, r3, #5
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8001f90:	441c      	add	r4, r3
 8001f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001f96:	2200      	movs	r2, #0
 8001f98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8001fa4:	4642      	mov	r2, r8
 8001fa6:	464b      	mov	r3, r9
 8001fa8:	1891      	adds	r1, r2, r2
 8001faa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001fac:	415b      	adcs	r3, r3
 8001fae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001fb4:	4641      	mov	r1, r8
 8001fb6:	1851      	adds	r1, r2, r1
 8001fb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8001fba:	4649      	mov	r1, r9
 8001fbc:	414b      	adcs	r3, r1
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fc0:	f04f 0200 	mov.w	r2, #0
 8001fc4:	f04f 0300 	mov.w	r3, #0
 8001fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8001fcc:	4659      	mov	r1, fp
 8001fce:	00cb      	lsls	r3, r1, #3
 8001fd0:	4651      	mov	r1, sl
 8001fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fd6:	4651      	mov	r1, sl
 8001fd8:	00ca      	lsls	r2, r1, #3
 8001fda:	4610      	mov	r0, r2
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	4642      	mov	r2, r8
 8001fe2:	189b      	adds	r3, r3, r2
 8001fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001fe8:	464b      	mov	r3, r9
 8001fea:	460a      	mov	r2, r1
 8001fec:	eb42 0303 	adc.w	r3, r2, r3
 8001ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002000:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002008:	460b      	mov	r3, r1
 800200a:	18db      	adds	r3, r3, r3
 800200c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800200e:	4613      	mov	r3, r2
 8002010:	eb42 0303 	adc.w	r3, r2, r3
 8002014:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800201a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800201e:	f7fe f937 	bl	8000290 <__aeabi_uldivmod>
 8002022:	4602      	mov	r2, r0
 8002024:	460b      	mov	r3, r1
 8002026:	4b0d      	ldr	r3, [pc, #52]	@ (800205c <UART_SetConfig+0x2d4>)
 8002028:	fba3 1302 	umull	r1, r3, r3, r2
 800202c:	095b      	lsrs	r3, r3, #5
 800202e:	2164      	movs	r1, #100	@ 0x64
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	3332      	adds	r3, #50	@ 0x32
 800203a:	4a08      	ldr	r2, [pc, #32]	@ (800205c <UART_SetConfig+0x2d4>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	095b      	lsrs	r3, r3, #5
 8002042:	f003 0207 	and.w	r2, r3, #7
 8002046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4422      	add	r2, r4
 800204e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002050:	e106      	b.n	8002260 <UART_SetConfig+0x4d8>
 8002052:	bf00      	nop
 8002054:	40011000 	.word	0x40011000
 8002058:	40011400 	.word	0x40011400
 800205c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002064:	2200      	movs	r2, #0
 8002066:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800206a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800206e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002072:	4642      	mov	r2, r8
 8002074:	464b      	mov	r3, r9
 8002076:	1891      	adds	r1, r2, r2
 8002078:	6239      	str	r1, [r7, #32]
 800207a:	415b      	adcs	r3, r3
 800207c:	627b      	str	r3, [r7, #36]	@ 0x24
 800207e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002082:	4641      	mov	r1, r8
 8002084:	1854      	adds	r4, r2, r1
 8002086:	4649      	mov	r1, r9
 8002088:	eb43 0501 	adc.w	r5, r3, r1
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	f04f 0300 	mov.w	r3, #0
 8002094:	00eb      	lsls	r3, r5, #3
 8002096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800209a:	00e2      	lsls	r2, r4, #3
 800209c:	4614      	mov	r4, r2
 800209e:	461d      	mov	r5, r3
 80020a0:	4643      	mov	r3, r8
 80020a2:	18e3      	adds	r3, r4, r3
 80020a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80020a8:	464b      	mov	r3, r9
 80020aa:	eb45 0303 	adc.w	r3, r5, r3
 80020ae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80020b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80020be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80020c2:	f04f 0200 	mov.w	r2, #0
 80020c6:	f04f 0300 	mov.w	r3, #0
 80020ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80020ce:	4629      	mov	r1, r5
 80020d0:	008b      	lsls	r3, r1, #2
 80020d2:	4621      	mov	r1, r4
 80020d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020d8:	4621      	mov	r1, r4
 80020da:	008a      	lsls	r2, r1, #2
 80020dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80020e0:	f7fe f8d6 	bl	8000290 <__aeabi_uldivmod>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4b60      	ldr	r3, [pc, #384]	@ (800226c <UART_SetConfig+0x4e4>)
 80020ea:	fba3 2302 	umull	r2, r3, r3, r2
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	011c      	lsls	r4, r3, #4
 80020f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80020f6:	2200      	movs	r2, #0
 80020f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80020fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002104:	4642      	mov	r2, r8
 8002106:	464b      	mov	r3, r9
 8002108:	1891      	adds	r1, r2, r2
 800210a:	61b9      	str	r1, [r7, #24]
 800210c:	415b      	adcs	r3, r3
 800210e:	61fb      	str	r3, [r7, #28]
 8002110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002114:	4641      	mov	r1, r8
 8002116:	1851      	adds	r1, r2, r1
 8002118:	6139      	str	r1, [r7, #16]
 800211a:	4649      	mov	r1, r9
 800211c:	414b      	adcs	r3, r1
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	f04f 0300 	mov.w	r3, #0
 8002128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800212c:	4659      	mov	r1, fp
 800212e:	00cb      	lsls	r3, r1, #3
 8002130:	4651      	mov	r1, sl
 8002132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002136:	4651      	mov	r1, sl
 8002138:	00ca      	lsls	r2, r1, #3
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	4603      	mov	r3, r0
 8002140:	4642      	mov	r2, r8
 8002142:	189b      	adds	r3, r3, r2
 8002144:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002148:	464b      	mov	r3, r9
 800214a:	460a      	mov	r2, r1
 800214c:	eb42 0303 	adc.w	r3, r2, r3
 8002150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800215e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	f04f 0300 	mov.w	r3, #0
 8002168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800216c:	4649      	mov	r1, r9
 800216e:	008b      	lsls	r3, r1, #2
 8002170:	4641      	mov	r1, r8
 8002172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002176:	4641      	mov	r1, r8
 8002178:	008a      	lsls	r2, r1, #2
 800217a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800217e:	f7fe f887 	bl	8000290 <__aeabi_uldivmod>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4611      	mov	r1, r2
 8002188:	4b38      	ldr	r3, [pc, #224]	@ (800226c <UART_SetConfig+0x4e4>)
 800218a:	fba3 2301 	umull	r2, r3, r3, r1
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2264      	movs	r2, #100	@ 0x64
 8002192:	fb02 f303 	mul.w	r3, r2, r3
 8002196:	1acb      	subs	r3, r1, r3
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	3332      	adds	r3, #50	@ 0x32
 800219c:	4a33      	ldr	r2, [pc, #204]	@ (800226c <UART_SetConfig+0x4e4>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	095b      	lsrs	r3, r3, #5
 80021a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80021a8:	441c      	add	r4, r3
 80021aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80021ae:	2200      	movs	r2, #0
 80021b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80021b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80021b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80021b8:	4642      	mov	r2, r8
 80021ba:	464b      	mov	r3, r9
 80021bc:	1891      	adds	r1, r2, r2
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	415b      	adcs	r3, r3
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021c8:	4641      	mov	r1, r8
 80021ca:	1851      	adds	r1, r2, r1
 80021cc:	6039      	str	r1, [r7, #0]
 80021ce:	4649      	mov	r1, r9
 80021d0:	414b      	adcs	r3, r1
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	f04f 0300 	mov.w	r3, #0
 80021dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021e0:	4659      	mov	r1, fp
 80021e2:	00cb      	lsls	r3, r1, #3
 80021e4:	4651      	mov	r1, sl
 80021e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021ea:	4651      	mov	r1, sl
 80021ec:	00ca      	lsls	r2, r1, #3
 80021ee:	4610      	mov	r0, r2
 80021f0:	4619      	mov	r1, r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	4642      	mov	r2, r8
 80021f6:	189b      	adds	r3, r3, r2
 80021f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80021fa:	464b      	mov	r3, r9
 80021fc:	460a      	mov	r2, r1
 80021fe:	eb42 0303 	adc.w	r3, r2, r3
 8002202:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	663b      	str	r3, [r7, #96]	@ 0x60
 800220e:	667a      	str	r2, [r7, #100]	@ 0x64
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800221c:	4649      	mov	r1, r9
 800221e:	008b      	lsls	r3, r1, #2
 8002220:	4641      	mov	r1, r8
 8002222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002226:	4641      	mov	r1, r8
 8002228:	008a      	lsls	r2, r1, #2
 800222a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800222e:	f7fe f82f 	bl	8000290 <__aeabi_uldivmod>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4b0d      	ldr	r3, [pc, #52]	@ (800226c <UART_SetConfig+0x4e4>)
 8002238:	fba3 1302 	umull	r1, r3, r3, r2
 800223c:	095b      	lsrs	r3, r3, #5
 800223e:	2164      	movs	r1, #100	@ 0x64
 8002240:	fb01 f303 	mul.w	r3, r1, r3
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	3332      	adds	r3, #50	@ 0x32
 800224a:	4a08      	ldr	r2, [pc, #32]	@ (800226c <UART_SetConfig+0x4e4>)
 800224c:	fba2 2303 	umull	r2, r3, r2, r3
 8002250:	095b      	lsrs	r3, r3, #5
 8002252:	f003 020f 	and.w	r2, r3, #15
 8002256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4422      	add	r2, r4
 800225e:	609a      	str	r2, [r3, #8]
}
 8002260:	bf00      	nop
 8002262:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002266:	46bd      	mov	sp, r7
 8002268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800226c:	51eb851f 	.word	0x51eb851f

08002270 <__NVIC_SetPriority>:
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	6039      	str	r1, [r7, #0]
 800227a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002280:	2b00      	cmp	r3, #0
 8002282:	db0a      	blt.n	800229a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	b2da      	uxtb	r2, r3
 8002288:	490c      	ldr	r1, [pc, #48]	@ (80022bc <__NVIC_SetPriority+0x4c>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	0112      	lsls	r2, r2, #4
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	440b      	add	r3, r1
 8002294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002298:	e00a      	b.n	80022b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	b2da      	uxtb	r2, r3
 800229e:	4908      	ldr	r1, [pc, #32]	@ (80022c0 <__NVIC_SetPriority+0x50>)
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	3b04      	subs	r3, #4
 80022a8:	0112      	lsls	r2, r2, #4
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	440b      	add	r3, r1
 80022ae:	761a      	strb	r2, [r3, #24]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	e000e100 	.word	0xe000e100
 80022c0:	e000ed00 	.word	0xe000ed00

080022c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80022c8:	2100      	movs	r1, #0
 80022ca:	f06f 0004 	mvn.w	r0, #4
 80022ce:	f7ff ffcf 	bl	8002270 <__NVIC_SetPriority>
#endif
}
 80022d2:	bf00      	nop
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022de:	f3ef 8305 	mrs	r3, IPSR
 80022e2:	603b      	str	r3, [r7, #0]
  return(result);
 80022e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d003      	beq.n	80022f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80022ea:	f06f 0305 	mvn.w	r3, #5
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	e00c      	b.n	800230c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80022f2:	4b0a      	ldr	r3, [pc, #40]	@ (800231c <osKernelInitialize+0x44>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80022fa:	4b08      	ldr	r3, [pc, #32]	@ (800231c <osKernelInitialize+0x44>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002300:	2300      	movs	r3, #0
 8002302:	607b      	str	r3, [r7, #4]
 8002304:	e002      	b.n	800230c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8002306:	f04f 33ff 	mov.w	r3, #4294967295
 800230a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800230c:	687b      	ldr	r3, [r7, #4]
}
 800230e:	4618      	mov	r0, r3
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	200000d0 	.word	0x200000d0

08002320 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002326:	f3ef 8305 	mrs	r3, IPSR
 800232a:	603b      	str	r3, [r7, #0]
  return(result);
 800232c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800232e:	2b00      	cmp	r3, #0
 8002330:	d003      	beq.n	800233a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002332:	f06f 0305 	mvn.w	r3, #5
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	e010      	b.n	800235c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800233a:	4b0b      	ldr	r3, [pc, #44]	@ (8002368 <osKernelStart+0x48>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b01      	cmp	r3, #1
 8002340:	d109      	bne.n	8002356 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002342:	f7ff ffbf 	bl	80022c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <osKernelStart+0x48>)
 8002348:	2202      	movs	r2, #2
 800234a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800234c:	f001 f87a 	bl	8003444 <vTaskStartScheduler>
      stat = osOK;
 8002350:	2300      	movs	r3, #0
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	e002      	b.n	800235c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002356:	f04f 33ff 	mov.w	r3, #4294967295
 800235a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800235c:	687b      	ldr	r3, [r7, #4]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	200000d0 	.word	0x200000d0

0800236c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	@ 0x38
 8002370:	af04      	add	r7, sp, #16
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800237c:	f3ef 8305 	mrs	r3, IPSR
 8002380:	617b      	str	r3, [r7, #20]
  return(result);
 8002382:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002384:	2b00      	cmp	r3, #0
 8002386:	d17e      	bne.n	8002486 <osThreadNew+0x11a>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d07b      	beq.n	8002486 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800238e:	2380      	movs	r3, #128	@ 0x80
 8002390:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002392:	2318      	movs	r3, #24
 8002394:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002396:	2300      	movs	r3, #0
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d045      	beq.n	8002432 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <osThreadNew+0x48>
        name = attr->name;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699b      	ldr	r3, [r3, #24]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d002      	beq.n	80023c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d008      	beq.n	80023da <osThreadNew+0x6e>
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b38      	cmp	r3, #56	@ 0x38
 80023cc:	d805      	bhi.n	80023da <osThreadNew+0x6e>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d001      	beq.n	80023de <osThreadNew+0x72>
        return (NULL);
 80023da:	2300      	movs	r3, #0
 80023dc:	e054      	b.n	8002488 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	695b      	ldr	r3, [r3, #20]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d00e      	beq.n	8002414 <osThreadNew+0xa8>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b5b      	cmp	r3, #91	@ 0x5b
 80023fc:	d90a      	bls.n	8002414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002402:	2b00      	cmp	r3, #0
 8002404:	d006      	beq.n	8002414 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <osThreadNew+0xa8>
        mem = 1;
 800240e:	2301      	movs	r3, #1
 8002410:	61bb      	str	r3, [r7, #24]
 8002412:	e010      	b.n	8002436 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10c      	bne.n	8002436 <osThreadNew+0xca>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d108      	bne.n	8002436 <osThreadNew+0xca>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d104      	bne.n	8002436 <osThreadNew+0xca>
          mem = 0;
 800242c:	2300      	movs	r3, #0
 800242e:	61bb      	str	r3, [r7, #24]
 8002430:	e001      	b.n	8002436 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002436:	69bb      	ldr	r3, [r7, #24]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d110      	bne.n	800245e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002444:	9202      	str	r2, [sp, #8]
 8002446:	9301      	str	r3, [sp, #4]
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	9300      	str	r3, [sp, #0]
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	6a3a      	ldr	r2, [r7, #32]
 8002450:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002452:	68f8      	ldr	r0, [r7, #12]
 8002454:	f000 fe1a 	bl	800308c <xTaskCreateStatic>
 8002458:	4603      	mov	r3, r0
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	e013      	b.n	8002486 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d110      	bne.n	8002486 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002464:	6a3b      	ldr	r3, [r7, #32]
 8002466:	b29a      	uxth	r2, r3
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	9301      	str	r3, [sp, #4]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002476:	68f8      	ldr	r0, [r7, #12]
 8002478:	f000 fe68 	bl	800314c <xTaskCreate>
 800247c:	4603      	mov	r3, r0
 800247e:	2b01      	cmp	r3, #1
 8002480:	d001      	beq.n	8002486 <osThreadNew+0x11a>
            hTask = NULL;
 8002482:	2300      	movs	r3, #0
 8002484:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002486:	693b      	ldr	r3, [r7, #16]
}
 8002488:	4618      	mov	r0, r3
 800248a:	3728      	adds	r7, #40	@ 0x28
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002498:	f3ef 8305 	mrs	r3, IPSR
 800249c:	60bb      	str	r3, [r7, #8]
  return(result);
 800249e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d003      	beq.n	80024ac <osDelay+0x1c>
    stat = osErrorISR;
 80024a4:	f06f 0305 	mvn.w	r3, #5
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	e007      	b.n	80024bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d002      	beq.n	80024bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 ff8e 	bl	80033d8 <vTaskDelay>
    }
  }

  return (stat);
 80024bc:	68fb      	ldr	r3, [r7, #12]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3710      	adds	r7, #16
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
	...

080024c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	4a07      	ldr	r2, [pc, #28]	@ (80024f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80024d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4a06      	ldr	r2, [pc, #24]	@ (80024f8 <vApplicationGetIdleTaskMemory+0x30>)
 80024de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2280      	movs	r2, #128	@ 0x80
 80024e4:	601a      	str	r2, [r3, #0]
}
 80024e6:	bf00      	nop
 80024e8:	3714      	adds	r7, #20
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	200000d4 	.word	0x200000d4
 80024f8:	20000130 	.word	0x20000130

080024fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	4a07      	ldr	r2, [pc, #28]	@ (8002528 <vApplicationGetTimerTaskMemory+0x2c>)
 800250c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	4a06      	ldr	r2, [pc, #24]	@ (800252c <vApplicationGetTimerTaskMemory+0x30>)
 8002512:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800251a:	601a      	str	r2, [r3, #0]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	20000330 	.word	0x20000330
 800252c:	2000038c 	.word	0x2000038c

08002530 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f103 0208 	add.w	r2, r3, #8
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	f04f 32ff 	mov.w	r2, #4294967295
 8002548:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f103 0208 	add.w	r2, r3, #8
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f103 0208 	add.w	r2, r3, #8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2200      	movs	r2, #0
 800257c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr

0800258a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800258a:	b480      	push	{r7}
 800258c:	b085      	sub	sp, #20
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	68fa      	ldr	r2, [r7, #12]
 800259e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	1c5a      	adds	r2, r3, #1
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	601a      	str	r2, [r3, #0]
}
 80025c6:	bf00      	nop
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80025d2:	b480      	push	{r7}
 80025d4:	b085      	sub	sp, #20
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e8:	d103      	bne.n	80025f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	60fb      	str	r3, [r7, #12]
 80025f0:	e00c      	b.n	800260c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	3308      	adds	r3, #8
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	e002      	b.n	8002600 <vListInsert+0x2e>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	429a      	cmp	r2, r3
 800260a:	d2f6      	bcs.n	80025fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68fa      	ldr	r2, [r7, #12]
 8002620:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	683a      	ldr	r2, [r7, #0]
 8002626:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	687a      	ldr	r2, [r7, #4]
 800262c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	1c5a      	adds	r2, r3, #1
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	601a      	str	r2, [r3, #0]
}
 8002638:	bf00      	nop
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	691b      	ldr	r3, [r3, #16]
 8002650:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	687a      	ldr	r2, [r7, #4]
 8002658:	6892      	ldr	r2, [r2, #8]
 800265a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6852      	ldr	r2, [r2, #4]
 8002664:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	429a      	cmp	r2, r3
 800266e:	d103      	bne.n	8002678 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	1e5a      	subs	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3714      	adds	r7, #20
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b084      	sub	sp, #16
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d10b      	bne.n	80026c4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80026ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026b0:	f383 8811 	msr	BASEPRI, r3
 80026b4:	f3bf 8f6f 	isb	sy
 80026b8:	f3bf 8f4f 	dsb	sy
 80026bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80026c4:	f002 f878 	bl	80047b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026d0:	68f9      	ldr	r1, [r7, #12]
 80026d2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026d4:	fb01 f303 	mul.w	r3, r1, r3
 80026d8:	441a      	add	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	3b01      	subs	r3, #1
 80026f6:	68f9      	ldr	r1, [r7, #12]
 80026f8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80026fa:	fb01 f303 	mul.w	r3, r1, r3
 80026fe:	441a      	add	r2, r3
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	22ff      	movs	r2, #255	@ 0xff
 8002708:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	22ff      	movs	r2, #255	@ 0xff
 8002710:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d114      	bne.n	8002744 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d01a      	beq.n	8002758 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	3310      	adds	r3, #16
 8002726:	4618      	mov	r0, r3
 8002728:	f001 f91a 	bl	8003960 <xTaskRemoveFromEventList>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d012      	beq.n	8002758 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002732:	4b0d      	ldr	r3, [pc, #52]	@ (8002768 <xQueueGenericReset+0xd0>)
 8002734:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002738:	601a      	str	r2, [r3, #0]
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	f3bf 8f6f 	isb	sy
 8002742:	e009      	b.n	8002758 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3310      	adds	r3, #16
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff fef1 	bl	8002530 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	3324      	adds	r3, #36	@ 0x24
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff feec 	bl	8002530 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002758:	f002 f860 	bl	800481c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800275c:	2301      	movs	r3, #1
}
 800275e:	4618      	mov	r0, r3
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	e000ed04 	.word	0xe000ed04

0800276c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08e      	sub	sp, #56	@ 0x38
 8002770:	af02      	add	r7, sp, #8
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
 8002778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002792:	bf00      	nop
 8002794:	bf00      	nop
 8002796:	e7fd      	b.n	8002794 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d10b      	bne.n	80027b6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800279e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027a2:	f383 8811 	msr	BASEPRI, r3
 80027a6:	f3bf 8f6f 	isb	sy
 80027aa:	f3bf 8f4f 	dsb	sy
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80027b0:	bf00      	nop
 80027b2:	bf00      	nop
 80027b4:	e7fd      	b.n	80027b2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d002      	beq.n	80027c2 <xQueueGenericCreateStatic+0x56>
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d001      	beq.n	80027c6 <xQueueGenericCreateStatic+0x5a>
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <xQueueGenericCreateStatic+0x5c>
 80027c6:	2300      	movs	r3, #0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d10b      	bne.n	80027e4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80027cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027d0:	f383 8811 	msr	BASEPRI, r3
 80027d4:	f3bf 8f6f 	isb	sy
 80027d8:	f3bf 8f4f 	dsb	sy
 80027dc:	623b      	str	r3, [r7, #32]
}
 80027de:	bf00      	nop
 80027e0:	bf00      	nop
 80027e2:	e7fd      	b.n	80027e0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <xQueueGenericCreateStatic+0x84>
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <xQueueGenericCreateStatic+0x88>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <xQueueGenericCreateStatic+0x8a>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10b      	bne.n	8002812 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80027fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027fe:	f383 8811 	msr	BASEPRI, r3
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	f3bf 8f4f 	dsb	sy
 800280a:	61fb      	str	r3, [r7, #28]
}
 800280c:	bf00      	nop
 800280e:	bf00      	nop
 8002810:	e7fd      	b.n	800280e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002812:	2350      	movs	r3, #80	@ 0x50
 8002814:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2b50      	cmp	r3, #80	@ 0x50
 800281a:	d00b      	beq.n	8002834 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	61bb      	str	r3, [r7, #24]
}
 800282e:	bf00      	nop
 8002830:	bf00      	nop
 8002832:	e7fd      	b.n	8002830 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002834:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800283a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00d      	beq.n	800285c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002848:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800284c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800284e:	9300      	str	r3, [sp, #0]
 8002850:	4613      	mov	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	68b9      	ldr	r1, [r7, #8]
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f000 f805 	bl	8002866 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800285c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800285e:	4618      	mov	r0, r3
 8002860:	3730      	adds	r7, #48	@ 0x30
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	60f8      	str	r0, [r7, #12]
 800286e:	60b9      	str	r1, [r7, #8]
 8002870:	607a      	str	r2, [r7, #4]
 8002872:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d103      	bne.n	8002882 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	e002      	b.n	8002888 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002894:	2101      	movs	r1, #1
 8002896:	69b8      	ldr	r0, [r7, #24]
 8002898:	f7ff fefe 	bl	8002698 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	78fa      	ldrb	r2, [r7, #3]
 80028a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80028a4:	bf00      	nop
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b08e      	sub	sp, #56	@ 0x38
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	60b9      	str	r1, [r7, #8]
 80028b6:	607a      	str	r2, [r7, #4]
 80028b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ba:	2300      	movs	r3, #0
 80028bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80028c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <xQueueGenericSend+0x34>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d103      	bne.n	80028ee <xQueueGenericSend+0x42>
 80028e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <xQueueGenericSend+0x46>
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <xQueueGenericSend+0x48>
 80028f2:	2300      	movs	r3, #0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d10b      	bne.n	8002910 <xQueueGenericSend+0x64>
	__asm volatile
 80028f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fc:	f383 8811 	msr	BASEPRI, r3
 8002900:	f3bf 8f6f 	isb	sy
 8002904:	f3bf 8f4f 	dsb	sy
 8002908:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800290a:	bf00      	nop
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	2b02      	cmp	r3, #2
 8002914:	d103      	bne.n	800291e <xQueueGenericSend+0x72>
 8002916:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002918:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800291a:	2b01      	cmp	r3, #1
 800291c:	d101      	bne.n	8002922 <xQueueGenericSend+0x76>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <xQueueGenericSend+0x78>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d10b      	bne.n	8002940 <xQueueGenericSend+0x94>
	__asm volatile
 8002928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800292c:	f383 8811 	msr	BASEPRI, r3
 8002930:	f3bf 8f6f 	isb	sy
 8002934:	f3bf 8f4f 	dsb	sy
 8002938:	623b      	str	r3, [r7, #32]
}
 800293a:	bf00      	nop
 800293c:	bf00      	nop
 800293e:	e7fd      	b.n	800293c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002940:	f001 f9ce 	bl	8003ce0 <xTaskGetSchedulerState>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d102      	bne.n	8002950 <xQueueGenericSend+0xa4>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <xQueueGenericSend+0xa8>
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <xQueueGenericSend+0xaa>
 8002954:	2300      	movs	r3, #0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10b      	bne.n	8002972 <xQueueGenericSend+0xc6>
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	61fb      	str	r3, [r7, #28]
}
 800296c:	bf00      	nop
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002972:	f001 ff21 	bl	80047b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800297a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800297c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800297e:	429a      	cmp	r2, r3
 8002980:	d302      	bcc.n	8002988 <xQueueGenericSend+0xdc>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	2b02      	cmp	r3, #2
 8002986:	d129      	bne.n	80029dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	68b9      	ldr	r1, [r7, #8]
 800298c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800298e:	f000 fa0f 	bl	8002db0 <prvCopyDataToQueue>
 8002992:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	2b00      	cmp	r3, #0
 800299a:	d010      	beq.n	80029be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800299c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299e:	3324      	adds	r3, #36	@ 0x24
 80029a0:	4618      	mov	r0, r3
 80029a2:	f000 ffdd 	bl	8003960 <xTaskRemoveFromEventList>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d013      	beq.n	80029d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80029ac:	4b3f      	ldr	r3, [pc, #252]	@ (8002aac <xQueueGenericSend+0x200>)
 80029ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029b2:	601a      	str	r2, [r3, #0]
 80029b4:	f3bf 8f4f 	dsb	sy
 80029b8:	f3bf 8f6f 	isb	sy
 80029bc:	e00a      	b.n	80029d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80029be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d007      	beq.n	80029d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80029c4:	4b39      	ldr	r3, [pc, #228]	@ (8002aac <xQueueGenericSend+0x200>)
 80029c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	f3bf 8f4f 	dsb	sy
 80029d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80029d4:	f001 ff22 	bl	800481c <vPortExitCritical>
				return pdPASS;
 80029d8:	2301      	movs	r3, #1
 80029da:	e063      	b.n	8002aa4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d103      	bne.n	80029ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80029e2:	f001 ff1b 	bl	800481c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80029e6:	2300      	movs	r3, #0
 80029e8:	e05c      	b.n	8002aa4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80029ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d106      	bne.n	80029fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	4618      	mov	r0, r3
 80029f6:	f001 f817 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80029fa:	2301      	movs	r3, #1
 80029fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80029fe:	f001 ff0d 	bl	800481c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a02:	f000 fd87 	bl	8003514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a06:	f001 fed7 	bl	80047b8 <vPortEnterCritical>
 8002a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002a10:	b25b      	sxtb	r3, r3
 8002a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a16:	d103      	bne.n	8002a20 <xQueueGenericSend+0x174>
 8002a18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a22:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002a26:	b25b      	sxtb	r3, r3
 8002a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a2c:	d103      	bne.n	8002a36 <xQueueGenericSend+0x18a>
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002a36:	f001 fef1 	bl	800481c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002a3a:	1d3a      	adds	r2, r7, #4
 8002a3c:	f107 0314 	add.w	r3, r7, #20
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f001 f806 	bl	8003a54 <xTaskCheckForTimeOut>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d124      	bne.n	8002a98 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a4e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a50:	f000 faa6 	bl	8002fa0 <prvIsQueueFull>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a5c:	3310      	adds	r3, #16
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 ff2a 	bl	80038bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002a68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a6a:	f000 fa31 	bl	8002ed0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002a6e:	f000 fd5f 	bl	8003530 <xTaskResumeAll>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f47f af7c 	bne.w	8002972 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <xQueueGenericSend+0x200>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	e772      	b.n	8002972 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002a8c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a8e:	f000 fa1f 	bl	8002ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002a92:	f000 fd4d 	bl	8003530 <xTaskResumeAll>
 8002a96:	e76c      	b.n	8002972 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002a98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002a9a:	f000 fa19 	bl	8002ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a9e:	f000 fd47 	bl	8003530 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002aa2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3738      	adds	r7, #56	@ 0x38
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	e000ed04 	.word	0xe000ed04

08002ab0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b090      	sub	sp, #64	@ 0x40
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d103      	bne.n	8002aee <xQueueGenericSendFromISR+0x3e>
 8002ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d101      	bne.n	8002af2 <xQueueGenericSendFromISR+0x42>
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <xQueueGenericSendFromISR+0x44>
 8002af2:	2300      	movs	r3, #0
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d10b      	bne.n	8002b10 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002afc:	f383 8811 	msr	BASEPRI, r3
 8002b00:	f3bf 8f6f 	isb	sy
 8002b04:	f3bf 8f4f 	dsb	sy
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002b0a:	bf00      	nop
 8002b0c:	bf00      	nop
 8002b0e:	e7fd      	b.n	8002b0c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d103      	bne.n	8002b1e <xQueueGenericSendFromISR+0x6e>
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <xQueueGenericSendFromISR+0x72>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <xQueueGenericSendFromISR+0x74>
 8002b22:	2300      	movs	r3, #0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	623b      	str	r3, [r7, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	bf00      	nop
 8002b3e:	e7fd      	b.n	8002b3c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002b40:	f001 ff1a 	bl	8004978 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002b44:	f3ef 8211 	mrs	r2, BASEPRI
 8002b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	61fa      	str	r2, [r7, #28]
 8002b5a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002b5c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002b5e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d302      	bcc.n	8002b72 <xQueueGenericSendFromISR+0xc2>
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d12f      	bne.n	8002bd2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002b72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b74:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b80:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b82:	683a      	ldr	r2, [r7, #0]
 8002b84:	68b9      	ldr	r1, [r7, #8]
 8002b86:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8002b88:	f000 f912 	bl	8002db0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002b8c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b94:	d112      	bne.n	8002bbc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d016      	beq.n	8002bcc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ba0:	3324      	adds	r3, #36	@ 0x24
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 fedc 	bl	8003960 <xTaskRemoveFromEventList>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00e      	beq.n	8002bcc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00b      	beq.n	8002bcc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]
 8002bba:	e007      	b.n	8002bcc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002bbc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	b25a      	sxtb	r2, r3
 8002bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002bd0:	e001      	b.n	8002bd6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bd8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002be0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002be2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	3740      	adds	r7, #64	@ 0x40
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}

08002bec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	@ 0x30
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d10b      	bne.n	8002c1e <xQueueReceive+0x32>
	__asm volatile
 8002c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c0a:	f383 8811 	msr	BASEPRI, r3
 8002c0e:	f3bf 8f6f 	isb	sy
 8002c12:	f3bf 8f4f 	dsb	sy
 8002c16:	623b      	str	r3, [r7, #32]
}
 8002c18:	bf00      	nop
 8002c1a:	bf00      	nop
 8002c1c:	e7fd      	b.n	8002c1a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d103      	bne.n	8002c2c <xQueueReceive+0x40>
 8002c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <xQueueReceive+0x44>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <xQueueReceive+0x46>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xQueueReceive+0x62>
	__asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	61fb      	str	r3, [r7, #28]
}
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c4e:	f001 f847 	bl	8003ce0 <xTaskGetSchedulerState>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <xQueueReceive+0x72>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d101      	bne.n	8002c62 <xQueueReceive+0x76>
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <xQueueReceive+0x78>
 8002c62:	2300      	movs	r3, #0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d10b      	bne.n	8002c80 <xQueueReceive+0x94>
	__asm volatile
 8002c68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c6c:	f383 8811 	msr	BASEPRI, r3
 8002c70:	f3bf 8f6f 	isb	sy
 8002c74:	f3bf 8f4f 	dsb	sy
 8002c78:	61bb      	str	r3, [r7, #24]
}
 8002c7a:	bf00      	nop
 8002c7c:	bf00      	nop
 8002c7e:	e7fd      	b.n	8002c7c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c80:	f001 fd9a 	bl	80047b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d01f      	beq.n	8002cd0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c94:	f000 f8f6 	bl	8002e84 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9a:	1e5a      	subs	r2, r3, #1
 8002c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c9e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00f      	beq.n	8002cc8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002caa:	3310      	adds	r3, #16
 8002cac:	4618      	mov	r0, r3
 8002cae:	f000 fe57 	bl	8003960 <xTaskRemoveFromEventList>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cb8:	4b3c      	ldr	r3, [pc, #240]	@ (8002dac <xQueueReceive+0x1c0>)
 8002cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cc8:	f001 fda8 	bl	800481c <vPortExitCritical>
				return pdPASS;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e069      	b.n	8002da4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d103      	bne.n	8002cde <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002cd6:	f001 fda1 	bl	800481c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	e062      	b.n	8002da4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d106      	bne.n	8002cf2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f000 fe9d 	bl	8003a28 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002cf2:	f001 fd93 	bl	800481c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002cf6:	f000 fc0d 	bl	8003514 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002cfa:	f001 fd5d 	bl	80047b8 <vPortEnterCritical>
 8002cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d04:	b25b      	sxtb	r3, r3
 8002d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d0a:	d103      	bne.n	8002d14 <xQueueReceive+0x128>
 8002d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d16:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d1a:	b25b      	sxtb	r3, r3
 8002d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d20:	d103      	bne.n	8002d2a <xQueueReceive+0x13e>
 8002d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d2a:	f001 fd77 	bl	800481c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d2e:	1d3a      	adds	r2, r7, #4
 8002d30:	f107 0310 	add.w	r3, r7, #16
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fe8c 	bl	8003a54 <xTaskCheckForTimeOut>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d123      	bne.n	8002d8a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d44:	f000 f916 	bl	8002f74 <prvIsQueueEmpty>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d017      	beq.n	8002d7e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d50:	3324      	adds	r3, #36	@ 0x24
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4611      	mov	r1, r2
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fdb0 	bl	80038bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002d5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d5e:	f000 f8b7 	bl	8002ed0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002d62:	f000 fbe5 	bl	8003530 <xTaskResumeAll>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d189      	bne.n	8002c80 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8002d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dac <xQueueReceive+0x1c0>)
 8002d6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	e780      	b.n	8002c80 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002d7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d80:	f000 f8a6 	bl	8002ed0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002d84:	f000 fbd4 	bl	8003530 <xTaskResumeAll>
 8002d88:	e77a      	b.n	8002c80 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002d8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d8c:	f000 f8a0 	bl	8002ed0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002d90:	f000 fbce 	bl	8003530 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d94:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d96:	f000 f8ed 	bl	8002f74 <prvIsQueueEmpty>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f43f af6f 	beq.w	8002c80 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002da2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3730      	adds	r7, #48	@ 0x30
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	e000ed04 	.word	0xe000ed04

08002db0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10d      	bne.n	8002dea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d14d      	bne.n	8002e72 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 ff9e 	bl	8003d1c <xTaskPriorityDisinherit>
 8002de0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	609a      	str	r2, [r3, #8]
 8002de8:	e043      	b.n	8002e72 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d119      	bne.n	8002e24 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6858      	ldr	r0, [r3, #4]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	461a      	mov	r2, r3
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	f002 f842 	bl	8004e84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e08:	441a      	add	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	685a      	ldr	r2, [r3, #4]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d32b      	bcc.n	8002e72 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	605a      	str	r2, [r3, #4]
 8002e22:	e026      	b.n	8002e72 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	68d8      	ldr	r0, [r3, #12]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	68b9      	ldr	r1, [r7, #8]
 8002e30:	f002 f828 	bl	8004e84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	68da      	ldr	r2, [r3, #12]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3c:	425b      	negs	r3, r3
 8002e3e:	441a      	add	r2, r3
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	d207      	bcs.n	8002e60 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e58:	425b      	negs	r3, r3
 8002e5a:	441a      	add	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d105      	bne.n	8002e72 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d002      	beq.n	8002e72 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002e7a:	697b      	ldr	r3, [r7, #20]
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3718      	adds	r7, #24
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d018      	beq.n	8002ec8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9e:	441a      	add	r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68da      	ldr	r2, [r3, #12]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d303      	bcc.n	8002eb8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	68d9      	ldr	r1, [r3, #12]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6838      	ldr	r0, [r7, #0]
 8002ec4:	f001 ffde 	bl	8004e84 <memcpy>
	}
}
 8002ec8:	bf00      	nop
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002ed8:	f001 fc6e 	bl	80047b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ee2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ee4:	e011      	b.n	8002f0a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d012      	beq.n	8002f14 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3324      	adds	r3, #36	@ 0x24
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fd34 	bl	8003960 <xTaskRemoveFromEventList>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002efe:	f000 fe0d 	bl	8003b1c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	dce9      	bgt.n	8002ee6 <prvUnlockQueue+0x16>
 8002f12:	e000      	b.n	8002f16 <prvUnlockQueue+0x46>
					break;
 8002f14:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	22ff      	movs	r2, #255	@ 0xff
 8002f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8002f1e:	f001 fc7d 	bl	800481c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002f22:	f001 fc49 	bl	80047b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f2c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f2e:	e011      	b.n	8002f54 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d012      	beq.n	8002f5e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3310      	adds	r3, #16
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f000 fd0f 	bl	8003960 <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d001      	beq.n	8002f4c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002f48:	f000 fde8 	bl	8003b1c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002f4c:	7bbb      	ldrb	r3, [r7, #14]
 8002f4e:	3b01      	subs	r3, #1
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002f54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	dce9      	bgt.n	8002f30 <prvUnlockQueue+0x60>
 8002f5c:	e000      	b.n	8002f60 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002f5e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	22ff      	movs	r2, #255	@ 0xff
 8002f64:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8002f68:	f001 fc58 	bl	800481c <vPortExitCritical>
}
 8002f6c:	bf00      	nop
 8002f6e:	3710      	adds	r7, #16
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002f7c:	f001 fc1c 	bl	80047b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d102      	bne.n	8002f8e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	60fb      	str	r3, [r7, #12]
 8002f8c:	e001      	b.n	8002f92 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002f92:	f001 fc43 	bl	800481c <vPortExitCritical>

	return xReturn;
 8002f96:	68fb      	ldr	r3, [r7, #12]
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b084      	sub	sp, #16
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002fa8:	f001 fc06 	bl	80047b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d102      	bne.n	8002fbe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	e001      	b.n	8002fc2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002fc2:	f001 fc2b 	bl	800481c <vPortExitCritical>

	return xReturn;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60fb      	str	r3, [r7, #12]
 8002fde:	e014      	b.n	800300a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002fe0:	4a0f      	ldr	r2, [pc, #60]	@ (8003020 <vQueueAddToRegistry+0x50>)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d10b      	bne.n	8003004 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002fec:	490c      	ldr	r1, [pc, #48]	@ (8003020 <vQueueAddToRegistry+0x50>)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8003020 <vQueueAddToRegistry+0x50>)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003002:	e006      	b.n	8003012 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	3301      	adds	r3, #1
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2b07      	cmp	r3, #7
 800300e:	d9e7      	bls.n	8002fe0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	3714      	adds	r7, #20
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	2000078c 	.word	0x2000078c

08003024 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003034:	f001 fbc0 	bl	80047b8 <vPortEnterCritical>
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800303e:	b25b      	sxtb	r3, r3
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d103      	bne.n	800304e <vQueueWaitForMessageRestricted+0x2a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003054:	b25b      	sxtb	r3, r3
 8003056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305a:	d103      	bne.n	8003064 <vQueueWaitForMessageRestricted+0x40>
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	2200      	movs	r2, #0
 8003060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003064:	f001 fbda 	bl	800481c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d106      	bne.n	800307e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3324      	adds	r3, #36	@ 0x24
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	68b9      	ldr	r1, [r7, #8]
 8003078:	4618      	mov	r0, r3
 800307a:	f000 fc45 	bl	8003908 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800307e:	6978      	ldr	r0, [r7, #20]
 8003080:	f7ff ff26 	bl	8002ed0 <prvUnlockQueue>
	}
 8003084:	bf00      	nop
 8003086:	3718      	adds	r7, #24
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}

0800308c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08e      	sub	sp, #56	@ 0x38
 8003090:	af04      	add	r7, sp, #16
 8003092:	60f8      	str	r0, [r7, #12]
 8003094:	60b9      	str	r1, [r7, #8]
 8003096:	607a      	str	r2, [r7, #4]
 8003098:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800309a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800309c:	2b00      	cmp	r3, #0
 800309e:	d10b      	bne.n	80030b8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80030a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a4:	f383 8811 	msr	BASEPRI, r3
 80030a8:	f3bf 8f6f 	isb	sy
 80030ac:	f3bf 8f4f 	dsb	sy
 80030b0:	623b      	str	r3, [r7, #32]
}
 80030b2:	bf00      	nop
 80030b4:	bf00      	nop
 80030b6:	e7fd      	b.n	80030b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80030b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10b      	bne.n	80030d6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80030be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	61fb      	str	r3, [r7, #28]
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	e7fd      	b.n	80030d2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80030d6:	235c      	movs	r3, #92	@ 0x5c
 80030d8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	2b5c      	cmp	r3, #92	@ 0x5c
 80030de:	d00b      	beq.n	80030f8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80030e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	61bb      	str	r3, [r7, #24]
}
 80030f2:	bf00      	nop
 80030f4:	bf00      	nop
 80030f6:	e7fd      	b.n	80030f4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80030f8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80030fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01e      	beq.n	800313e <xTaskCreateStatic+0xb2>
 8003100:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003102:	2b00      	cmp	r3, #0
 8003104:	d01b      	beq.n	800313e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003108:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800310a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800310e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003112:	2202      	movs	r2, #2
 8003114:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003118:	2300      	movs	r3, #0
 800311a:	9303      	str	r3, [sp, #12]
 800311c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311e:	9302      	str	r3, [sp, #8]
 8003120:	f107 0314 	add.w	r3, r7, #20
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	68b9      	ldr	r1, [r7, #8]
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f850 	bl	80031d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003136:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003138:	f000 f8de 	bl	80032f8 <prvAddNewTaskToReadyList>
 800313c:	e001      	b.n	8003142 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003142:	697b      	ldr	r3, [r7, #20]
	}
 8003144:	4618      	mov	r0, r3
 8003146:	3728      	adds	r7, #40	@ 0x28
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08c      	sub	sp, #48	@ 0x30
 8003150:	af04      	add	r7, sp, #16
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	603b      	str	r3, [r7, #0]
 8003158:	4613      	mov	r3, r2
 800315a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	4618      	mov	r0, r3
 8003162:	f001 fc4b 	bl	80049fc <pvPortMalloc>
 8003166:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00e      	beq.n	800318c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800316e:	205c      	movs	r0, #92	@ 0x5c
 8003170:	f001 fc44 	bl	80049fc <pvPortMalloc>
 8003174:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	631a      	str	r2, [r3, #48]	@ 0x30
 8003182:	e005      	b.n	8003190 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003184:	6978      	ldr	r0, [r7, #20]
 8003186:	f001 fd07 	bl	8004b98 <vPortFree>
 800318a:	e001      	b.n	8003190 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d017      	beq.n	80031c6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800319e:	88fa      	ldrh	r2, [r7, #6]
 80031a0:	2300      	movs	r3, #0
 80031a2:	9303      	str	r3, [sp, #12]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	9302      	str	r3, [sp, #8]
 80031a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 f80e 	bl	80031d6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80031ba:	69f8      	ldr	r0, [r7, #28]
 80031bc:	f000 f89c 	bl	80032f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80031c0:	2301      	movs	r3, #1
 80031c2:	61bb      	str	r3, [r7, #24]
 80031c4:	e002      	b.n	80031cc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80031c6:	f04f 33ff 	mov.w	r3, #4294967295
 80031ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80031cc:	69bb      	ldr	r3, [r7, #24]
	}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3720      	adds	r7, #32
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b088      	sub	sp, #32
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	21a5      	movs	r1, #165	@ 0xa5
 80031f0:	f001 fe14 	bl	8004e1c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80031fe:	3b01      	subs	r3, #1
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	4413      	add	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	f023 0307 	bic.w	r3, r3, #7
 800320c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	f003 0307 	and.w	r3, r3, #7
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00b      	beq.n	8003230 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	617b      	str	r3, [r7, #20]
}
 800322a:	bf00      	nop
 800322c:	bf00      	nop
 800322e:	e7fd      	b.n	800322c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003230:	68bb      	ldr	r3, [r7, #8]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d01f      	beq.n	8003276 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003236:	2300      	movs	r3, #0
 8003238:	61fb      	str	r3, [r7, #28]
 800323a:	e012      	b.n	8003262 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	69fb      	ldr	r3, [r7, #28]
 8003240:	4413      	add	r3, r2
 8003242:	7819      	ldrb	r1, [r3, #0]
 8003244:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	4413      	add	r3, r2
 800324a:	3334      	adds	r3, #52	@ 0x34
 800324c:	460a      	mov	r2, r1
 800324e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	4413      	add	r3, r2
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d006      	beq.n	800326a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	3301      	adds	r3, #1
 8003260:	61fb      	str	r3, [r7, #28]
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b0f      	cmp	r3, #15
 8003266:	d9e9      	bls.n	800323c <prvInitialiseNewTask+0x66>
 8003268:	e000      	b.n	800326c <prvInitialiseNewTask+0x96>
			{
				break;
 800326a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800326c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800326e:	2200      	movs	r2, #0
 8003270:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003274:	e003      	b.n	800327e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800327e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003280:	2b37      	cmp	r3, #55	@ 0x37
 8003282:	d901      	bls.n	8003288 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003284:	2337      	movs	r3, #55	@ 0x37
 8003286:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800328a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800328c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800328e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003290:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003292:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003296:	2200      	movs	r2, #0
 8003298:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800329a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800329c:	3304      	adds	r3, #4
 800329e:	4618      	mov	r0, r3
 80032a0:	f7ff f966 	bl	8002570 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80032a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a6:	3318      	adds	r3, #24
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff f961 	bl	8002570 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80032ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80032ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80032be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80032c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032c6:	2200      	movs	r2, #0
 80032c8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80032ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68f9      	ldr	r1, [r7, #12]
 80032d6:	69b8      	ldr	r0, [r7, #24]
 80032d8:	f001 f93e 	bl	8004558 <pxPortInitialiseStack>
 80032dc:	4602      	mov	r2, r0
 80032de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ee:	bf00      	nop
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b082      	sub	sp, #8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003300:	f001 fa5a 	bl	80047b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003304:	4b2d      	ldr	r3, [pc, #180]	@ (80033bc <prvAddNewTaskToReadyList+0xc4>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	3301      	adds	r3, #1
 800330a:	4a2c      	ldr	r2, [pc, #176]	@ (80033bc <prvAddNewTaskToReadyList+0xc4>)
 800330c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800330e:	4b2c      	ldr	r3, [pc, #176]	@ (80033c0 <prvAddNewTaskToReadyList+0xc8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003316:	4a2a      	ldr	r2, [pc, #168]	@ (80033c0 <prvAddNewTaskToReadyList+0xc8>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800331c:	4b27      	ldr	r3, [pc, #156]	@ (80033bc <prvAddNewTaskToReadyList+0xc4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d110      	bne.n	8003346 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003324:	f000 fc1e 	bl	8003b64 <prvInitialiseTaskLists>
 8003328:	e00d      	b.n	8003346 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800332a:	4b26      	ldr	r3, [pc, #152]	@ (80033c4 <prvAddNewTaskToReadyList+0xcc>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d109      	bne.n	8003346 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003332:	4b23      	ldr	r3, [pc, #140]	@ (80033c0 <prvAddNewTaskToReadyList+0xc8>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333c:	429a      	cmp	r2, r3
 800333e:	d802      	bhi.n	8003346 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003340:	4a1f      	ldr	r2, [pc, #124]	@ (80033c0 <prvAddNewTaskToReadyList+0xc8>)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003346:	4b20      	ldr	r3, [pc, #128]	@ (80033c8 <prvAddNewTaskToReadyList+0xd0>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	3301      	adds	r3, #1
 800334c:	4a1e      	ldr	r2, [pc, #120]	@ (80033c8 <prvAddNewTaskToReadyList+0xd0>)
 800334e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003350:	4b1d      	ldr	r3, [pc, #116]	@ (80033c8 <prvAddNewTaskToReadyList+0xd0>)
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800335c:	4b1b      	ldr	r3, [pc, #108]	@ (80033cc <prvAddNewTaskToReadyList+0xd4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	429a      	cmp	r2, r3
 8003362:	d903      	bls.n	800336c <prvAddNewTaskToReadyList+0x74>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003368:	4a18      	ldr	r2, [pc, #96]	@ (80033cc <prvAddNewTaskToReadyList+0xd4>)
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4a15      	ldr	r2, [pc, #84]	@ (80033d0 <prvAddNewTaskToReadyList+0xd8>)
 800337a:	441a      	add	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3304      	adds	r3, #4
 8003380:	4619      	mov	r1, r3
 8003382:	4610      	mov	r0, r2
 8003384:	f7ff f901 	bl	800258a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003388:	f001 fa48 	bl	800481c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800338c:	4b0d      	ldr	r3, [pc, #52]	@ (80033c4 <prvAddNewTaskToReadyList+0xcc>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003394:	4b0a      	ldr	r3, [pc, #40]	@ (80033c0 <prvAddNewTaskToReadyList+0xc8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800339e:	429a      	cmp	r2, r3
 80033a0:	d207      	bcs.n	80033b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80033a2:	4b0c      	ldr	r3, [pc, #48]	@ (80033d4 <prvAddNewTaskToReadyList+0xdc>)
 80033a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	f3bf 8f4f 	dsb	sy
 80033ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80033b2:	bf00      	nop
 80033b4:	3708      	adds	r7, #8
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	20000ca0 	.word	0x20000ca0
 80033c0:	200007cc 	.word	0x200007cc
 80033c4:	20000cac 	.word	0x20000cac
 80033c8:	20000cbc 	.word	0x20000cbc
 80033cc:	20000ca8 	.word	0x20000ca8
 80033d0:	200007d0 	.word	0x200007d0
 80033d4:	e000ed04 	.word	0xe000ed04

080033d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033e0:	2300      	movs	r3, #0
 80033e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d018      	beq.n	800341c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033ea:	4b14      	ldr	r3, [pc, #80]	@ (800343c <vTaskDelay+0x64>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00b      	beq.n	800340a <vTaskDelay+0x32>
	__asm volatile
 80033f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f6:	f383 8811 	msr	BASEPRI, r3
 80033fa:	f3bf 8f6f 	isb	sy
 80033fe:	f3bf 8f4f 	dsb	sy
 8003402:	60bb      	str	r3, [r7, #8]
}
 8003404:	bf00      	nop
 8003406:	bf00      	nop
 8003408:	e7fd      	b.n	8003406 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800340a:	f000 f883 	bl	8003514 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800340e:	2100      	movs	r1, #0
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 fcf3 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003416:	f000 f88b 	bl	8003530 <xTaskResumeAll>
 800341a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d107      	bne.n	8003432 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <vTaskDelay+0x68>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003432:	bf00      	nop
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	20000cc8 	.word	0x20000cc8
 8003440:	e000ed04 	.word	0xe000ed04

08003444 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	@ 0x28
 8003448:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800344e:	2300      	movs	r3, #0
 8003450:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003452:	463a      	mov	r2, r7
 8003454:	1d39      	adds	r1, r7, #4
 8003456:	f107 0308 	add.w	r3, r7, #8
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff f834 	bl	80024c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003460:	6839      	ldr	r1, [r7, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68ba      	ldr	r2, [r7, #8]
 8003466:	9202      	str	r2, [sp, #8]
 8003468:	9301      	str	r3, [sp, #4]
 800346a:	2300      	movs	r3, #0
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	2300      	movs	r3, #0
 8003470:	460a      	mov	r2, r1
 8003472:	4922      	ldr	r1, [pc, #136]	@ (80034fc <vTaskStartScheduler+0xb8>)
 8003474:	4822      	ldr	r0, [pc, #136]	@ (8003500 <vTaskStartScheduler+0xbc>)
 8003476:	f7ff fe09 	bl	800308c <xTaskCreateStatic>
 800347a:	4603      	mov	r3, r0
 800347c:	4a21      	ldr	r2, [pc, #132]	@ (8003504 <vTaskStartScheduler+0xc0>)
 800347e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003480:	4b20      	ldr	r3, [pc, #128]	@ (8003504 <vTaskStartScheduler+0xc0>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003488:	2301      	movs	r3, #1
 800348a:	617b      	str	r3, [r7, #20]
 800348c:	e001      	b.n	8003492 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800348e:	2300      	movs	r3, #0
 8003490:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d102      	bne.n	800349e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003498:	f000 fd04 	bl	8003ea4 <xTimerCreateTimerTask>
 800349c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d116      	bne.n	80034d2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80034a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a8:	f383 8811 	msr	BASEPRI, r3
 80034ac:	f3bf 8f6f 	isb	sy
 80034b0:	f3bf 8f4f 	dsb	sy
 80034b4:	613b      	str	r3, [r7, #16]
}
 80034b6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80034b8:	4b13      	ldr	r3, [pc, #76]	@ (8003508 <vTaskStartScheduler+0xc4>)
 80034ba:	f04f 32ff 	mov.w	r2, #4294967295
 80034be:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80034c0:	4b12      	ldr	r3, [pc, #72]	@ (800350c <vTaskStartScheduler+0xc8>)
 80034c2:	2201      	movs	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80034c6:	4b12      	ldr	r3, [pc, #72]	@ (8003510 <vTaskStartScheduler+0xcc>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80034cc:	f001 f8d0 	bl	8004670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80034d0:	e00f      	b.n	80034f2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d10b      	bne.n	80034f2 <vTaskStartScheduler+0xae>
	__asm volatile
 80034da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034de:	f383 8811 	msr	BASEPRI, r3
 80034e2:	f3bf 8f6f 	isb	sy
 80034e6:	f3bf 8f4f 	dsb	sy
 80034ea:	60fb      	str	r3, [r7, #12]
}
 80034ec:	bf00      	nop
 80034ee:	bf00      	nop
 80034f0:	e7fd      	b.n	80034ee <vTaskStartScheduler+0xaa>
}
 80034f2:	bf00      	nop
 80034f4:	3718      	adds	r7, #24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	0800576c 	.word	0x0800576c
 8003500:	08003b35 	.word	0x08003b35
 8003504:	20000cc4 	.word	0x20000cc4
 8003508:	20000cc0 	.word	0x20000cc0
 800350c:	20000cac 	.word	0x20000cac
 8003510:	20000ca4 	.word	0x20000ca4

08003514 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003518:	4b04      	ldr	r3, [pc, #16]	@ (800352c <vTaskSuspendAll+0x18>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	3301      	adds	r3, #1
 800351e:	4a03      	ldr	r2, [pc, #12]	@ (800352c <vTaskSuspendAll+0x18>)
 8003520:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr
 800352c:	20000cc8 	.word	0x20000cc8

08003530 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003536:	2300      	movs	r3, #0
 8003538:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800353a:	2300      	movs	r3, #0
 800353c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800353e:	4b42      	ldr	r3, [pc, #264]	@ (8003648 <xTaskResumeAll+0x118>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10b      	bne.n	800355e <xTaskResumeAll+0x2e>
	__asm volatile
 8003546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800354a:	f383 8811 	msr	BASEPRI, r3
 800354e:	f3bf 8f6f 	isb	sy
 8003552:	f3bf 8f4f 	dsb	sy
 8003556:	603b      	str	r3, [r7, #0]
}
 8003558:	bf00      	nop
 800355a:	bf00      	nop
 800355c:	e7fd      	b.n	800355a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800355e:	f001 f92b 	bl	80047b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003562:	4b39      	ldr	r3, [pc, #228]	@ (8003648 <xTaskResumeAll+0x118>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3b01      	subs	r3, #1
 8003568:	4a37      	ldr	r2, [pc, #220]	@ (8003648 <xTaskResumeAll+0x118>)
 800356a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800356c:	4b36      	ldr	r3, [pc, #216]	@ (8003648 <xTaskResumeAll+0x118>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d162      	bne.n	800363a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003574:	4b35      	ldr	r3, [pc, #212]	@ (800364c <xTaskResumeAll+0x11c>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05e      	beq.n	800363a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800357c:	e02f      	b.n	80035de <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800357e:	4b34      	ldr	r3, [pc, #208]	@ (8003650 <xTaskResumeAll+0x120>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	3318      	adds	r3, #24
 800358a:	4618      	mov	r0, r3
 800358c:	f7ff f85a 	bl	8002644 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff f855 	bl	8002644 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800359e:	4b2d      	ldr	r3, [pc, #180]	@ (8003654 <xTaskResumeAll+0x124>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d903      	bls.n	80035ae <xTaskResumeAll+0x7e>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035aa:	4a2a      	ldr	r2, [pc, #168]	@ (8003654 <xTaskResumeAll+0x124>)
 80035ac:	6013      	str	r3, [r2, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <xTaskResumeAll+0x128>)
 80035bc:	441a      	add	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	3304      	adds	r3, #4
 80035c2:	4619      	mov	r1, r3
 80035c4:	4610      	mov	r0, r2
 80035c6:	f7fe ffe0 	bl	800258a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ce:	4b23      	ldr	r3, [pc, #140]	@ (800365c <xTaskResumeAll+0x12c>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d302      	bcc.n	80035de <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80035d8:	4b21      	ldr	r3, [pc, #132]	@ (8003660 <xTaskResumeAll+0x130>)
 80035da:	2201      	movs	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80035de:	4b1c      	ldr	r3, [pc, #112]	@ (8003650 <xTaskResumeAll+0x120>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1cb      	bne.n	800357e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d001      	beq.n	80035f0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80035ec:	f000 fb58 	bl	8003ca0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80035f0:	4b1c      	ldr	r3, [pc, #112]	@ (8003664 <xTaskResumeAll+0x134>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d010      	beq.n	800361e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80035fc:	f000 f846 	bl	800368c <xTaskIncrementTick>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d002      	beq.n	800360c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003606:	4b16      	ldr	r3, [pc, #88]	@ (8003660 <xTaskResumeAll+0x130>)
 8003608:	2201      	movs	r2, #1
 800360a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3b01      	subs	r3, #1
 8003610:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1f1      	bne.n	80035fc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003618:	4b12      	ldr	r3, [pc, #72]	@ (8003664 <xTaskResumeAll+0x134>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800361e:	4b10      	ldr	r3, [pc, #64]	@ (8003660 <xTaskResumeAll+0x130>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d009      	beq.n	800363a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003626:	2301      	movs	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800362a:	4b0f      	ldr	r3, [pc, #60]	@ (8003668 <xTaskResumeAll+0x138>)
 800362c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800363a:	f001 f8ef 	bl	800481c <vPortExitCritical>

	return xAlreadyYielded;
 800363e:	68bb      	ldr	r3, [r7, #8]
}
 8003640:	4618      	mov	r0, r3
 8003642:	3710      	adds	r7, #16
 8003644:	46bd      	mov	sp, r7
 8003646:	bd80      	pop	{r7, pc}
 8003648:	20000cc8 	.word	0x20000cc8
 800364c:	20000ca0 	.word	0x20000ca0
 8003650:	20000c60 	.word	0x20000c60
 8003654:	20000ca8 	.word	0x20000ca8
 8003658:	200007d0 	.word	0x200007d0
 800365c:	200007cc 	.word	0x200007cc
 8003660:	20000cb4 	.word	0x20000cb4
 8003664:	20000cb0 	.word	0x20000cb0
 8003668:	e000ed04 	.word	0xe000ed04

0800366c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <xTaskGetTickCount+0x1c>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003678:	687b      	ldr	r3, [r7, #4]
}
 800367a:	4618      	mov	r0, r3
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	20000ca4 	.word	0x20000ca4

0800368c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003692:	2300      	movs	r3, #0
 8003694:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003696:	4b4f      	ldr	r3, [pc, #316]	@ (80037d4 <xTaskIncrementTick+0x148>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	f040 8090 	bne.w	80037c0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80036a0:	4b4d      	ldr	r3, [pc, #308]	@ (80037d8 <xTaskIncrementTick+0x14c>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	3301      	adds	r3, #1
 80036a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80036a8:	4a4b      	ldr	r2, [pc, #300]	@ (80037d8 <xTaskIncrementTick+0x14c>)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d121      	bne.n	80036f8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80036b4:	4b49      	ldr	r3, [pc, #292]	@ (80037dc <xTaskIncrementTick+0x150>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	603b      	str	r3, [r7, #0]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <xTaskIncrementTick+0x46>
 80036d6:	4b41      	ldr	r3, [pc, #260]	@ (80037dc <xTaskIncrementTick+0x150>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	4b40      	ldr	r3, [pc, #256]	@ (80037e0 <xTaskIncrementTick+0x154>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a3e      	ldr	r2, [pc, #248]	@ (80037dc <xTaskIncrementTick+0x150>)
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	4a3e      	ldr	r2, [pc, #248]	@ (80037e0 <xTaskIncrementTick+0x154>)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b3e      	ldr	r3, [pc, #248]	@ (80037e4 <xTaskIncrementTick+0x158>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a3c      	ldr	r2, [pc, #240]	@ (80037e4 <xTaskIncrementTick+0x158>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	f000 fad4 	bl	8003ca0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80036f8:	4b3b      	ldr	r3, [pc, #236]	@ (80037e8 <xTaskIncrementTick+0x15c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	693a      	ldr	r2, [r7, #16]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d349      	bcc.n	8003796 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003702:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <xTaskIncrementTick+0x150>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d104      	bne.n	8003716 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800370c:	4b36      	ldr	r3, [pc, #216]	@ (80037e8 <xTaskIncrementTick+0x15c>)
 800370e:	f04f 32ff 	mov.w	r2, #4294967295
 8003712:	601a      	str	r2, [r3, #0]
					break;
 8003714:	e03f      	b.n	8003796 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003716:	4b31      	ldr	r3, [pc, #196]	@ (80037dc <xTaskIncrementTick+0x150>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003726:	693a      	ldr	r2, [r7, #16]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	429a      	cmp	r2, r3
 800372c:	d203      	bcs.n	8003736 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800372e:	4a2e      	ldr	r2, [pc, #184]	@ (80037e8 <xTaskIncrementTick+0x15c>)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003734:	e02f      	b.n	8003796 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	3304      	adds	r3, #4
 800373a:	4618      	mov	r0, r3
 800373c:	f7fe ff82 	bl	8002644 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	3318      	adds	r3, #24
 800374c:	4618      	mov	r0, r3
 800374e:	f7fe ff79 	bl	8002644 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003756:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <xTaskIncrementTick+0x160>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	429a      	cmp	r2, r3
 800375c:	d903      	bls.n	8003766 <xTaskIncrementTick+0xda>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003762:	4a22      	ldr	r2, [pc, #136]	@ (80037ec <xTaskIncrementTick+0x160>)
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4a1f      	ldr	r2, [pc, #124]	@ (80037f0 <xTaskIncrementTick+0x164>)
 8003774:	441a      	add	r2, r3
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe ff04 	bl	800258a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	4b1b      	ldr	r3, [pc, #108]	@ (80037f4 <xTaskIncrementTick+0x168>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d3b8      	bcc.n	8003702 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003794:	e7b5      	b.n	8003702 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003796:	4b17      	ldr	r3, [pc, #92]	@ (80037f4 <xTaskIncrementTick+0x168>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	4914      	ldr	r1, [pc, #80]	@ (80037f0 <xTaskIncrementTick+0x164>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	440b      	add	r3, r1
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d901      	bls.n	80037b2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80037ae:	2301      	movs	r3, #1
 80037b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80037b2:	4b11      	ldr	r3, [pc, #68]	@ (80037f8 <xTaskIncrementTick+0x16c>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80037ba:	2301      	movs	r3, #1
 80037bc:	617b      	str	r3, [r7, #20]
 80037be:	e004      	b.n	80037ca <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80037c0:	4b0e      	ldr	r3, [pc, #56]	@ (80037fc <xTaskIncrementTick+0x170>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a0d      	ldr	r2, [pc, #52]	@ (80037fc <xTaskIncrementTick+0x170>)
 80037c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80037ca:	697b      	ldr	r3, [r7, #20]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}
 80037d4:	20000cc8 	.word	0x20000cc8
 80037d8:	20000ca4 	.word	0x20000ca4
 80037dc:	20000c58 	.word	0x20000c58
 80037e0:	20000c5c 	.word	0x20000c5c
 80037e4:	20000cb8 	.word	0x20000cb8
 80037e8:	20000cc0 	.word	0x20000cc0
 80037ec:	20000ca8 	.word	0x20000ca8
 80037f0:	200007d0 	.word	0x200007d0
 80037f4:	200007cc 	.word	0x200007cc
 80037f8:	20000cb4 	.word	0x20000cb4
 80037fc:	20000cb0 	.word	0x20000cb0

08003800 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003806:	4b28      	ldr	r3, [pc, #160]	@ (80038a8 <vTaskSwitchContext+0xa8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d003      	beq.n	8003816 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800380e:	4b27      	ldr	r3, [pc, #156]	@ (80038ac <vTaskSwitchContext+0xac>)
 8003810:	2201      	movs	r2, #1
 8003812:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003814:	e042      	b.n	800389c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003816:	4b25      	ldr	r3, [pc, #148]	@ (80038ac <vTaskSwitchContext+0xac>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800381c:	4b24      	ldr	r3, [pc, #144]	@ (80038b0 <vTaskSwitchContext+0xb0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	60fb      	str	r3, [r7, #12]
 8003822:	e011      	b.n	8003848 <vTaskSwitchContext+0x48>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <vTaskSwitchContext+0x42>
	__asm volatile
 800382a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800382e:	f383 8811 	msr	BASEPRI, r3
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	f3bf 8f4f 	dsb	sy
 800383a:	607b      	str	r3, [r7, #4]
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	e7fd      	b.n	800383e <vTaskSwitchContext+0x3e>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	3b01      	subs	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	491a      	ldr	r1, [pc, #104]	@ (80038b4 <vTaskSwitchContext+0xb4>)
 800384a:	68fa      	ldr	r2, [r7, #12]
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	440b      	add	r3, r1
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0e3      	beq.n	8003824 <vTaskSwitchContext+0x24>
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	4613      	mov	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	4413      	add	r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	4a13      	ldr	r2, [pc, #76]	@ (80038b4 <vTaskSwitchContext+0xb4>)
 8003868:	4413      	add	r3, r2
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	685a      	ldr	r2, [r3, #4]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	605a      	str	r2, [r3, #4]
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	3308      	adds	r3, #8
 800387e:	429a      	cmp	r2, r3
 8003880:	d104      	bne.n	800388c <vTaskSwitchContext+0x8c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	605a      	str	r2, [r3, #4]
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	4a09      	ldr	r2, [pc, #36]	@ (80038b8 <vTaskSwitchContext+0xb8>)
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4a06      	ldr	r2, [pc, #24]	@ (80038b0 <vTaskSwitchContext+0xb0>)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6013      	str	r3, [r2, #0]
}
 800389c:	bf00      	nop
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr
 80038a8:	20000cc8 	.word	0x20000cc8
 80038ac:	20000cb4 	.word	0x20000cb4
 80038b0:	20000ca8 	.word	0x20000ca8
 80038b4:	200007d0 	.word	0x200007d0
 80038b8:	200007cc 	.word	0x200007cc

080038bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10b      	bne.n	80038e4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60fb      	str	r3, [r7, #12]
}
 80038de:	bf00      	nop
 80038e0:	bf00      	nop
 80038e2:	e7fd      	b.n	80038e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038e4:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <vTaskPlaceOnEventList+0x48>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	3318      	adds	r3, #24
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7fe fe70 	bl	80025d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80038f2:	2101      	movs	r1, #1
 80038f4:	6838      	ldr	r0, [r7, #0]
 80038f6:	f000 fa81 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
}
 80038fa:	bf00      	nop
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	200007cc 	.word	0x200007cc

08003908 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10b      	bne.n	8003932 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800391a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800391e:	f383 8811 	msr	BASEPRI, r3
 8003922:	f3bf 8f6f 	isb	sy
 8003926:	f3bf 8f4f 	dsb	sy
 800392a:	617b      	str	r3, [r7, #20]
}
 800392c:	bf00      	nop
 800392e:	bf00      	nop
 8003930:	e7fd      	b.n	800392e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003932:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <vTaskPlaceOnEventListRestricted+0x54>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	3318      	adds	r3, #24
 8003938:	4619      	mov	r1, r3
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f7fe fe25 	bl	800258a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d002      	beq.n	800394c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003946:	f04f 33ff 	mov.w	r3, #4294967295
 800394a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68b8      	ldr	r0, [r7, #8]
 8003950:	f000 fa54 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
	}
 8003954:	bf00      	nop
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	200007cc 	.word	0x200007cc

08003960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	68db      	ldr	r3, [r3, #12]
 800396e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	60fb      	str	r3, [r7, #12]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	3318      	adds	r3, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe fe56 	bl	8002644 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003998:	4b1d      	ldr	r3, [pc, #116]	@ (8003a10 <xTaskRemoveFromEventList+0xb0>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d11d      	bne.n	80039dc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f7fe fe4d 	bl	8002644 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ae:	4b19      	ldr	r3, [pc, #100]	@ (8003a14 <xTaskRemoveFromEventList+0xb4>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d903      	bls.n	80039be <xTaskRemoveFromEventList+0x5e>
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ba:	4a16      	ldr	r2, [pc, #88]	@ (8003a14 <xTaskRemoveFromEventList+0xb4>)
 80039bc:	6013      	str	r3, [r2, #0]
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039c2:	4613      	mov	r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	4413      	add	r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	4a13      	ldr	r2, [pc, #76]	@ (8003a18 <xTaskRemoveFromEventList+0xb8>)
 80039cc:	441a      	add	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	3304      	adds	r3, #4
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f7fe fdd8 	bl	800258a <vListInsertEnd>
 80039da:	e005      	b.n	80039e8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	3318      	adds	r3, #24
 80039e0:	4619      	mov	r1, r3
 80039e2:	480e      	ldr	r0, [pc, #56]	@ (8003a1c <xTaskRemoveFromEventList+0xbc>)
 80039e4:	f7fe fdd1 	bl	800258a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003a20 <xTaskRemoveFromEventList+0xc0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d905      	bls.n	8003a02 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80039f6:	2301      	movs	r3, #1
 80039f8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80039fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003a24 <xTaskRemoveFromEventList+0xc4>)
 80039fc:	2201      	movs	r2, #1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	e001      	b.n	8003a06 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003a06:	697b      	ldr	r3, [r7, #20]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000cc8 	.word	0x20000cc8
 8003a14:	20000ca8 	.word	0x20000ca8
 8003a18:	200007d0 	.word	0x200007d0
 8003a1c:	20000c60 	.word	0x20000c60
 8003a20:	200007cc 	.word	0x200007cc
 8003a24:	20000cb4 	.word	0x20000cb4

08003a28 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003a30:	4b06      	ldr	r3, [pc, #24]	@ (8003a4c <vTaskInternalSetTimeOutState+0x24>)
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003a38:	4b05      	ldr	r3, [pc, #20]	@ (8003a50 <vTaskInternalSetTimeOutState+0x28>)
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	605a      	str	r2, [r3, #4]
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	20000cb8 	.word	0x20000cb8
 8003a50:	20000ca4 	.word	0x20000ca4

08003a54 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b088      	sub	sp, #32
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d10b      	bne.n	8003a7c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a68:	f383 8811 	msr	BASEPRI, r3
 8003a6c:	f3bf 8f6f 	isb	sy
 8003a70:	f3bf 8f4f 	dsb	sy
 8003a74:	613b      	str	r3, [r7, #16]
}
 8003a76:	bf00      	nop
 8003a78:	bf00      	nop
 8003a7a:	e7fd      	b.n	8003a78 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10b      	bne.n	8003a9a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	60fb      	str	r3, [r7, #12]
}
 8003a94:	bf00      	nop
 8003a96:	bf00      	nop
 8003a98:	e7fd      	b.n	8003a96 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003a9a:	f000 fe8d 	bl	80047b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a9e:	4b1d      	ldr	r3, [pc, #116]	@ (8003b14 <xTaskCheckForTimeOut+0xc0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab6:	d102      	bne.n	8003abe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	61fb      	str	r3, [r7, #28]
 8003abc:	e023      	b.n	8003b06 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b15      	ldr	r3, [pc, #84]	@ (8003b18 <xTaskCheckForTimeOut+0xc4>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d007      	beq.n	8003ada <xTaskCheckForTimeOut+0x86>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	61fb      	str	r3, [r7, #28]
 8003ad8:	e015      	b.n	8003b06 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	697a      	ldr	r2, [r7, #20]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d20b      	bcs.n	8003afc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1ad2      	subs	r2, r2, r3
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f7ff ff99 	bl	8003a28 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61fb      	str	r3, [r7, #28]
 8003afa:	e004      	b.n	8003b06 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003b02:	2301      	movs	r3, #1
 8003b04:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003b06:	f000 fe89 	bl	800481c <vPortExitCritical>

	return xReturn;
 8003b0a:	69fb      	ldr	r3, [r7, #28]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	20000ca4 	.word	0x20000ca4
 8003b18:	20000cb8 	.word	0x20000cb8

08003b1c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003b20:	4b03      	ldr	r3, [pc, #12]	@ (8003b30 <vTaskMissedYield+0x14>)
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
}
 8003b26:	bf00      	nop
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	20000cb4 	.word	0x20000cb4

08003b34 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003b3c:	f000 f852 	bl	8003be4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <prvIdleTask+0x28>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d9f9      	bls.n	8003b3c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003b48:	4b05      	ldr	r3, [pc, #20]	@ (8003b60 <prvIdleTask+0x2c>)
 8003b4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003b58:	e7f0      	b.n	8003b3c <prvIdleTask+0x8>
 8003b5a:	bf00      	nop
 8003b5c:	200007d0 	.word	0x200007d0
 8003b60:	e000ed04 	.word	0xe000ed04

08003b64 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b082      	sub	sp, #8
 8003b68:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	607b      	str	r3, [r7, #4]
 8003b6e:	e00c      	b.n	8003b8a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	4413      	add	r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4a12      	ldr	r2, [pc, #72]	@ (8003bc4 <prvInitialiseTaskLists+0x60>)
 8003b7c:	4413      	add	r3, r2
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fcd6 	bl	8002530 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b37      	cmp	r3, #55	@ 0x37
 8003b8e:	d9ef      	bls.n	8003b70 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003b90:	480d      	ldr	r0, [pc, #52]	@ (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003b92:	f7fe fccd 	bl	8002530 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003b96:	480d      	ldr	r0, [pc, #52]	@ (8003bcc <prvInitialiseTaskLists+0x68>)
 8003b98:	f7fe fcca 	bl	8002530 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b9c:	480c      	ldr	r0, [pc, #48]	@ (8003bd0 <prvInitialiseTaskLists+0x6c>)
 8003b9e:	f7fe fcc7 	bl	8002530 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003ba2:	480c      	ldr	r0, [pc, #48]	@ (8003bd4 <prvInitialiseTaskLists+0x70>)
 8003ba4:	f7fe fcc4 	bl	8002530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ba8:	480b      	ldr	r0, [pc, #44]	@ (8003bd8 <prvInitialiseTaskLists+0x74>)
 8003baa:	f7fe fcc1 	bl	8002530 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003bae:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <prvInitialiseTaskLists+0x78>)
 8003bb0:	4a05      	ldr	r2, [pc, #20]	@ (8003bc8 <prvInitialiseTaskLists+0x64>)
 8003bb2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003bb4:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <prvInitialiseTaskLists+0x7c>)
 8003bb6:	4a05      	ldr	r2, [pc, #20]	@ (8003bcc <prvInitialiseTaskLists+0x68>)
 8003bb8:	601a      	str	r2, [r3, #0]
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	200007d0 	.word	0x200007d0
 8003bc8:	20000c30 	.word	0x20000c30
 8003bcc:	20000c44 	.word	0x20000c44
 8003bd0:	20000c60 	.word	0x20000c60
 8003bd4:	20000c74 	.word	0x20000c74
 8003bd8:	20000c8c 	.word	0x20000c8c
 8003bdc:	20000c58 	.word	0x20000c58
 8003be0:	20000c5c 	.word	0x20000c5c

08003be4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003bea:	e019      	b.n	8003c20 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003bec:	f000 fde4 	bl	80047b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bf0:	4b10      	ldr	r3, [pc, #64]	@ (8003c34 <prvCheckTasksWaitingTermination+0x50>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe fd21 	bl	8002644 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003c02:	4b0d      	ldr	r3, [pc, #52]	@ (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	4a0b      	ldr	r2, [pc, #44]	@ (8003c38 <prvCheckTasksWaitingTermination+0x54>)
 8003c0a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	4a0a      	ldr	r2, [pc, #40]	@ (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c14:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003c16:	f000 fe01 	bl	800481c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f810 	bl	8003c40 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c20:	4b06      	ldr	r3, [pc, #24]	@ (8003c3c <prvCheckTasksWaitingTermination+0x58>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d1e1      	bne.n	8003bec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000c74 	.word	0x20000c74
 8003c38:	20000ca0 	.word	0x20000ca0
 8003c3c:	20000c88 	.word	0x20000c88

08003c40 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 ff9e 	bl	8004b98 <vPortFree>
				vPortFree( pxTCB );
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 ff9b 	bl	8004b98 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003c62:	e019      	b.n	8003c98 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d103      	bne.n	8003c76 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 ff92 	bl	8004b98 <vPortFree>
	}
 8003c74:	e010      	b.n	8003c98 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d00b      	beq.n	8003c98 <prvDeleteTCB+0x58>
	__asm volatile
 8003c80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c84:	f383 8811 	msr	BASEPRI, r3
 8003c88:	f3bf 8f6f 	isb	sy
 8003c8c:	f3bf 8f4f 	dsb	sy
 8003c90:	60fb      	str	r3, [r7, #12]
}
 8003c92:	bf00      	nop
 8003c94:	bf00      	nop
 8003c96:	e7fd      	b.n	8003c94 <prvDeleteTCB+0x54>
	}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ca6:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd8 <prvResetNextTaskUnblockTime+0x38>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d104      	bne.n	8003cba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003cdc <prvResetNextTaskUnblockTime+0x3c>)
 8003cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8003cb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003cb8:	e008      	b.n	8003ccc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003cba:	4b07      	ldr	r3, [pc, #28]	@ (8003cd8 <prvResetNextTaskUnblockTime+0x38>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	685b      	ldr	r3, [r3, #4]
 8003cc8:	4a04      	ldr	r2, [pc, #16]	@ (8003cdc <prvResetNextTaskUnblockTime+0x3c>)
 8003cca:	6013      	str	r3, [r2, #0]
}
 8003ccc:	bf00      	nop
 8003cce:	370c      	adds	r7, #12
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	20000c58 	.word	0x20000c58
 8003cdc:	20000cc0 	.word	0x20000cc0

08003ce0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <xTaskGetSchedulerState+0x34>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d102      	bne.n	8003cf4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	e008      	b.n	8003d06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cf4:	4b08      	ldr	r3, [pc, #32]	@ (8003d18 <xTaskGetSchedulerState+0x38>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d102      	bne.n	8003d02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	e001      	b.n	8003d06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003d02:	2300      	movs	r3, #0
 8003d04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003d06:	687b      	ldr	r3, [r7, #4]
	}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	20000cac 	.word	0x20000cac
 8003d18:	20000cc8 	.word	0x20000cc8

08003d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d058      	beq.n	8003de4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d32:	4b2f      	ldr	r3, [pc, #188]	@ (8003df0 <xTaskPriorityDisinherit+0xd4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d00b      	beq.n	8003d54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8003d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d40:	f383 8811 	msr	BASEPRI, r3
 8003d44:	f3bf 8f6f 	isb	sy
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	60fb      	str	r3, [r7, #12]
}
 8003d4e:	bf00      	nop
 8003d50:	bf00      	nop
 8003d52:	e7fd      	b.n	8003d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d10b      	bne.n	8003d74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8003d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d60:	f383 8811 	msr	BASEPRI, r3
 8003d64:	f3bf 8f6f 	isb	sy
 8003d68:	f3bf 8f4f 	dsb	sy
 8003d6c:	60bb      	str	r3, [r7, #8]
}
 8003d6e:	bf00      	nop
 8003d70:	bf00      	nop
 8003d72:	e7fd      	b.n	8003d70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d02c      	beq.n	8003de4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d128      	bne.n	8003de4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	3304      	adds	r3, #4
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe fc54 	bl	8002644 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003da8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003db4:	4b0f      	ldr	r3, [pc, #60]	@ (8003df4 <xTaskPriorityDisinherit+0xd8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d903      	bls.n	8003dc4 <xTaskPriorityDisinherit+0xa8>
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8003df4 <xTaskPriorityDisinherit+0xd8>)
 8003dc2:	6013      	str	r3, [r2, #0]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc8:	4613      	mov	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4a09      	ldr	r2, [pc, #36]	@ (8003df8 <xTaskPriorityDisinherit+0xdc>)
 8003dd2:	441a      	add	r2, r3
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	3304      	adds	r3, #4
 8003dd8:	4619      	mov	r1, r3
 8003dda:	4610      	mov	r0, r2
 8003ddc:	f7fe fbd5 	bl	800258a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003de0:	2301      	movs	r3, #1
 8003de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003de4:	697b      	ldr	r3, [r7, #20]
	}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3718      	adds	r7, #24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	200007cc 	.word	0x200007cc
 8003df4:	20000ca8 	.word	0x20000ca8
 8003df8:	200007d0 	.word	0x200007d0

08003dfc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e06:	4b21      	ldr	r3, [pc, #132]	@ (8003e8c <prvAddCurrentTaskToDelayedList+0x90>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0c:	4b20      	ldr	r3, [pc, #128]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fc16 	bl	8002644 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d10a      	bne.n	8003e36 <prvAddCurrentTaskToDelayedList+0x3a>
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e26:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4619      	mov	r1, r3
 8003e2e:	4819      	ldr	r0, [pc, #100]	@ (8003e94 <prvAddCurrentTaskToDelayedList+0x98>)
 8003e30:	f7fe fbab 	bl	800258a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e34:	e026      	b.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e3e:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d209      	bcs.n	8003e62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e4e:	4b12      	ldr	r3, [pc, #72]	@ (8003e98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe fbb9 	bl	80025d2 <vListInsert>
}
 8003e60:	e010      	b.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e62:	4b0e      	ldr	r3, [pc, #56]	@ (8003e9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	4b0a      	ldr	r3, [pc, #40]	@ (8003e90 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4610      	mov	r0, r2
 8003e70:	f7fe fbaf 	bl	80025d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003e74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d202      	bcs.n	8003e84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003e7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ea0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	6013      	str	r3, [r2, #0]
}
 8003e84:	bf00      	nop
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	20000ca4 	.word	0x20000ca4
 8003e90:	200007cc 	.word	0x200007cc
 8003e94:	20000c8c 	.word	0x20000c8c
 8003e98:	20000c5c 	.word	0x20000c5c
 8003e9c:	20000c58 	.word	0x20000c58
 8003ea0:	20000cc0 	.word	0x20000cc0

08003ea4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	@ 0x28
 8003ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003eae:	f000 fb13 	bl	80044d8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003f28 <xTimerCreateTimerTask+0x84>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d021      	beq.n	8003efe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003ec2:	1d3a      	adds	r2, r7, #4
 8003ec4:	f107 0108 	add.w	r1, r7, #8
 8003ec8:	f107 030c 	add.w	r3, r7, #12
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fe fb15 	bl	80024fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003ed2:	6879      	ldr	r1, [r7, #4]
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	9202      	str	r2, [sp, #8]
 8003eda:	9301      	str	r3, [sp, #4]
 8003edc:	2302      	movs	r3, #2
 8003ede:	9300      	str	r3, [sp, #0]
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	460a      	mov	r2, r1
 8003ee4:	4911      	ldr	r1, [pc, #68]	@ (8003f2c <xTimerCreateTimerTask+0x88>)
 8003ee6:	4812      	ldr	r0, [pc, #72]	@ (8003f30 <xTimerCreateTimerTask+0x8c>)
 8003ee8:	f7ff f8d0 	bl	800308c <xTaskCreateStatic>
 8003eec:	4603      	mov	r3, r0
 8003eee:	4a11      	ldr	r2, [pc, #68]	@ (8003f34 <xTimerCreateTimerTask+0x90>)
 8003ef0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003ef2:	4b10      	ldr	r3, [pc, #64]	@ (8003f34 <xTimerCreateTimerTask+0x90>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003efa:	2301      	movs	r3, #1
 8003efc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	613b      	str	r3, [r7, #16]
}
 8003f16:	bf00      	nop
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f1c:	697b      	ldr	r3, [r7, #20]
}
 8003f1e:	4618      	mov	r0, r3
 8003f20:	3718      	adds	r7, #24
 8003f22:	46bd      	mov	sp, r7
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	bf00      	nop
 8003f28:	20000cfc 	.word	0x20000cfc
 8003f2c:	08005774 	.word	0x08005774
 8003f30:	08004071 	.word	0x08004071
 8003f34:	20000d00 	.word	0x20000d00

08003f38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b08a      	sub	sp, #40	@ 0x28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10b      	bne.n	8003f68 <xTimerGenericCommand+0x30>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	623b      	str	r3, [r7, #32]
}
 8003f62:	bf00      	nop
 8003f64:	bf00      	nop
 8003f66:	e7fd      	b.n	8003f64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003f68:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <xTimerGenericCommand+0x98>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02a      	beq.n	8003fc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b05      	cmp	r3, #5
 8003f80:	dc18      	bgt.n	8003fb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003f82:	f7ff fead 	bl	8003ce0 <xTaskGetSchedulerState>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d109      	bne.n	8003fa0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003f8c:	4b10      	ldr	r3, [pc, #64]	@ (8003fd0 <xTimerGenericCommand+0x98>)
 8003f8e:	6818      	ldr	r0, [r3, #0]
 8003f90:	f107 0110 	add.w	r1, r7, #16
 8003f94:	2300      	movs	r3, #0
 8003f96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f98:	f7fe fc88 	bl	80028ac <xQueueGenericSend>
 8003f9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f9e:	e012      	b.n	8003fc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003fa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003fd0 <xTimerGenericCommand+0x98>)
 8003fa2:	6818      	ldr	r0, [r3, #0]
 8003fa4:	f107 0110 	add.w	r1, r7, #16
 8003fa8:	2300      	movs	r3, #0
 8003faa:	2200      	movs	r2, #0
 8003fac:	f7fe fc7e 	bl	80028ac <xQueueGenericSend>
 8003fb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8003fb2:	e008      	b.n	8003fc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003fb4:	4b06      	ldr	r3, [pc, #24]	@ (8003fd0 <xTimerGenericCommand+0x98>)
 8003fb6:	6818      	ldr	r0, [r3, #0]
 8003fb8:	f107 0110 	add.w	r1, r7, #16
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	683a      	ldr	r2, [r7, #0]
 8003fc0:	f7fe fd76 	bl	8002ab0 <xQueueGenericSendFromISR>
 8003fc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3728      	adds	r7, #40	@ 0x28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000cfc 	.word	0x20000cfc

08003fd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b088      	sub	sp, #32
 8003fd8:	af02      	add	r7, sp, #8
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fde:	4b23      	ldr	r3, [pc, #140]	@ (800406c <prvProcessExpiredTimer+0x98>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	3304      	adds	r3, #4
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fe fb29 	bl	8002644 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ff8:	f003 0304 	and.w	r3, r3, #4
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d023      	beq.n	8004048 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	699a      	ldr	r2, [r3, #24]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	18d1      	adds	r1, r2, r3
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	6978      	ldr	r0, [r7, #20]
 800400e:	f000 f8d5 	bl	80041bc <prvInsertTimerInActiveList>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d020      	beq.n	800405a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004018:	2300      	movs	r3, #0
 800401a:	9300      	str	r3, [sp, #0]
 800401c:	2300      	movs	r3, #0
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	2100      	movs	r1, #0
 8004022:	6978      	ldr	r0, [r7, #20]
 8004024:	f7ff ff88 	bl	8003f38 <xTimerGenericCommand>
 8004028:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d114      	bne.n	800405a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004030:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004034:	f383 8811 	msr	BASEPRI, r3
 8004038:	f3bf 8f6f 	isb	sy
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	60fb      	str	r3, [r7, #12]
}
 8004042:	bf00      	nop
 8004044:	bf00      	nop
 8004046:	e7fd      	b.n	8004044 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800404e:	f023 0301 	bic.w	r3, r3, #1
 8004052:	b2da      	uxtb	r2, r3
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	6978      	ldr	r0, [r7, #20]
 8004060:	4798      	blx	r3
}
 8004062:	bf00      	nop
 8004064:	3718      	adds	r7, #24
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}
 800406a:	bf00      	nop
 800406c:	20000cf4 	.word	0x20000cf4

08004070 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b084      	sub	sp, #16
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004078:	f107 0308 	add.w	r3, r7, #8
 800407c:	4618      	mov	r0, r3
 800407e:	f000 f859 	bl	8004134 <prvGetNextExpireTime>
 8004082:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	4619      	mov	r1, r3
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f000 f805 	bl	8004098 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800408e:	f000 f8d7 	bl	8004240 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004092:	bf00      	nop
 8004094:	e7f0      	b.n	8004078 <prvTimerTask+0x8>
	...

08004098 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b084      	sub	sp, #16
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
 80040a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040a2:	f7ff fa37 	bl	8003514 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040a6:	f107 0308 	add.w	r3, r7, #8
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f866 	bl	800417c <prvSampleTimeNow>
 80040b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d130      	bne.n	800411a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10a      	bne.n	80040d4 <prvProcessTimerOrBlockTask+0x3c>
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d806      	bhi.n	80040d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80040c6:	f7ff fa33 	bl	8003530 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80040ca:	68f9      	ldr	r1, [r7, #12]
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff ff81 	bl	8003fd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80040d2:	e024      	b.n	800411e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80040da:	4b13      	ldr	r3, [pc, #76]	@ (8004128 <prvProcessTimerOrBlockTask+0x90>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <prvProcessTimerOrBlockTask+0x50>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <prvProcessTimerOrBlockTask+0x52>
 80040e8:	2300      	movs	r3, #0
 80040ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80040ec:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <prvProcessTimerOrBlockTask+0x94>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	f7fe ff93 	bl	8003024 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80040fe:	f7ff fa17 	bl	8003530 <xTaskResumeAll>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004108:	4b09      	ldr	r3, [pc, #36]	@ (8004130 <prvProcessTimerOrBlockTask+0x98>)
 800410a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	f3bf 8f6f 	isb	sy
}
 8004118:	e001      	b.n	800411e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800411a:	f7ff fa09 	bl	8003530 <xTaskResumeAll>
}
 800411e:	bf00      	nop
 8004120:	3710      	adds	r7, #16
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
 8004126:	bf00      	nop
 8004128:	20000cf8 	.word	0x20000cf8
 800412c:	20000cfc 	.word	0x20000cfc
 8004130:	e000ed04 	.word	0xe000ed04

08004134 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800413c:	4b0e      	ldr	r3, [pc, #56]	@ (8004178 <prvGetNextExpireTime+0x44>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <prvGetNextExpireTime+0x16>
 8004146:	2201      	movs	r2, #1
 8004148:	e000      	b.n	800414c <prvGetNextExpireTime+0x18>
 800414a:	2200      	movs	r2, #0
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d105      	bne.n	8004164 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004158:	4b07      	ldr	r3, [pc, #28]	@ (8004178 <prvGetNextExpireTime+0x44>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	60fb      	str	r3, [r7, #12]
 8004162:	e001      	b.n	8004168 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004168:	68fb      	ldr	r3, [r7, #12]
}
 800416a:	4618      	mov	r0, r3
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	20000cf4 	.word	0x20000cf4

0800417c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004184:	f7ff fa72 	bl	800366c <xTaskGetTickCount>
 8004188:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800418a:	4b0b      	ldr	r3, [pc, #44]	@ (80041b8 <prvSampleTimeNow+0x3c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	68fa      	ldr	r2, [r7, #12]
 8004190:	429a      	cmp	r2, r3
 8004192:	d205      	bcs.n	80041a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004194:	f000 f93a 	bl	800440c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	e002      	b.n	80041a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80041a6:	4a04      	ldr	r2, [pc, #16]	@ (80041b8 <prvSampleTimeNow+0x3c>)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80041ac:	68fb      	ldr	r3, [r7, #12]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000d04 	.word	0x20000d04

080041bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	60b9      	str	r1, [r7, #8]
 80041c6:	607a      	str	r2, [r7, #4]
 80041c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68ba      	ldr	r2, [r7, #8]
 80041d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80041da:	68ba      	ldr	r2, [r7, #8]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	429a      	cmp	r2, r3
 80041e0:	d812      	bhi.n	8004208 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d302      	bcc.n	80041f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80041f0:	2301      	movs	r3, #1
 80041f2:	617b      	str	r3, [r7, #20]
 80041f4:	e01b      	b.n	800422e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80041f6:	4b10      	ldr	r3, [pc, #64]	@ (8004238 <prvInsertTimerInActiveList+0x7c>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3304      	adds	r3, #4
 80041fe:	4619      	mov	r1, r3
 8004200:	4610      	mov	r0, r2
 8004202:	f7fe f9e6 	bl	80025d2 <vListInsert>
 8004206:	e012      	b.n	800422e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004208:	687a      	ldr	r2, [r7, #4]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	429a      	cmp	r2, r3
 800420e:	d206      	bcs.n	800421e <prvInsertTimerInActiveList+0x62>
 8004210:	68ba      	ldr	r2, [r7, #8]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	429a      	cmp	r2, r3
 8004216:	d302      	bcc.n	800421e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004218:	2301      	movs	r3, #1
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e007      	b.n	800422e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800421e:	4b07      	ldr	r3, [pc, #28]	@ (800423c <prvInsertTimerInActiveList+0x80>)
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f7fe f9d2 	bl	80025d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800422e:	697b      	ldr	r3, [r7, #20]
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	20000cf8 	.word	0x20000cf8
 800423c:	20000cf4 	.word	0x20000cf4

08004240 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b08e      	sub	sp, #56	@ 0x38
 8004244:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004246:	e0ce      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	da19      	bge.n	8004282 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800424e:	1d3b      	adds	r3, r7, #4
 8004250:	3304      	adds	r3, #4
 8004252:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004254:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	61fb      	str	r3, [r7, #28]
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004278:	6850      	ldr	r0, [r2, #4]
 800427a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800427c:	6892      	ldr	r2, [r2, #8]
 800427e:	4611      	mov	r1, r2
 8004280:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	f2c0 80ae 	blt.w	80043e6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800428e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004298:	3304      	adds	r3, #4
 800429a:	4618      	mov	r0, r3
 800429c:	f7fe f9d2 	bl	8002644 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042a0:	463b      	mov	r3, r7
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7ff ff6a 	bl	800417c <prvSampleTimeNow>
 80042a8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b09      	cmp	r3, #9
 80042ae:	f200 8097 	bhi.w	80043e0 <prvProcessReceivedCommands+0x1a0>
 80042b2:	a201      	add	r2, pc, #4	@ (adr r2, 80042b8 <prvProcessReceivedCommands+0x78>)
 80042b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042b8:	080042e1 	.word	0x080042e1
 80042bc:	080042e1 	.word	0x080042e1
 80042c0:	080042e1 	.word	0x080042e1
 80042c4:	08004357 	.word	0x08004357
 80042c8:	0800436b 	.word	0x0800436b
 80042cc:	080043b7 	.word	0x080043b7
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	080042e1 	.word	0x080042e1
 80042d8:	08004357 	.word	0x08004357
 80042dc:	0800436b 	.word	0x0800436b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042e6:	f043 0301 	orr.w	r3, r3, #1
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80042f2:	68ba      	ldr	r2, [r7, #8]
 80042f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	18d1      	adds	r1, r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004300:	f7ff ff5c 	bl	80041bc <prvInsertTimerInActiveList>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d06c      	beq.n	80043e4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800430a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004310:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004314:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d061      	beq.n	80043e4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	441a      	add	r2, r3
 8004328:	2300      	movs	r3, #0
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	2300      	movs	r3, #0
 800432e:	2100      	movs	r1, #0
 8004330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004332:	f7ff fe01 	bl	8003f38 <xTimerGenericCommand>
 8004336:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004338:	6a3b      	ldr	r3, [r7, #32]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d152      	bne.n	80043e4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800433e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004342:	f383 8811 	msr	BASEPRI, r3
 8004346:	f3bf 8f6f 	isb	sy
 800434a:	f3bf 8f4f 	dsb	sy
 800434e:	61bb      	str	r3, [r7, #24]
}
 8004350:	bf00      	nop
 8004352:	bf00      	nop
 8004354:	e7fd      	b.n	8004352 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004358:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800435c:	f023 0301 	bic.w	r3, r3, #1
 8004360:	b2da      	uxtb	r2, r3
 8004362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004364:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004368:	e03d      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800436a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800436c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004378:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004380:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10b      	bne.n	80043a2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	617b      	str	r3, [r7, #20]
}
 800439c:	bf00      	nop
 800439e:	bf00      	nop
 80043a0:	e7fd      	b.n	800439e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a4:	699a      	ldr	r2, [r3, #24]
 80043a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043a8:	18d1      	adds	r1, r2, r3
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043b0:	f7ff ff04 	bl	80041bc <prvInsertTimerInActiveList>
					break;
 80043b4:	e017      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80043b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d103      	bne.n	80043cc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80043c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043c6:	f000 fbe7 	bl	8004b98 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80043ca:	e00c      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80043d2:	f023 0301 	bic.w	r3, r3, #1
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80043de:	e002      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80043e0:	bf00      	nop
 80043e2:	e000      	b.n	80043e6 <prvProcessReceivedCommands+0x1a6>
					break;
 80043e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043e6:	4b08      	ldr	r3, [pc, #32]	@ (8004408 <prvProcessReceivedCommands+0x1c8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	1d39      	adds	r1, r7, #4
 80043ec:	2200      	movs	r2, #0
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fbfc 	bl	8002bec <xQueueReceive>
 80043f4:	4603      	mov	r3, r0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	f47f af26 	bne.w	8004248 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80043fc:	bf00      	nop
 80043fe:	bf00      	nop
 8004400:	3730      	adds	r7, #48	@ 0x30
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20000cfc 	.word	0x20000cfc

0800440c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004412:	e049      	b.n	80044a8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004414:	4b2e      	ldr	r3, [pc, #184]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441e:	4b2c      	ldr	r3, [pc, #176]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	68db      	ldr	r3, [r3, #12]
 8004426:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3304      	adds	r3, #4
 800442c:	4618      	mov	r0, r3
 800442e:	f7fe f909 	bl	8002644 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004440:	f003 0304 	and.w	r3, r3, #4
 8004444:	2b00      	cmp	r3, #0
 8004446:	d02f      	beq.n	80044a8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	4413      	add	r3, r2
 8004450:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004452:	68ba      	ldr	r2, [r7, #8]
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	429a      	cmp	r2, r3
 8004458:	d90e      	bls.n	8004478 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004466:	4b1a      	ldr	r3, [pc, #104]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3304      	adds	r3, #4
 800446e:	4619      	mov	r1, r3
 8004470:	4610      	mov	r0, r2
 8004472:	f7fe f8ae 	bl	80025d2 <vListInsert>
 8004476:	e017      	b.n	80044a8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004478:	2300      	movs	r3, #0
 800447a:	9300      	str	r3, [sp, #0]
 800447c:	2300      	movs	r3, #0
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	2100      	movs	r1, #0
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f7ff fd58 	bl	8003f38 <xTimerGenericCommand>
 8004488:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d10b      	bne.n	80044a8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	603b      	str	r3, [r7, #0]
}
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044a8:	4b09      	ldr	r3, [pc, #36]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1b0      	bne.n	8004414 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80044b2:	4b07      	ldr	r3, [pc, #28]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80044b8:	4b06      	ldr	r3, [pc, #24]	@ (80044d4 <prvSwitchTimerLists+0xc8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a04      	ldr	r2, [pc, #16]	@ (80044d0 <prvSwitchTimerLists+0xc4>)
 80044be:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80044c0:	4a04      	ldr	r2, [pc, #16]	@ (80044d4 <prvSwitchTimerLists+0xc8>)
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	6013      	str	r3, [r2, #0]
}
 80044c6:	bf00      	nop
 80044c8:	3718      	adds	r7, #24
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	20000cf4 	.word	0x20000cf4
 80044d4:	20000cf8 	.word	0x20000cf8

080044d8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80044de:	f000 f96b 	bl	80047b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80044e2:	4b15      	ldr	r3, [pc, #84]	@ (8004538 <prvCheckForValidListAndQueue+0x60>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d120      	bne.n	800452c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80044ea:	4814      	ldr	r0, [pc, #80]	@ (800453c <prvCheckForValidListAndQueue+0x64>)
 80044ec:	f7fe f820 	bl	8002530 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80044f0:	4813      	ldr	r0, [pc, #76]	@ (8004540 <prvCheckForValidListAndQueue+0x68>)
 80044f2:	f7fe f81d 	bl	8002530 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80044f6:	4b13      	ldr	r3, [pc, #76]	@ (8004544 <prvCheckForValidListAndQueue+0x6c>)
 80044f8:	4a10      	ldr	r2, [pc, #64]	@ (800453c <prvCheckForValidListAndQueue+0x64>)
 80044fa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80044fc:	4b12      	ldr	r3, [pc, #72]	@ (8004548 <prvCheckForValidListAndQueue+0x70>)
 80044fe:	4a10      	ldr	r2, [pc, #64]	@ (8004540 <prvCheckForValidListAndQueue+0x68>)
 8004500:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004502:	2300      	movs	r3, #0
 8004504:	9300      	str	r3, [sp, #0]
 8004506:	4b11      	ldr	r3, [pc, #68]	@ (800454c <prvCheckForValidListAndQueue+0x74>)
 8004508:	4a11      	ldr	r2, [pc, #68]	@ (8004550 <prvCheckForValidListAndQueue+0x78>)
 800450a:	2110      	movs	r1, #16
 800450c:	200a      	movs	r0, #10
 800450e:	f7fe f92d 	bl	800276c <xQueueGenericCreateStatic>
 8004512:	4603      	mov	r3, r0
 8004514:	4a08      	ldr	r2, [pc, #32]	@ (8004538 <prvCheckForValidListAndQueue+0x60>)
 8004516:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004518:	4b07      	ldr	r3, [pc, #28]	@ (8004538 <prvCheckForValidListAndQueue+0x60>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004520:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <prvCheckForValidListAndQueue+0x60>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	490b      	ldr	r1, [pc, #44]	@ (8004554 <prvCheckForValidListAndQueue+0x7c>)
 8004526:	4618      	mov	r0, r3
 8004528:	f7fe fd52 	bl	8002fd0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800452c:	f000 f976 	bl	800481c <vPortExitCritical>
}
 8004530:	bf00      	nop
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
 8004536:	bf00      	nop
 8004538:	20000cfc 	.word	0x20000cfc
 800453c:	20000ccc 	.word	0x20000ccc
 8004540:	20000ce0 	.word	0x20000ce0
 8004544:	20000cf4 	.word	0x20000cf4
 8004548:	20000cf8 	.word	0x20000cf8
 800454c:	20000da8 	.word	0x20000da8
 8004550:	20000d08 	.word	0x20000d08
 8004554:	0800577c 	.word	0x0800577c

08004558 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3b04      	subs	r3, #4
 8004568:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004570:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3b04      	subs	r3, #4
 8004576:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3b04      	subs	r3, #4
 8004586:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004588:	4a0c      	ldr	r2, [pc, #48]	@ (80045bc <pxPortInitialiseStack+0x64>)
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	3b14      	subs	r3, #20
 8004592:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	3b04      	subs	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f06f 0202 	mvn.w	r2, #2
 80045a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	3b20      	subs	r3, #32
 80045ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045ae:	68fb      	ldr	r3, [r7, #12]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr
 80045bc:	080045c1 	.word	0x080045c1

080045c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045c6:	2300      	movs	r3, #0
 80045c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ca:	4b13      	ldr	r3, [pc, #76]	@ (8004618 <prvTaskExitError+0x58>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d2:	d00b      	beq.n	80045ec <prvTaskExitError+0x2c>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	60fb      	str	r3, [r7, #12]
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <prvTaskExitError+0x28>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
}
 80045fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004600:	bf00      	nop
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d0fc      	beq.n	8004602 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004608:	bf00      	nop
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr
 8004616:	bf00      	nop
 8004618:	2000000c 	.word	0x2000000c
 800461c:	00000000 	.word	0x00000000

08004620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004620:	4b07      	ldr	r3, [pc, #28]	@ (8004640 <pxCurrentTCBConst2>)
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f380 8809 	msr	PSP, r0
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	4770      	bx	lr
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst2>:
 8004640:	200007cc 	.word	0x200007cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004648:	4808      	ldr	r0, [pc, #32]	@ (800466c <prvPortStartFirstTask+0x24>)
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f380 8808 	msr	MSP, r0
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8814 	msr	CONTROL, r0
 800465a:	b662      	cpsie	i
 800465c:	b661      	cpsie	f
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	df00      	svc	0
 8004668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800466a:	bf00      	nop
 800466c:	e000ed08 	.word	0xe000ed08

08004670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004676:	4b47      	ldr	r3, [pc, #284]	@ (8004794 <xPortStartScheduler+0x124>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a47      	ldr	r2, [pc, #284]	@ (8004798 <xPortStartScheduler+0x128>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10b      	bne.n	8004698 <xPortStartScheduler+0x28>
	__asm volatile
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	60fb      	str	r3, [r7, #12]
}
 8004692:	bf00      	nop
 8004694:	bf00      	nop
 8004696:	e7fd      	b.n	8004694 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004698:	4b3e      	ldr	r3, [pc, #248]	@ (8004794 <xPortStartScheduler+0x124>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a3f      	ldr	r2, [pc, #252]	@ (800479c <xPortStartScheduler+0x12c>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d10b      	bne.n	80046ba <xPortStartScheduler+0x4a>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	613b      	str	r3, [r7, #16]
}
 80046b4:	bf00      	nop
 80046b6:	bf00      	nop
 80046b8:	e7fd      	b.n	80046b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046ba:	4b39      	ldr	r3, [pc, #228]	@ (80047a0 <xPortStartScheduler+0x130>)
 80046bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	22ff      	movs	r2, #255	@ 0xff
 80046ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <xPortStartScheduler+0x134>)
 80046e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046e2:	4b31      	ldr	r3, [pc, #196]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046e4:	2207      	movs	r2, #7
 80046e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046e8:	e009      	b.n	80046fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80046ea:	4b2f      	ldr	r3, [pc, #188]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	3b01      	subs	r3, #1
 80046f0:	4a2d      	ldr	r2, [pc, #180]	@ (80047a8 <xPortStartScheduler+0x138>)
 80046f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	005b      	lsls	r3, r3, #1
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046fe:	78fb      	ldrb	r3, [r7, #3]
 8004700:	b2db      	uxtb	r3, r3
 8004702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004706:	2b80      	cmp	r3, #128	@ 0x80
 8004708:	d0ef      	beq.n	80046ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800470a:	4b27      	ldr	r3, [pc, #156]	@ (80047a8 <xPortStartScheduler+0x138>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f1c3 0307 	rsb	r3, r3, #7
 8004712:	2b04      	cmp	r3, #4
 8004714:	d00b      	beq.n	800472e <xPortStartScheduler+0xbe>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800471a:	f383 8811 	msr	BASEPRI, r3
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	f3bf 8f4f 	dsb	sy
 8004726:	60bb      	str	r3, [r7, #8]
}
 8004728:	bf00      	nop
 800472a:	bf00      	nop
 800472c:	e7fd      	b.n	800472a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800472e:	4b1e      	ldr	r3, [pc, #120]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	021b      	lsls	r3, r3, #8
 8004734:	4a1c      	ldr	r2, [pc, #112]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004736:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004738:	4b1b      	ldr	r3, [pc, #108]	@ (80047a8 <xPortStartScheduler+0x138>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004740:	4a19      	ldr	r2, [pc, #100]	@ (80047a8 <xPortStartScheduler+0x138>)
 8004742:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	b2da      	uxtb	r2, r3
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800474c:	4b17      	ldr	r3, [pc, #92]	@ (80047ac <xPortStartScheduler+0x13c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a16      	ldr	r2, [pc, #88]	@ (80047ac <xPortStartScheduler+0x13c>)
 8004752:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004756:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004758:	4b14      	ldr	r3, [pc, #80]	@ (80047ac <xPortStartScheduler+0x13c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a13      	ldr	r2, [pc, #76]	@ (80047ac <xPortStartScheduler+0x13c>)
 800475e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004762:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004764:	f000 f8da 	bl	800491c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004768:	4b11      	ldr	r3, [pc, #68]	@ (80047b0 <xPortStartScheduler+0x140>)
 800476a:	2200      	movs	r2, #0
 800476c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800476e:	f000 f8f9 	bl	8004964 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004772:	4b10      	ldr	r3, [pc, #64]	@ (80047b4 <xPortStartScheduler+0x144>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a0f      	ldr	r2, [pc, #60]	@ (80047b4 <xPortStartScheduler+0x144>)
 8004778:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800477c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800477e:	f7ff ff63 	bl	8004648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004782:	f7ff f83d 	bl	8003800 <vTaskSwitchContext>
	prvTaskExitError();
 8004786:	f7ff ff1b 	bl	80045c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	e000ed00 	.word	0xe000ed00
 8004798:	410fc271 	.word	0x410fc271
 800479c:	410fc270 	.word	0x410fc270
 80047a0:	e000e400 	.word	0xe000e400
 80047a4:	20000df8 	.word	0x20000df8
 80047a8:	20000dfc 	.word	0x20000dfc
 80047ac:	e000ed20 	.word	0xe000ed20
 80047b0:	2000000c 	.word	0x2000000c
 80047b4:	e000ef34 	.word	0xe000ef34

080047b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
	__asm volatile
 80047be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047c2:	f383 8811 	msr	BASEPRI, r3
 80047c6:	f3bf 8f6f 	isb	sy
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	607b      	str	r3, [r7, #4]
}
 80047d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047d2:	4b10      	ldr	r3, [pc, #64]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	4a0e      	ldr	r2, [pc, #56]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <vPortEnterCritical+0x5c>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d110      	bne.n	8004806 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004818 <vPortEnterCritical+0x60>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00b      	beq.n	8004806 <vPortEnterCritical+0x4e>
	__asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	603b      	str	r3, [r7, #0]
}
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <vPortEnterCritical+0x4a>
	}
}
 8004806:	bf00      	nop
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	2000000c 	.word	0x2000000c
 8004818:	e000ed04 	.word	0xe000ed04

0800481c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004822:	4b12      	ldr	r3, [pc, #72]	@ (800486c <vPortExitCritical+0x50>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d10b      	bne.n	8004842 <vPortExitCritical+0x26>
	__asm volatile
 800482a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800482e:	f383 8811 	msr	BASEPRI, r3
 8004832:	f3bf 8f6f 	isb	sy
 8004836:	f3bf 8f4f 	dsb	sy
 800483a:	607b      	str	r3, [r7, #4]
}
 800483c:	bf00      	nop
 800483e:	bf00      	nop
 8004840:	e7fd      	b.n	800483e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004842:	4b0a      	ldr	r3, [pc, #40]	@ (800486c <vPortExitCritical+0x50>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	3b01      	subs	r3, #1
 8004848:	4a08      	ldr	r2, [pc, #32]	@ (800486c <vPortExitCritical+0x50>)
 800484a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800484c:	4b07      	ldr	r3, [pc, #28]	@ (800486c <vPortExitCritical+0x50>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <vPortExitCritical+0x44>
 8004854:	2300      	movs	r3, #0
 8004856:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	f383 8811 	msr	BASEPRI, r3
}
 800485e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	2000000c 	.word	0x2000000c

08004870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004870:	f3ef 8009 	mrs	r0, PSP
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	4b15      	ldr	r3, [pc, #84]	@ (80048d0 <pxCurrentTCBConst>)
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	f01e 0f10 	tst.w	lr, #16
 8004880:	bf08      	it	eq
 8004882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800488a:	6010      	str	r0, [r2, #0]
 800488c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004890:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004894:	f380 8811 	msr	BASEPRI, r0
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f7fe ffae 	bl	8003800 <vTaskSwitchContext>
 80048a4:	f04f 0000 	mov.w	r0, #0
 80048a8:	f380 8811 	msr	BASEPRI, r0
 80048ac:	bc09      	pop	{r0, r3}
 80048ae:	6819      	ldr	r1, [r3, #0]
 80048b0:	6808      	ldr	r0, [r1, #0]
 80048b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048b6:	f01e 0f10 	tst.w	lr, #16
 80048ba:	bf08      	it	eq
 80048bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048c0:	f380 8809 	msr	PSP, r0
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	f3af 8000 	nop.w

080048d0 <pxCurrentTCBConst>:
 80048d0:	200007cc 	.word	0x200007cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048d4:	bf00      	nop
 80048d6:	bf00      	nop

080048d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	607b      	str	r3, [r7, #4]
}
 80048f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048f2:	f7fe fecb 	bl	800368c <xTaskIncrementTick>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d003      	beq.n	8004904 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048fc:	4b06      	ldr	r3, [pc, #24]	@ (8004918 <xPortSysTickHandler+0x40>)
 80048fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004902:	601a      	str	r2, [r3, #0]
 8004904:	2300      	movs	r3, #0
 8004906:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	f383 8811 	msr	BASEPRI, r3
}
 800490e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004920:	4b0b      	ldr	r3, [pc, #44]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004922:	2200      	movs	r2, #0
 8004924:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004926:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <vPortSetupTimerInterrupt+0x38>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800492c:	4b0a      	ldr	r3, [pc, #40]	@ (8004958 <vPortSetupTimerInterrupt+0x3c>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <vPortSetupTimerInterrupt+0x40>)
 8004932:	fba2 2303 	umull	r2, r3, r2, r3
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	4a09      	ldr	r2, [pc, #36]	@ (8004960 <vPortSetupTimerInterrupt+0x44>)
 800493a:	3b01      	subs	r3, #1
 800493c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800493e:	4b04      	ldr	r3, [pc, #16]	@ (8004950 <vPortSetupTimerInterrupt+0x34>)
 8004940:	2207      	movs	r2, #7
 8004942:	601a      	str	r2, [r3, #0]
}
 8004944:	bf00      	nop
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	e000e010 	.word	0xe000e010
 8004954:	e000e018 	.word	0xe000e018
 8004958:	20000000 	.word	0x20000000
 800495c:	10624dd3 	.word	0x10624dd3
 8004960:	e000e014 	.word	0xe000e014

08004964 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004964:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004974 <vPortEnableVFP+0x10>
 8004968:	6801      	ldr	r1, [r0, #0]
 800496a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800496e:	6001      	str	r1, [r0, #0]
 8004970:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004972:	bf00      	nop
 8004974:	e000ed88 	.word	0xe000ed88

08004978 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800497e:	f3ef 8305 	mrs	r3, IPSR
 8004982:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2b0f      	cmp	r3, #15
 8004988:	d915      	bls.n	80049b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800498a:	4a18      	ldr	r2, [pc, #96]	@ (80049ec <vPortValidateInterruptPriority+0x74>)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004994:	4b16      	ldr	r3, [pc, #88]	@ (80049f0 <vPortValidateInterruptPriority+0x78>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	7afa      	ldrb	r2, [r7, #11]
 800499a:	429a      	cmp	r2, r3
 800499c:	d20b      	bcs.n	80049b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	607b      	str	r3, [r7, #4]
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	e7fd      	b.n	80049b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80049b6:	4b0f      	ldr	r3, [pc, #60]	@ (80049f4 <vPortValidateInterruptPriority+0x7c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049be:	4b0e      	ldr	r3, [pc, #56]	@ (80049f8 <vPortValidateInterruptPriority+0x80>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90b      	bls.n	80049de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	603b      	str	r3, [r7, #0]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <vPortValidateInterruptPriority+0x62>
	}
 80049de:	bf00      	nop
 80049e0:	3714      	adds	r7, #20
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	e000e3f0 	.word	0xe000e3f0
 80049f0:	20000df8 	.word	0x20000df8
 80049f4:	e000ed0c 	.word	0xe000ed0c
 80049f8:	20000dfc 	.word	0x20000dfc

080049fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08a      	sub	sp, #40	@ 0x28
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a04:	2300      	movs	r3, #0
 8004a06:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a08:	f7fe fd84 	bl	8003514 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a0c:	4b5c      	ldr	r3, [pc, #368]	@ (8004b80 <pvPortMalloc+0x184>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a14:	f000 f924 	bl	8004c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a18:	4b5a      	ldr	r3, [pc, #360]	@ (8004b84 <pvPortMalloc+0x188>)
 8004a1a:	681a      	ldr	r2, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	f040 8095 	bne.w	8004b50 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d01e      	beq.n	8004a6a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004a2c:	2208      	movs	r2, #8
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4413      	add	r3, r2
 8004a32:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f003 0307 	and.w	r3, r3, #7
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d015      	beq.n	8004a6a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f023 0307 	bic.w	r3, r3, #7
 8004a44:	3308      	adds	r3, #8
 8004a46:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f003 0307 	and.w	r3, r3, #7
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d00b      	beq.n	8004a6a <pvPortMalloc+0x6e>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	617b      	str	r3, [r7, #20]
}
 8004a64:	bf00      	nop
 8004a66:	bf00      	nop
 8004a68:	e7fd      	b.n	8004a66 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d06f      	beq.n	8004b50 <pvPortMalloc+0x154>
 8004a70:	4b45      	ldr	r3, [pc, #276]	@ (8004b88 <pvPortMalloc+0x18c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d86a      	bhi.n	8004b50 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004a7a:	4b44      	ldr	r3, [pc, #272]	@ (8004b8c <pvPortMalloc+0x190>)
 8004a7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004a7e:	4b43      	ldr	r3, [pc, #268]	@ (8004b8c <pvPortMalloc+0x190>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a84:	e004      	b.n	8004a90 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	429a      	cmp	r2, r3
 8004a98:	d903      	bls.n	8004aa2 <pvPortMalloc+0xa6>
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1f1      	bne.n	8004a86 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aa2:	4b37      	ldr	r3, [pc, #220]	@ (8004b80 <pvPortMalloc+0x184>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d051      	beq.n	8004b50 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2208      	movs	r2, #8
 8004ab2:	4413      	add	r3, r2
 8004ab4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	685a      	ldr	r2, [r3, #4]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	1ad2      	subs	r2, r2, r3
 8004ac6:	2308      	movs	r3, #8
 8004ac8:	005b      	lsls	r3, r3, #1
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d920      	bls.n	8004b10 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ace:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00b      	beq.n	8004af8 <pvPortMalloc+0xfc>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	bf00      	nop
 8004af6:	e7fd      	b.n	8004af4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	1ad2      	subs	r2, r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b0a:	69b8      	ldr	r0, [r7, #24]
 8004b0c:	f000 f90a 	bl	8004d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	@ (8004b88 <pvPortMalloc+0x18c>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <pvPortMalloc+0x18c>)
 8004b1c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b88 <pvPortMalloc+0x18c>)
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <pvPortMalloc+0x194>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d203      	bcs.n	8004b32 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b2a:	4b17      	ldr	r3, [pc, #92]	@ (8004b88 <pvPortMalloc+0x18c>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a18      	ldr	r2, [pc, #96]	@ (8004b90 <pvPortMalloc+0x194>)
 8004b30:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4b13      	ldr	r3, [pc, #76]	@ (8004b84 <pvPortMalloc+0x188>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b46:	4b13      	ldr	r3, [pc, #76]	@ (8004b94 <pvPortMalloc+0x198>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	4a11      	ldr	r2, [pc, #68]	@ (8004b94 <pvPortMalloc+0x198>)
 8004b4e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b50:	f7fe fcee 	bl	8003530 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	f003 0307 	and.w	r3, r3, #7
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00b      	beq.n	8004b76 <pvPortMalloc+0x17a>
	__asm volatile
 8004b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	60fb      	str	r3, [r7, #12]
}
 8004b70:	bf00      	nop
 8004b72:	bf00      	nop
 8004b74:	e7fd      	b.n	8004b72 <pvPortMalloc+0x176>
	return pvReturn;
 8004b76:	69fb      	ldr	r3, [r7, #28]
}
 8004b78:	4618      	mov	r0, r3
 8004b7a:	3728      	adds	r7, #40	@ 0x28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20004a08 	.word	0x20004a08
 8004b84:	20004a1c 	.word	0x20004a1c
 8004b88:	20004a0c 	.word	0x20004a0c
 8004b8c:	20004a00 	.word	0x20004a00
 8004b90:	20004a10 	.word	0x20004a10
 8004b94:	20004a14 	.word	0x20004a14

08004b98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b086      	sub	sp, #24
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d04f      	beq.n	8004c4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004baa:	2308      	movs	r3, #8
 8004bac:	425b      	negs	r3, r3
 8004bae:	697a      	ldr	r2, [r7, #20]
 8004bb0:	4413      	add	r3, r2
 8004bb2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	4b25      	ldr	r3, [pc, #148]	@ (8004c54 <vPortFree+0xbc>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10b      	bne.n	8004bde <vPortFree+0x46>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	60fb      	str	r3, [r7, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	bf00      	nop
 8004bdc:	e7fd      	b.n	8004bda <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <vPortFree+0x66>
	__asm volatile
 8004be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bea:	f383 8811 	msr	BASEPRI, r3
 8004bee:	f3bf 8f6f 	isb	sy
 8004bf2:	f3bf 8f4f 	dsb	sy
 8004bf6:	60bb      	str	r3, [r7, #8]
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	e7fd      	b.n	8004bfa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	685a      	ldr	r2, [r3, #4]
 8004c02:	4b14      	ldr	r3, [pc, #80]	@ (8004c54 <vPortFree+0xbc>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4013      	ands	r3, r2
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d01e      	beq.n	8004c4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d11a      	bne.n	8004c4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	4b0e      	ldr	r3, [pc, #56]	@ (8004c54 <vPortFree+0xbc>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	401a      	ands	r2, r3
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c24:	f7fe fc76 	bl	8003514 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c58 <vPortFree+0xc0>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a09      	ldr	r2, [pc, #36]	@ (8004c58 <vPortFree+0xc0>)
 8004c34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c36:	6938      	ldr	r0, [r7, #16]
 8004c38:	f000 f874 	bl	8004d24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c3c:	4b07      	ldr	r3, [pc, #28]	@ (8004c5c <vPortFree+0xc4>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3301      	adds	r3, #1
 8004c42:	4a06      	ldr	r2, [pc, #24]	@ (8004c5c <vPortFree+0xc4>)
 8004c44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c46:	f7fe fc73 	bl	8003530 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c4a:	bf00      	nop
 8004c4c:	3718      	adds	r7, #24
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
 8004c52:	bf00      	nop
 8004c54:	20004a1c 	.word	0x20004a1c
 8004c58:	20004a0c 	.word	0x20004a0c
 8004c5c:	20004a18 	.word	0x20004a18

08004c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8004c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004c6c:	4b27      	ldr	r3, [pc, #156]	@ (8004d0c <prvHeapInit+0xac>)
 8004c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00c      	beq.n	8004c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3307      	adds	r3, #7
 8004c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f023 0307 	bic.w	r3, r3, #7
 8004c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d0c <prvHeapInit+0xac>)
 8004c90:	4413      	add	r3, r2
 8004c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c98:	4a1d      	ldr	r2, [pc, #116]	@ (8004d10 <prvHeapInit+0xb0>)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004c9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004d10 <prvHeapInit+0xb0>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cac:	2208      	movs	r2, #8
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0307 	bic.w	r3, r3, #7
 8004cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <prvHeapInit+0xb4>)
 8004cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004cc2:	4b14      	ldr	r3, [pc, #80]	@ (8004d14 <prvHeapInit+0xb4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004cca:	4b12      	ldr	r3, [pc, #72]	@ (8004d14 <prvHeapInit+0xb4>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	1ad2      	subs	r2, r2, r3
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <prvHeapInit+0xb4>)
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a0a      	ldr	r2, [pc, #40]	@ (8004d18 <prvHeapInit+0xb8>)
 8004cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4a09      	ldr	r2, [pc, #36]	@ (8004d1c <prvHeapInit+0xbc>)
 8004cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004cf8:	4b09      	ldr	r3, [pc, #36]	@ (8004d20 <prvHeapInit+0xc0>)
 8004cfa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8004cfe:	601a      	str	r2, [r3, #0]
}
 8004d00:	bf00      	nop
 8004d02:	3714      	adds	r7, #20
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr
 8004d0c:	20000e00 	.word	0x20000e00
 8004d10:	20004a00 	.word	0x20004a00
 8004d14:	20004a08 	.word	0x20004a08
 8004d18:	20004a10 	.word	0x20004a10
 8004d1c:	20004a0c 	.word	0x20004a0c
 8004d20:	20004a1c 	.word	0x20004a1c

08004d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d2c:	4b28      	ldr	r3, [pc, #160]	@ (8004dd0 <prvInsertBlockIntoFreeList+0xac>)
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	e002      	b.n	8004d38 <prvInsertBlockIntoFreeList+0x14>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d8f7      	bhi.n	8004d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d108      	bne.n	8004d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	441a      	add	r2, r3
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	68ba      	ldr	r2, [r7, #8]
 8004d70:	441a      	add	r2, r3
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d118      	bne.n	8004dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	4b15      	ldr	r3, [pc, #84]	@ (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d00d      	beq.n	8004da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	685a      	ldr	r2, [r3, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	685b      	ldr	r3, [r3, #4]
 8004d90:	441a      	add	r2, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e008      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004da2:	4b0c      	ldr	r3, [pc, #48]	@ (8004dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	601a      	str	r2, [r3, #0]
 8004daa:	e003      	b.n	8004db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681a      	ldr	r2, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d002      	beq.n	8004dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
 8004dce:	bf00      	nop
 8004dd0:	20004a00 	.word	0x20004a00
 8004dd4:	20004a08 	.word	0x20004a08

08004dd8 <siprintf>:
 8004dd8:	b40e      	push	{r1, r2, r3}
 8004dda:	b510      	push	{r4, lr}
 8004ddc:	b09d      	sub	sp, #116	@ 0x74
 8004dde:	ab1f      	add	r3, sp, #124	@ 0x7c
 8004de0:	9002      	str	r0, [sp, #8]
 8004de2:	9006      	str	r0, [sp, #24]
 8004de4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004de8:	480a      	ldr	r0, [pc, #40]	@ (8004e14 <siprintf+0x3c>)
 8004dea:	9107      	str	r1, [sp, #28]
 8004dec:	9104      	str	r1, [sp, #16]
 8004dee:	490a      	ldr	r1, [pc, #40]	@ (8004e18 <siprintf+0x40>)
 8004df0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004df4:	9105      	str	r1, [sp, #20]
 8004df6:	2400      	movs	r4, #0
 8004df8:	a902      	add	r1, sp, #8
 8004dfa:	6800      	ldr	r0, [r0, #0]
 8004dfc:	9301      	str	r3, [sp, #4]
 8004dfe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004e00:	f000 f9a2 	bl	8005148 <_svfiprintf_r>
 8004e04:	9b02      	ldr	r3, [sp, #8]
 8004e06:	701c      	strb	r4, [r3, #0]
 8004e08:	b01d      	add	sp, #116	@ 0x74
 8004e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e0e:	b003      	add	sp, #12
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20000010 	.word	0x20000010
 8004e18:	ffff0208 	.word	0xffff0208

08004e1c <memset>:
 8004e1c:	4402      	add	r2, r0
 8004e1e:	4603      	mov	r3, r0
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d100      	bne.n	8004e26 <memset+0xa>
 8004e24:	4770      	bx	lr
 8004e26:	f803 1b01 	strb.w	r1, [r3], #1
 8004e2a:	e7f9      	b.n	8004e20 <memset+0x4>

08004e2c <__errno>:
 8004e2c:	4b01      	ldr	r3, [pc, #4]	@ (8004e34 <__errno+0x8>)
 8004e2e:	6818      	ldr	r0, [r3, #0]
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	20000010 	.word	0x20000010

08004e38 <__libc_init_array>:
 8004e38:	b570      	push	{r4, r5, r6, lr}
 8004e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8004e70 <__libc_init_array+0x38>)
 8004e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8004e74 <__libc_init_array+0x3c>)
 8004e3e:	1b64      	subs	r4, r4, r5
 8004e40:	10a4      	asrs	r4, r4, #2
 8004e42:	2600      	movs	r6, #0
 8004e44:	42a6      	cmp	r6, r4
 8004e46:	d109      	bne.n	8004e5c <__libc_init_array+0x24>
 8004e48:	4d0b      	ldr	r5, [pc, #44]	@ (8004e78 <__libc_init_array+0x40>)
 8004e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8004e7c <__libc_init_array+0x44>)
 8004e4c:	f000 fc64 	bl	8005718 <_init>
 8004e50:	1b64      	subs	r4, r4, r5
 8004e52:	10a4      	asrs	r4, r4, #2
 8004e54:	2600      	movs	r6, #0
 8004e56:	42a6      	cmp	r6, r4
 8004e58:	d105      	bne.n	8004e66 <__libc_init_array+0x2e>
 8004e5a:	bd70      	pop	{r4, r5, r6, pc}
 8004e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e60:	4798      	blx	r3
 8004e62:	3601      	adds	r6, #1
 8004e64:	e7ee      	b.n	8004e44 <__libc_init_array+0xc>
 8004e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e6a:	4798      	blx	r3
 8004e6c:	3601      	adds	r6, #1
 8004e6e:	e7f2      	b.n	8004e56 <__libc_init_array+0x1e>
 8004e70:	080057fc 	.word	0x080057fc
 8004e74:	080057fc 	.word	0x080057fc
 8004e78:	080057fc 	.word	0x080057fc
 8004e7c:	08005800 	.word	0x08005800

08004e80 <__retarget_lock_acquire_recursive>:
 8004e80:	4770      	bx	lr

08004e82 <__retarget_lock_release_recursive>:
 8004e82:	4770      	bx	lr

08004e84 <memcpy>:
 8004e84:	440a      	add	r2, r1
 8004e86:	4291      	cmp	r1, r2
 8004e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e8c:	d100      	bne.n	8004e90 <memcpy+0xc>
 8004e8e:	4770      	bx	lr
 8004e90:	b510      	push	{r4, lr}
 8004e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e9a:	4291      	cmp	r1, r2
 8004e9c:	d1f9      	bne.n	8004e92 <memcpy+0xe>
 8004e9e:	bd10      	pop	{r4, pc}

08004ea0 <_free_r>:
 8004ea0:	b538      	push	{r3, r4, r5, lr}
 8004ea2:	4605      	mov	r5, r0
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d041      	beq.n	8004f2c <_free_r+0x8c>
 8004ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004eac:	1f0c      	subs	r4, r1, #4
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	bfb8      	it	lt
 8004eb2:	18e4      	addlt	r4, r4, r3
 8004eb4:	f000 f8e0 	bl	8005078 <__malloc_lock>
 8004eb8:	4a1d      	ldr	r2, [pc, #116]	@ (8004f30 <_free_r+0x90>)
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	b933      	cbnz	r3, 8004ecc <_free_r+0x2c>
 8004ebe:	6063      	str	r3, [r4, #4]
 8004ec0:	6014      	str	r4, [r2, #0]
 8004ec2:	4628      	mov	r0, r5
 8004ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ec8:	f000 b8dc 	b.w	8005084 <__malloc_unlock>
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d908      	bls.n	8004ee2 <_free_r+0x42>
 8004ed0:	6820      	ldr	r0, [r4, #0]
 8004ed2:	1821      	adds	r1, r4, r0
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf01      	itttt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	1809      	addeq	r1, r1, r0
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	e7ed      	b.n	8004ebe <_free_r+0x1e>
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	b10b      	cbz	r3, 8004eec <_free_r+0x4c>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d9fa      	bls.n	8004ee2 <_free_r+0x42>
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	1850      	adds	r0, r2, r1
 8004ef0:	42a0      	cmp	r0, r4
 8004ef2:	d10b      	bne.n	8004f0c <_free_r+0x6c>
 8004ef4:	6820      	ldr	r0, [r4, #0]
 8004ef6:	4401      	add	r1, r0
 8004ef8:	1850      	adds	r0, r2, r1
 8004efa:	4283      	cmp	r3, r0
 8004efc:	6011      	str	r1, [r2, #0]
 8004efe:	d1e0      	bne.n	8004ec2 <_free_r+0x22>
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	6053      	str	r3, [r2, #4]
 8004f06:	4408      	add	r0, r1
 8004f08:	6010      	str	r0, [r2, #0]
 8004f0a:	e7da      	b.n	8004ec2 <_free_r+0x22>
 8004f0c:	d902      	bls.n	8004f14 <_free_r+0x74>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	602b      	str	r3, [r5, #0]
 8004f12:	e7d6      	b.n	8004ec2 <_free_r+0x22>
 8004f14:	6820      	ldr	r0, [r4, #0]
 8004f16:	1821      	adds	r1, r4, r0
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	bf04      	itt	eq
 8004f1c:	6819      	ldreq	r1, [r3, #0]
 8004f1e:	685b      	ldreq	r3, [r3, #4]
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	bf04      	itt	eq
 8004f24:	1809      	addeq	r1, r1, r0
 8004f26:	6021      	streq	r1, [r4, #0]
 8004f28:	6054      	str	r4, [r2, #4]
 8004f2a:	e7ca      	b.n	8004ec2 <_free_r+0x22>
 8004f2c:	bd38      	pop	{r3, r4, r5, pc}
 8004f2e:	bf00      	nop
 8004f30:	20004b64 	.word	0x20004b64

08004f34 <sbrk_aligned>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4e0f      	ldr	r6, [pc, #60]	@ (8004f74 <sbrk_aligned+0x40>)
 8004f38:	460c      	mov	r4, r1
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	b911      	cbnz	r1, 8004f46 <sbrk_aligned+0x12>
 8004f40:	f000 fba4 	bl	800568c <_sbrk_r>
 8004f44:	6030      	str	r0, [r6, #0]
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 fb9f 	bl	800568c <_sbrk_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d103      	bne.n	8004f5a <sbrk_aligned+0x26>
 8004f52:	f04f 34ff 	mov.w	r4, #4294967295
 8004f56:	4620      	mov	r0, r4
 8004f58:	bd70      	pop	{r4, r5, r6, pc}
 8004f5a:	1cc4      	adds	r4, r0, #3
 8004f5c:	f024 0403 	bic.w	r4, r4, #3
 8004f60:	42a0      	cmp	r0, r4
 8004f62:	d0f8      	beq.n	8004f56 <sbrk_aligned+0x22>
 8004f64:	1a21      	subs	r1, r4, r0
 8004f66:	4628      	mov	r0, r5
 8004f68:	f000 fb90 	bl	800568c <_sbrk_r>
 8004f6c:	3001      	adds	r0, #1
 8004f6e:	d1f2      	bne.n	8004f56 <sbrk_aligned+0x22>
 8004f70:	e7ef      	b.n	8004f52 <sbrk_aligned+0x1e>
 8004f72:	bf00      	nop
 8004f74:	20004b60 	.word	0x20004b60

08004f78 <_malloc_r>:
 8004f78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f7c:	1ccd      	adds	r5, r1, #3
 8004f7e:	f025 0503 	bic.w	r5, r5, #3
 8004f82:	3508      	adds	r5, #8
 8004f84:	2d0c      	cmp	r5, #12
 8004f86:	bf38      	it	cc
 8004f88:	250c      	movcc	r5, #12
 8004f8a:	2d00      	cmp	r5, #0
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	db01      	blt.n	8004f94 <_malloc_r+0x1c>
 8004f90:	42a9      	cmp	r1, r5
 8004f92:	d904      	bls.n	8004f9e <_malloc_r+0x26>
 8004f94:	230c      	movs	r3, #12
 8004f96:	6033      	str	r3, [r6, #0]
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005074 <_malloc_r+0xfc>
 8004fa2:	f000 f869 	bl	8005078 <__malloc_lock>
 8004fa6:	f8d8 3000 	ldr.w	r3, [r8]
 8004faa:	461c      	mov	r4, r3
 8004fac:	bb44      	cbnz	r4, 8005000 <_malloc_r+0x88>
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f7ff ffbf 	bl	8004f34 <sbrk_aligned>
 8004fb6:	1c43      	adds	r3, r0, #1
 8004fb8:	4604      	mov	r4, r0
 8004fba:	d158      	bne.n	800506e <_malloc_r+0xf6>
 8004fbc:	f8d8 4000 	ldr.w	r4, [r8]
 8004fc0:	4627      	mov	r7, r4
 8004fc2:	2f00      	cmp	r7, #0
 8004fc4:	d143      	bne.n	800504e <_malloc_r+0xd6>
 8004fc6:	2c00      	cmp	r4, #0
 8004fc8:	d04b      	beq.n	8005062 <_malloc_r+0xea>
 8004fca:	6823      	ldr	r3, [r4, #0]
 8004fcc:	4639      	mov	r1, r7
 8004fce:	4630      	mov	r0, r6
 8004fd0:	eb04 0903 	add.w	r9, r4, r3
 8004fd4:	f000 fb5a 	bl	800568c <_sbrk_r>
 8004fd8:	4581      	cmp	r9, r0
 8004fda:	d142      	bne.n	8005062 <_malloc_r+0xea>
 8004fdc:	6821      	ldr	r1, [r4, #0]
 8004fde:	1a6d      	subs	r5, r5, r1
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f7ff ffa6 	bl	8004f34 <sbrk_aligned>
 8004fe8:	3001      	adds	r0, #1
 8004fea:	d03a      	beq.n	8005062 <_malloc_r+0xea>
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	442b      	add	r3, r5
 8004ff0:	6023      	str	r3, [r4, #0]
 8004ff2:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	bb62      	cbnz	r2, 8005054 <_malloc_r+0xdc>
 8004ffa:	f8c8 7000 	str.w	r7, [r8]
 8004ffe:	e00f      	b.n	8005020 <_malloc_r+0xa8>
 8005000:	6822      	ldr	r2, [r4, #0]
 8005002:	1b52      	subs	r2, r2, r5
 8005004:	d420      	bmi.n	8005048 <_malloc_r+0xd0>
 8005006:	2a0b      	cmp	r2, #11
 8005008:	d917      	bls.n	800503a <_malloc_r+0xc2>
 800500a:	1961      	adds	r1, r4, r5
 800500c:	42a3      	cmp	r3, r4
 800500e:	6025      	str	r5, [r4, #0]
 8005010:	bf18      	it	ne
 8005012:	6059      	strne	r1, [r3, #4]
 8005014:	6863      	ldr	r3, [r4, #4]
 8005016:	bf08      	it	eq
 8005018:	f8c8 1000 	streq.w	r1, [r8]
 800501c:	5162      	str	r2, [r4, r5]
 800501e:	604b      	str	r3, [r1, #4]
 8005020:	4630      	mov	r0, r6
 8005022:	f000 f82f 	bl	8005084 <__malloc_unlock>
 8005026:	f104 000b 	add.w	r0, r4, #11
 800502a:	1d23      	adds	r3, r4, #4
 800502c:	f020 0007 	bic.w	r0, r0, #7
 8005030:	1ac2      	subs	r2, r0, r3
 8005032:	bf1c      	itt	ne
 8005034:	1a1b      	subne	r3, r3, r0
 8005036:	50a3      	strne	r3, [r4, r2]
 8005038:	e7af      	b.n	8004f9a <_malloc_r+0x22>
 800503a:	6862      	ldr	r2, [r4, #4]
 800503c:	42a3      	cmp	r3, r4
 800503e:	bf0c      	ite	eq
 8005040:	f8c8 2000 	streq.w	r2, [r8]
 8005044:	605a      	strne	r2, [r3, #4]
 8005046:	e7eb      	b.n	8005020 <_malloc_r+0xa8>
 8005048:	4623      	mov	r3, r4
 800504a:	6864      	ldr	r4, [r4, #4]
 800504c:	e7ae      	b.n	8004fac <_malloc_r+0x34>
 800504e:	463c      	mov	r4, r7
 8005050:	687f      	ldr	r7, [r7, #4]
 8005052:	e7b6      	b.n	8004fc2 <_malloc_r+0x4a>
 8005054:	461a      	mov	r2, r3
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	42a3      	cmp	r3, r4
 800505a:	d1fb      	bne.n	8005054 <_malloc_r+0xdc>
 800505c:	2300      	movs	r3, #0
 800505e:	6053      	str	r3, [r2, #4]
 8005060:	e7de      	b.n	8005020 <_malloc_r+0xa8>
 8005062:	230c      	movs	r3, #12
 8005064:	6033      	str	r3, [r6, #0]
 8005066:	4630      	mov	r0, r6
 8005068:	f000 f80c 	bl	8005084 <__malloc_unlock>
 800506c:	e794      	b.n	8004f98 <_malloc_r+0x20>
 800506e:	6005      	str	r5, [r0, #0]
 8005070:	e7d6      	b.n	8005020 <_malloc_r+0xa8>
 8005072:	bf00      	nop
 8005074:	20004b64 	.word	0x20004b64

08005078 <__malloc_lock>:
 8005078:	4801      	ldr	r0, [pc, #4]	@ (8005080 <__malloc_lock+0x8>)
 800507a:	f7ff bf01 	b.w	8004e80 <__retarget_lock_acquire_recursive>
 800507e:	bf00      	nop
 8005080:	20004b5c 	.word	0x20004b5c

08005084 <__malloc_unlock>:
 8005084:	4801      	ldr	r0, [pc, #4]	@ (800508c <__malloc_unlock+0x8>)
 8005086:	f7ff befc 	b.w	8004e82 <__retarget_lock_release_recursive>
 800508a:	bf00      	nop
 800508c:	20004b5c 	.word	0x20004b5c

08005090 <__ssputs_r>:
 8005090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005094:	688e      	ldr	r6, [r1, #8]
 8005096:	461f      	mov	r7, r3
 8005098:	42be      	cmp	r6, r7
 800509a:	680b      	ldr	r3, [r1, #0]
 800509c:	4682      	mov	sl, r0
 800509e:	460c      	mov	r4, r1
 80050a0:	4690      	mov	r8, r2
 80050a2:	d82d      	bhi.n	8005100 <__ssputs_r+0x70>
 80050a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80050a8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80050ac:	d026      	beq.n	80050fc <__ssputs_r+0x6c>
 80050ae:	6965      	ldr	r5, [r4, #20]
 80050b0:	6909      	ldr	r1, [r1, #16]
 80050b2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b6:	eba3 0901 	sub.w	r9, r3, r1
 80050ba:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050be:	1c7b      	adds	r3, r7, #1
 80050c0:	444b      	add	r3, r9
 80050c2:	106d      	asrs	r5, r5, #1
 80050c4:	429d      	cmp	r5, r3
 80050c6:	bf38      	it	cc
 80050c8:	461d      	movcc	r5, r3
 80050ca:	0553      	lsls	r3, r2, #21
 80050cc:	d527      	bpl.n	800511e <__ssputs_r+0x8e>
 80050ce:	4629      	mov	r1, r5
 80050d0:	f7ff ff52 	bl	8004f78 <_malloc_r>
 80050d4:	4606      	mov	r6, r0
 80050d6:	b360      	cbz	r0, 8005132 <__ssputs_r+0xa2>
 80050d8:	6921      	ldr	r1, [r4, #16]
 80050da:	464a      	mov	r2, r9
 80050dc:	f7ff fed2 	bl	8004e84 <memcpy>
 80050e0:	89a3      	ldrh	r3, [r4, #12]
 80050e2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ea:	81a3      	strh	r3, [r4, #12]
 80050ec:	6126      	str	r6, [r4, #16]
 80050ee:	6165      	str	r5, [r4, #20]
 80050f0:	444e      	add	r6, r9
 80050f2:	eba5 0509 	sub.w	r5, r5, r9
 80050f6:	6026      	str	r6, [r4, #0]
 80050f8:	60a5      	str	r5, [r4, #8]
 80050fa:	463e      	mov	r6, r7
 80050fc:	42be      	cmp	r6, r7
 80050fe:	d900      	bls.n	8005102 <__ssputs_r+0x72>
 8005100:	463e      	mov	r6, r7
 8005102:	6820      	ldr	r0, [r4, #0]
 8005104:	4632      	mov	r2, r6
 8005106:	4641      	mov	r1, r8
 8005108:	f000 faa6 	bl	8005658 <memmove>
 800510c:	68a3      	ldr	r3, [r4, #8]
 800510e:	1b9b      	subs	r3, r3, r6
 8005110:	60a3      	str	r3, [r4, #8]
 8005112:	6823      	ldr	r3, [r4, #0]
 8005114:	4433      	add	r3, r6
 8005116:	6023      	str	r3, [r4, #0]
 8005118:	2000      	movs	r0, #0
 800511a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511e:	462a      	mov	r2, r5
 8005120:	f000 fac4 	bl	80056ac <_realloc_r>
 8005124:	4606      	mov	r6, r0
 8005126:	2800      	cmp	r0, #0
 8005128:	d1e0      	bne.n	80050ec <__ssputs_r+0x5c>
 800512a:	6921      	ldr	r1, [r4, #16]
 800512c:	4650      	mov	r0, sl
 800512e:	f7ff feb7 	bl	8004ea0 <_free_r>
 8005132:	230c      	movs	r3, #12
 8005134:	f8ca 3000 	str.w	r3, [sl]
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800513e:	81a3      	strh	r3, [r4, #12]
 8005140:	f04f 30ff 	mov.w	r0, #4294967295
 8005144:	e7e9      	b.n	800511a <__ssputs_r+0x8a>
	...

08005148 <_svfiprintf_r>:
 8005148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800514c:	4698      	mov	r8, r3
 800514e:	898b      	ldrh	r3, [r1, #12]
 8005150:	061b      	lsls	r3, r3, #24
 8005152:	b09d      	sub	sp, #116	@ 0x74
 8005154:	4607      	mov	r7, r0
 8005156:	460d      	mov	r5, r1
 8005158:	4614      	mov	r4, r2
 800515a:	d510      	bpl.n	800517e <_svfiprintf_r+0x36>
 800515c:	690b      	ldr	r3, [r1, #16]
 800515e:	b973      	cbnz	r3, 800517e <_svfiprintf_r+0x36>
 8005160:	2140      	movs	r1, #64	@ 0x40
 8005162:	f7ff ff09 	bl	8004f78 <_malloc_r>
 8005166:	6028      	str	r0, [r5, #0]
 8005168:	6128      	str	r0, [r5, #16]
 800516a:	b930      	cbnz	r0, 800517a <_svfiprintf_r+0x32>
 800516c:	230c      	movs	r3, #12
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	f04f 30ff 	mov.w	r0, #4294967295
 8005174:	b01d      	add	sp, #116	@ 0x74
 8005176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800517a:	2340      	movs	r3, #64	@ 0x40
 800517c:	616b      	str	r3, [r5, #20]
 800517e:	2300      	movs	r3, #0
 8005180:	9309      	str	r3, [sp, #36]	@ 0x24
 8005182:	2320      	movs	r3, #32
 8005184:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005188:	f8cd 800c 	str.w	r8, [sp, #12]
 800518c:	2330      	movs	r3, #48	@ 0x30
 800518e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800532c <_svfiprintf_r+0x1e4>
 8005192:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005196:	f04f 0901 	mov.w	r9, #1
 800519a:	4623      	mov	r3, r4
 800519c:	469a      	mov	sl, r3
 800519e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051a2:	b10a      	cbz	r2, 80051a8 <_svfiprintf_r+0x60>
 80051a4:	2a25      	cmp	r2, #37	@ 0x25
 80051a6:	d1f9      	bne.n	800519c <_svfiprintf_r+0x54>
 80051a8:	ebba 0b04 	subs.w	fp, sl, r4
 80051ac:	d00b      	beq.n	80051c6 <_svfiprintf_r+0x7e>
 80051ae:	465b      	mov	r3, fp
 80051b0:	4622      	mov	r2, r4
 80051b2:	4629      	mov	r1, r5
 80051b4:	4638      	mov	r0, r7
 80051b6:	f7ff ff6b 	bl	8005090 <__ssputs_r>
 80051ba:	3001      	adds	r0, #1
 80051bc:	f000 80a7 	beq.w	800530e <_svfiprintf_r+0x1c6>
 80051c0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80051c2:	445a      	add	r2, fp
 80051c4:	9209      	str	r2, [sp, #36]	@ 0x24
 80051c6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 809f 	beq.w	800530e <_svfiprintf_r+0x1c6>
 80051d0:	2300      	movs	r3, #0
 80051d2:	f04f 32ff 	mov.w	r2, #4294967295
 80051d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051da:	f10a 0a01 	add.w	sl, sl, #1
 80051de:	9304      	str	r3, [sp, #16]
 80051e0:	9307      	str	r3, [sp, #28]
 80051e2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051e6:	931a      	str	r3, [sp, #104]	@ 0x68
 80051e8:	4654      	mov	r4, sl
 80051ea:	2205      	movs	r2, #5
 80051ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051f0:	484e      	ldr	r0, [pc, #312]	@ (800532c <_svfiprintf_r+0x1e4>)
 80051f2:	f7fa fffd 	bl	80001f0 <memchr>
 80051f6:	9a04      	ldr	r2, [sp, #16]
 80051f8:	b9d8      	cbnz	r0, 8005232 <_svfiprintf_r+0xea>
 80051fa:	06d0      	lsls	r0, r2, #27
 80051fc:	bf44      	itt	mi
 80051fe:	2320      	movmi	r3, #32
 8005200:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005204:	0711      	lsls	r1, r2, #28
 8005206:	bf44      	itt	mi
 8005208:	232b      	movmi	r3, #43	@ 0x2b
 800520a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800520e:	f89a 3000 	ldrb.w	r3, [sl]
 8005212:	2b2a      	cmp	r3, #42	@ 0x2a
 8005214:	d015      	beq.n	8005242 <_svfiprintf_r+0xfa>
 8005216:	9a07      	ldr	r2, [sp, #28]
 8005218:	4654      	mov	r4, sl
 800521a:	2000      	movs	r0, #0
 800521c:	f04f 0c0a 	mov.w	ip, #10
 8005220:	4621      	mov	r1, r4
 8005222:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005226:	3b30      	subs	r3, #48	@ 0x30
 8005228:	2b09      	cmp	r3, #9
 800522a:	d94b      	bls.n	80052c4 <_svfiprintf_r+0x17c>
 800522c:	b1b0      	cbz	r0, 800525c <_svfiprintf_r+0x114>
 800522e:	9207      	str	r2, [sp, #28]
 8005230:	e014      	b.n	800525c <_svfiprintf_r+0x114>
 8005232:	eba0 0308 	sub.w	r3, r0, r8
 8005236:	fa09 f303 	lsl.w	r3, r9, r3
 800523a:	4313      	orrs	r3, r2
 800523c:	9304      	str	r3, [sp, #16]
 800523e:	46a2      	mov	sl, r4
 8005240:	e7d2      	b.n	80051e8 <_svfiprintf_r+0xa0>
 8005242:	9b03      	ldr	r3, [sp, #12]
 8005244:	1d19      	adds	r1, r3, #4
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	9103      	str	r1, [sp, #12]
 800524a:	2b00      	cmp	r3, #0
 800524c:	bfbb      	ittet	lt
 800524e:	425b      	neglt	r3, r3
 8005250:	f042 0202 	orrlt.w	r2, r2, #2
 8005254:	9307      	strge	r3, [sp, #28]
 8005256:	9307      	strlt	r3, [sp, #28]
 8005258:	bfb8      	it	lt
 800525a:	9204      	strlt	r2, [sp, #16]
 800525c:	7823      	ldrb	r3, [r4, #0]
 800525e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005260:	d10a      	bne.n	8005278 <_svfiprintf_r+0x130>
 8005262:	7863      	ldrb	r3, [r4, #1]
 8005264:	2b2a      	cmp	r3, #42	@ 0x2a
 8005266:	d132      	bne.n	80052ce <_svfiprintf_r+0x186>
 8005268:	9b03      	ldr	r3, [sp, #12]
 800526a:	1d1a      	adds	r2, r3, #4
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	9203      	str	r2, [sp, #12]
 8005270:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005274:	3402      	adds	r4, #2
 8005276:	9305      	str	r3, [sp, #20]
 8005278:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800533c <_svfiprintf_r+0x1f4>
 800527c:	7821      	ldrb	r1, [r4, #0]
 800527e:	2203      	movs	r2, #3
 8005280:	4650      	mov	r0, sl
 8005282:	f7fa ffb5 	bl	80001f0 <memchr>
 8005286:	b138      	cbz	r0, 8005298 <_svfiprintf_r+0x150>
 8005288:	9b04      	ldr	r3, [sp, #16]
 800528a:	eba0 000a 	sub.w	r0, r0, sl
 800528e:	2240      	movs	r2, #64	@ 0x40
 8005290:	4082      	lsls	r2, r0
 8005292:	4313      	orrs	r3, r2
 8005294:	3401      	adds	r4, #1
 8005296:	9304      	str	r3, [sp, #16]
 8005298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529c:	4824      	ldr	r0, [pc, #144]	@ (8005330 <_svfiprintf_r+0x1e8>)
 800529e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80052a2:	2206      	movs	r2, #6
 80052a4:	f7fa ffa4 	bl	80001f0 <memchr>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d036      	beq.n	800531a <_svfiprintf_r+0x1d2>
 80052ac:	4b21      	ldr	r3, [pc, #132]	@ (8005334 <_svfiprintf_r+0x1ec>)
 80052ae:	bb1b      	cbnz	r3, 80052f8 <_svfiprintf_r+0x1b0>
 80052b0:	9b03      	ldr	r3, [sp, #12]
 80052b2:	3307      	adds	r3, #7
 80052b4:	f023 0307 	bic.w	r3, r3, #7
 80052b8:	3308      	adds	r3, #8
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80052be:	4433      	add	r3, r6
 80052c0:	9309      	str	r3, [sp, #36]	@ 0x24
 80052c2:	e76a      	b.n	800519a <_svfiprintf_r+0x52>
 80052c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c8:	460c      	mov	r4, r1
 80052ca:	2001      	movs	r0, #1
 80052cc:	e7a8      	b.n	8005220 <_svfiprintf_r+0xd8>
 80052ce:	2300      	movs	r3, #0
 80052d0:	3401      	adds	r4, #1
 80052d2:	9305      	str	r3, [sp, #20]
 80052d4:	4619      	mov	r1, r3
 80052d6:	f04f 0c0a 	mov.w	ip, #10
 80052da:	4620      	mov	r0, r4
 80052dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052e0:	3a30      	subs	r2, #48	@ 0x30
 80052e2:	2a09      	cmp	r2, #9
 80052e4:	d903      	bls.n	80052ee <_svfiprintf_r+0x1a6>
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d0c6      	beq.n	8005278 <_svfiprintf_r+0x130>
 80052ea:	9105      	str	r1, [sp, #20]
 80052ec:	e7c4      	b.n	8005278 <_svfiprintf_r+0x130>
 80052ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80052f2:	4604      	mov	r4, r0
 80052f4:	2301      	movs	r3, #1
 80052f6:	e7f0      	b.n	80052da <_svfiprintf_r+0x192>
 80052f8:	ab03      	add	r3, sp, #12
 80052fa:	9300      	str	r3, [sp, #0]
 80052fc:	462a      	mov	r2, r5
 80052fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005338 <_svfiprintf_r+0x1f0>)
 8005300:	a904      	add	r1, sp, #16
 8005302:	4638      	mov	r0, r7
 8005304:	f3af 8000 	nop.w
 8005308:	1c42      	adds	r2, r0, #1
 800530a:	4606      	mov	r6, r0
 800530c:	d1d6      	bne.n	80052bc <_svfiprintf_r+0x174>
 800530e:	89ab      	ldrh	r3, [r5, #12]
 8005310:	065b      	lsls	r3, r3, #25
 8005312:	f53f af2d 	bmi.w	8005170 <_svfiprintf_r+0x28>
 8005316:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005318:	e72c      	b.n	8005174 <_svfiprintf_r+0x2c>
 800531a:	ab03      	add	r3, sp, #12
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	462a      	mov	r2, r5
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <_svfiprintf_r+0x1f0>)
 8005322:	a904      	add	r1, sp, #16
 8005324:	4638      	mov	r0, r7
 8005326:	f000 f879 	bl	800541c <_printf_i>
 800532a:	e7ed      	b.n	8005308 <_svfiprintf_r+0x1c0>
 800532c:	080057c0 	.word	0x080057c0
 8005330:	080057ca 	.word	0x080057ca
 8005334:	00000000 	.word	0x00000000
 8005338:	08005091 	.word	0x08005091
 800533c:	080057c6 	.word	0x080057c6

08005340 <_printf_common>:
 8005340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005344:	4616      	mov	r6, r2
 8005346:	4698      	mov	r8, r3
 8005348:	688a      	ldr	r2, [r1, #8]
 800534a:	690b      	ldr	r3, [r1, #16]
 800534c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005350:	4293      	cmp	r3, r2
 8005352:	bfb8      	it	lt
 8005354:	4613      	movlt	r3, r2
 8005356:	6033      	str	r3, [r6, #0]
 8005358:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800535c:	4607      	mov	r7, r0
 800535e:	460c      	mov	r4, r1
 8005360:	b10a      	cbz	r2, 8005366 <_printf_common+0x26>
 8005362:	3301      	adds	r3, #1
 8005364:	6033      	str	r3, [r6, #0]
 8005366:	6823      	ldr	r3, [r4, #0]
 8005368:	0699      	lsls	r1, r3, #26
 800536a:	bf42      	ittt	mi
 800536c:	6833      	ldrmi	r3, [r6, #0]
 800536e:	3302      	addmi	r3, #2
 8005370:	6033      	strmi	r3, [r6, #0]
 8005372:	6825      	ldr	r5, [r4, #0]
 8005374:	f015 0506 	ands.w	r5, r5, #6
 8005378:	d106      	bne.n	8005388 <_printf_common+0x48>
 800537a:	f104 0a19 	add.w	sl, r4, #25
 800537e:	68e3      	ldr	r3, [r4, #12]
 8005380:	6832      	ldr	r2, [r6, #0]
 8005382:	1a9b      	subs	r3, r3, r2
 8005384:	42ab      	cmp	r3, r5
 8005386:	dc26      	bgt.n	80053d6 <_printf_common+0x96>
 8005388:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800538c:	6822      	ldr	r2, [r4, #0]
 800538e:	3b00      	subs	r3, #0
 8005390:	bf18      	it	ne
 8005392:	2301      	movne	r3, #1
 8005394:	0692      	lsls	r2, r2, #26
 8005396:	d42b      	bmi.n	80053f0 <_printf_common+0xb0>
 8005398:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800539c:	4641      	mov	r1, r8
 800539e:	4638      	mov	r0, r7
 80053a0:	47c8      	blx	r9
 80053a2:	3001      	adds	r0, #1
 80053a4:	d01e      	beq.n	80053e4 <_printf_common+0xa4>
 80053a6:	6823      	ldr	r3, [r4, #0]
 80053a8:	6922      	ldr	r2, [r4, #16]
 80053aa:	f003 0306 	and.w	r3, r3, #6
 80053ae:	2b04      	cmp	r3, #4
 80053b0:	bf02      	ittt	eq
 80053b2:	68e5      	ldreq	r5, [r4, #12]
 80053b4:	6833      	ldreq	r3, [r6, #0]
 80053b6:	1aed      	subeq	r5, r5, r3
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	bf0c      	ite	eq
 80053bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053c0:	2500      	movne	r5, #0
 80053c2:	4293      	cmp	r3, r2
 80053c4:	bfc4      	itt	gt
 80053c6:	1a9b      	subgt	r3, r3, r2
 80053c8:	18ed      	addgt	r5, r5, r3
 80053ca:	2600      	movs	r6, #0
 80053cc:	341a      	adds	r4, #26
 80053ce:	42b5      	cmp	r5, r6
 80053d0:	d11a      	bne.n	8005408 <_printf_common+0xc8>
 80053d2:	2000      	movs	r0, #0
 80053d4:	e008      	b.n	80053e8 <_printf_common+0xa8>
 80053d6:	2301      	movs	r3, #1
 80053d8:	4652      	mov	r2, sl
 80053da:	4641      	mov	r1, r8
 80053dc:	4638      	mov	r0, r7
 80053de:	47c8      	blx	r9
 80053e0:	3001      	adds	r0, #1
 80053e2:	d103      	bne.n	80053ec <_printf_common+0xac>
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295
 80053e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053ec:	3501      	adds	r5, #1
 80053ee:	e7c6      	b.n	800537e <_printf_common+0x3e>
 80053f0:	18e1      	adds	r1, r4, r3
 80053f2:	1c5a      	adds	r2, r3, #1
 80053f4:	2030      	movs	r0, #48	@ 0x30
 80053f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053fa:	4422      	add	r2, r4
 80053fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005400:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005404:	3302      	adds	r3, #2
 8005406:	e7c7      	b.n	8005398 <_printf_common+0x58>
 8005408:	2301      	movs	r3, #1
 800540a:	4622      	mov	r2, r4
 800540c:	4641      	mov	r1, r8
 800540e:	4638      	mov	r0, r7
 8005410:	47c8      	blx	r9
 8005412:	3001      	adds	r0, #1
 8005414:	d0e6      	beq.n	80053e4 <_printf_common+0xa4>
 8005416:	3601      	adds	r6, #1
 8005418:	e7d9      	b.n	80053ce <_printf_common+0x8e>
	...

0800541c <_printf_i>:
 800541c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005420:	7e0f      	ldrb	r7, [r1, #24]
 8005422:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005424:	2f78      	cmp	r7, #120	@ 0x78
 8005426:	4691      	mov	r9, r2
 8005428:	4680      	mov	r8, r0
 800542a:	460c      	mov	r4, r1
 800542c:	469a      	mov	sl, r3
 800542e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005432:	d807      	bhi.n	8005444 <_printf_i+0x28>
 8005434:	2f62      	cmp	r7, #98	@ 0x62
 8005436:	d80a      	bhi.n	800544e <_printf_i+0x32>
 8005438:	2f00      	cmp	r7, #0
 800543a:	f000 80d1 	beq.w	80055e0 <_printf_i+0x1c4>
 800543e:	2f58      	cmp	r7, #88	@ 0x58
 8005440:	f000 80b8 	beq.w	80055b4 <_printf_i+0x198>
 8005444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005448:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800544c:	e03a      	b.n	80054c4 <_printf_i+0xa8>
 800544e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005452:	2b15      	cmp	r3, #21
 8005454:	d8f6      	bhi.n	8005444 <_printf_i+0x28>
 8005456:	a101      	add	r1, pc, #4	@ (adr r1, 800545c <_printf_i+0x40>)
 8005458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800545c:	080054b5 	.word	0x080054b5
 8005460:	080054c9 	.word	0x080054c9
 8005464:	08005445 	.word	0x08005445
 8005468:	08005445 	.word	0x08005445
 800546c:	08005445 	.word	0x08005445
 8005470:	08005445 	.word	0x08005445
 8005474:	080054c9 	.word	0x080054c9
 8005478:	08005445 	.word	0x08005445
 800547c:	08005445 	.word	0x08005445
 8005480:	08005445 	.word	0x08005445
 8005484:	08005445 	.word	0x08005445
 8005488:	080055c7 	.word	0x080055c7
 800548c:	080054f3 	.word	0x080054f3
 8005490:	08005581 	.word	0x08005581
 8005494:	08005445 	.word	0x08005445
 8005498:	08005445 	.word	0x08005445
 800549c:	080055e9 	.word	0x080055e9
 80054a0:	08005445 	.word	0x08005445
 80054a4:	080054f3 	.word	0x080054f3
 80054a8:	08005445 	.word	0x08005445
 80054ac:	08005445 	.word	0x08005445
 80054b0:	08005589 	.word	0x08005589
 80054b4:	6833      	ldr	r3, [r6, #0]
 80054b6:	1d1a      	adds	r2, r3, #4
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	6032      	str	r2, [r6, #0]
 80054bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80054c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80054c4:	2301      	movs	r3, #1
 80054c6:	e09c      	b.n	8005602 <_printf_i+0x1e6>
 80054c8:	6833      	ldr	r3, [r6, #0]
 80054ca:	6820      	ldr	r0, [r4, #0]
 80054cc:	1d19      	adds	r1, r3, #4
 80054ce:	6031      	str	r1, [r6, #0]
 80054d0:	0606      	lsls	r6, r0, #24
 80054d2:	d501      	bpl.n	80054d8 <_printf_i+0xbc>
 80054d4:	681d      	ldr	r5, [r3, #0]
 80054d6:	e003      	b.n	80054e0 <_printf_i+0xc4>
 80054d8:	0645      	lsls	r5, r0, #25
 80054da:	d5fb      	bpl.n	80054d4 <_printf_i+0xb8>
 80054dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	da03      	bge.n	80054ec <_printf_i+0xd0>
 80054e4:	232d      	movs	r3, #45	@ 0x2d
 80054e6:	426d      	negs	r5, r5
 80054e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054ec:	4858      	ldr	r0, [pc, #352]	@ (8005650 <_printf_i+0x234>)
 80054ee:	230a      	movs	r3, #10
 80054f0:	e011      	b.n	8005516 <_printf_i+0xfa>
 80054f2:	6821      	ldr	r1, [r4, #0]
 80054f4:	6833      	ldr	r3, [r6, #0]
 80054f6:	0608      	lsls	r0, r1, #24
 80054f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80054fc:	d402      	bmi.n	8005504 <_printf_i+0xe8>
 80054fe:	0649      	lsls	r1, r1, #25
 8005500:	bf48      	it	mi
 8005502:	b2ad      	uxthmi	r5, r5
 8005504:	2f6f      	cmp	r7, #111	@ 0x6f
 8005506:	4852      	ldr	r0, [pc, #328]	@ (8005650 <_printf_i+0x234>)
 8005508:	6033      	str	r3, [r6, #0]
 800550a:	bf14      	ite	ne
 800550c:	230a      	movne	r3, #10
 800550e:	2308      	moveq	r3, #8
 8005510:	2100      	movs	r1, #0
 8005512:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005516:	6866      	ldr	r6, [r4, #4]
 8005518:	60a6      	str	r6, [r4, #8]
 800551a:	2e00      	cmp	r6, #0
 800551c:	db05      	blt.n	800552a <_printf_i+0x10e>
 800551e:	6821      	ldr	r1, [r4, #0]
 8005520:	432e      	orrs	r6, r5
 8005522:	f021 0104 	bic.w	r1, r1, #4
 8005526:	6021      	str	r1, [r4, #0]
 8005528:	d04b      	beq.n	80055c2 <_printf_i+0x1a6>
 800552a:	4616      	mov	r6, r2
 800552c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005530:	fb03 5711 	mls	r7, r3, r1, r5
 8005534:	5dc7      	ldrb	r7, [r0, r7]
 8005536:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800553a:	462f      	mov	r7, r5
 800553c:	42bb      	cmp	r3, r7
 800553e:	460d      	mov	r5, r1
 8005540:	d9f4      	bls.n	800552c <_printf_i+0x110>
 8005542:	2b08      	cmp	r3, #8
 8005544:	d10b      	bne.n	800555e <_printf_i+0x142>
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	07df      	lsls	r7, r3, #31
 800554a:	d508      	bpl.n	800555e <_printf_i+0x142>
 800554c:	6923      	ldr	r3, [r4, #16]
 800554e:	6861      	ldr	r1, [r4, #4]
 8005550:	4299      	cmp	r1, r3
 8005552:	bfde      	ittt	le
 8005554:	2330      	movle	r3, #48	@ 0x30
 8005556:	f806 3c01 	strble.w	r3, [r6, #-1]
 800555a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800555e:	1b92      	subs	r2, r2, r6
 8005560:	6122      	str	r2, [r4, #16]
 8005562:	f8cd a000 	str.w	sl, [sp]
 8005566:	464b      	mov	r3, r9
 8005568:	aa03      	add	r2, sp, #12
 800556a:	4621      	mov	r1, r4
 800556c:	4640      	mov	r0, r8
 800556e:	f7ff fee7 	bl	8005340 <_printf_common>
 8005572:	3001      	adds	r0, #1
 8005574:	d14a      	bne.n	800560c <_printf_i+0x1f0>
 8005576:	f04f 30ff 	mov.w	r0, #4294967295
 800557a:	b004      	add	sp, #16
 800557c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	4832      	ldr	r0, [pc, #200]	@ (8005654 <_printf_i+0x238>)
 800558a:	2778      	movs	r7, #120	@ 0x78
 800558c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005590:	6823      	ldr	r3, [r4, #0]
 8005592:	6831      	ldr	r1, [r6, #0]
 8005594:	061f      	lsls	r7, r3, #24
 8005596:	f851 5b04 	ldr.w	r5, [r1], #4
 800559a:	d402      	bmi.n	80055a2 <_printf_i+0x186>
 800559c:	065f      	lsls	r7, r3, #25
 800559e:	bf48      	it	mi
 80055a0:	b2ad      	uxthmi	r5, r5
 80055a2:	6031      	str	r1, [r6, #0]
 80055a4:	07d9      	lsls	r1, r3, #31
 80055a6:	bf44      	itt	mi
 80055a8:	f043 0320 	orrmi.w	r3, r3, #32
 80055ac:	6023      	strmi	r3, [r4, #0]
 80055ae:	b11d      	cbz	r5, 80055b8 <_printf_i+0x19c>
 80055b0:	2310      	movs	r3, #16
 80055b2:	e7ad      	b.n	8005510 <_printf_i+0xf4>
 80055b4:	4826      	ldr	r0, [pc, #152]	@ (8005650 <_printf_i+0x234>)
 80055b6:	e7e9      	b.n	800558c <_printf_i+0x170>
 80055b8:	6823      	ldr	r3, [r4, #0]
 80055ba:	f023 0320 	bic.w	r3, r3, #32
 80055be:	6023      	str	r3, [r4, #0]
 80055c0:	e7f6      	b.n	80055b0 <_printf_i+0x194>
 80055c2:	4616      	mov	r6, r2
 80055c4:	e7bd      	b.n	8005542 <_printf_i+0x126>
 80055c6:	6833      	ldr	r3, [r6, #0]
 80055c8:	6825      	ldr	r5, [r4, #0]
 80055ca:	6961      	ldr	r1, [r4, #20]
 80055cc:	1d18      	adds	r0, r3, #4
 80055ce:	6030      	str	r0, [r6, #0]
 80055d0:	062e      	lsls	r6, r5, #24
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	d501      	bpl.n	80055da <_printf_i+0x1be>
 80055d6:	6019      	str	r1, [r3, #0]
 80055d8:	e002      	b.n	80055e0 <_printf_i+0x1c4>
 80055da:	0668      	lsls	r0, r5, #25
 80055dc:	d5fb      	bpl.n	80055d6 <_printf_i+0x1ba>
 80055de:	8019      	strh	r1, [r3, #0]
 80055e0:	2300      	movs	r3, #0
 80055e2:	6123      	str	r3, [r4, #16]
 80055e4:	4616      	mov	r6, r2
 80055e6:	e7bc      	b.n	8005562 <_printf_i+0x146>
 80055e8:	6833      	ldr	r3, [r6, #0]
 80055ea:	1d1a      	adds	r2, r3, #4
 80055ec:	6032      	str	r2, [r6, #0]
 80055ee:	681e      	ldr	r6, [r3, #0]
 80055f0:	6862      	ldr	r2, [r4, #4]
 80055f2:	2100      	movs	r1, #0
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7fa fdfb 	bl	80001f0 <memchr>
 80055fa:	b108      	cbz	r0, 8005600 <_printf_i+0x1e4>
 80055fc:	1b80      	subs	r0, r0, r6
 80055fe:	6060      	str	r0, [r4, #4]
 8005600:	6863      	ldr	r3, [r4, #4]
 8005602:	6123      	str	r3, [r4, #16]
 8005604:	2300      	movs	r3, #0
 8005606:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800560a:	e7aa      	b.n	8005562 <_printf_i+0x146>
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	4632      	mov	r2, r6
 8005610:	4649      	mov	r1, r9
 8005612:	4640      	mov	r0, r8
 8005614:	47d0      	blx	sl
 8005616:	3001      	adds	r0, #1
 8005618:	d0ad      	beq.n	8005576 <_printf_i+0x15a>
 800561a:	6823      	ldr	r3, [r4, #0]
 800561c:	079b      	lsls	r3, r3, #30
 800561e:	d413      	bmi.n	8005648 <_printf_i+0x22c>
 8005620:	68e0      	ldr	r0, [r4, #12]
 8005622:	9b03      	ldr	r3, [sp, #12]
 8005624:	4298      	cmp	r0, r3
 8005626:	bfb8      	it	lt
 8005628:	4618      	movlt	r0, r3
 800562a:	e7a6      	b.n	800557a <_printf_i+0x15e>
 800562c:	2301      	movs	r3, #1
 800562e:	4632      	mov	r2, r6
 8005630:	4649      	mov	r1, r9
 8005632:	4640      	mov	r0, r8
 8005634:	47d0      	blx	sl
 8005636:	3001      	adds	r0, #1
 8005638:	d09d      	beq.n	8005576 <_printf_i+0x15a>
 800563a:	3501      	adds	r5, #1
 800563c:	68e3      	ldr	r3, [r4, #12]
 800563e:	9903      	ldr	r1, [sp, #12]
 8005640:	1a5b      	subs	r3, r3, r1
 8005642:	42ab      	cmp	r3, r5
 8005644:	dcf2      	bgt.n	800562c <_printf_i+0x210>
 8005646:	e7eb      	b.n	8005620 <_printf_i+0x204>
 8005648:	2500      	movs	r5, #0
 800564a:	f104 0619 	add.w	r6, r4, #25
 800564e:	e7f5      	b.n	800563c <_printf_i+0x220>
 8005650:	080057d1 	.word	0x080057d1
 8005654:	080057e2 	.word	0x080057e2

08005658 <memmove>:
 8005658:	4288      	cmp	r0, r1
 800565a:	b510      	push	{r4, lr}
 800565c:	eb01 0402 	add.w	r4, r1, r2
 8005660:	d902      	bls.n	8005668 <memmove+0x10>
 8005662:	4284      	cmp	r4, r0
 8005664:	4623      	mov	r3, r4
 8005666:	d807      	bhi.n	8005678 <memmove+0x20>
 8005668:	1e43      	subs	r3, r0, #1
 800566a:	42a1      	cmp	r1, r4
 800566c:	d008      	beq.n	8005680 <memmove+0x28>
 800566e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005672:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005676:	e7f8      	b.n	800566a <memmove+0x12>
 8005678:	4402      	add	r2, r0
 800567a:	4601      	mov	r1, r0
 800567c:	428a      	cmp	r2, r1
 800567e:	d100      	bne.n	8005682 <memmove+0x2a>
 8005680:	bd10      	pop	{r4, pc}
 8005682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005686:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800568a:	e7f7      	b.n	800567c <memmove+0x24>

0800568c <_sbrk_r>:
 800568c:	b538      	push	{r3, r4, r5, lr}
 800568e:	4d06      	ldr	r5, [pc, #24]	@ (80056a8 <_sbrk_r+0x1c>)
 8005690:	2300      	movs	r3, #0
 8005692:	4604      	mov	r4, r0
 8005694:	4608      	mov	r0, r1
 8005696:	602b      	str	r3, [r5, #0]
 8005698:	f7fb f9c4 	bl	8000a24 <_sbrk>
 800569c:	1c43      	adds	r3, r0, #1
 800569e:	d102      	bne.n	80056a6 <_sbrk_r+0x1a>
 80056a0:	682b      	ldr	r3, [r5, #0]
 80056a2:	b103      	cbz	r3, 80056a6 <_sbrk_r+0x1a>
 80056a4:	6023      	str	r3, [r4, #0]
 80056a6:	bd38      	pop	{r3, r4, r5, pc}
 80056a8:	20004b58 	.word	0x20004b58

080056ac <_realloc_r>:
 80056ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b0:	4607      	mov	r7, r0
 80056b2:	4614      	mov	r4, r2
 80056b4:	460d      	mov	r5, r1
 80056b6:	b921      	cbnz	r1, 80056c2 <_realloc_r+0x16>
 80056b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056bc:	4611      	mov	r1, r2
 80056be:	f7ff bc5b 	b.w	8004f78 <_malloc_r>
 80056c2:	b92a      	cbnz	r2, 80056d0 <_realloc_r+0x24>
 80056c4:	f7ff fbec 	bl	8004ea0 <_free_r>
 80056c8:	4625      	mov	r5, r4
 80056ca:	4628      	mov	r0, r5
 80056cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d0:	f000 f81a 	bl	8005708 <_malloc_usable_size_r>
 80056d4:	4284      	cmp	r4, r0
 80056d6:	4606      	mov	r6, r0
 80056d8:	d802      	bhi.n	80056e0 <_realloc_r+0x34>
 80056da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056de:	d8f4      	bhi.n	80056ca <_realloc_r+0x1e>
 80056e0:	4621      	mov	r1, r4
 80056e2:	4638      	mov	r0, r7
 80056e4:	f7ff fc48 	bl	8004f78 <_malloc_r>
 80056e8:	4680      	mov	r8, r0
 80056ea:	b908      	cbnz	r0, 80056f0 <_realloc_r+0x44>
 80056ec:	4645      	mov	r5, r8
 80056ee:	e7ec      	b.n	80056ca <_realloc_r+0x1e>
 80056f0:	42b4      	cmp	r4, r6
 80056f2:	4622      	mov	r2, r4
 80056f4:	4629      	mov	r1, r5
 80056f6:	bf28      	it	cs
 80056f8:	4632      	movcs	r2, r6
 80056fa:	f7ff fbc3 	bl	8004e84 <memcpy>
 80056fe:	4629      	mov	r1, r5
 8005700:	4638      	mov	r0, r7
 8005702:	f7ff fbcd 	bl	8004ea0 <_free_r>
 8005706:	e7f1      	b.n	80056ec <_realloc_r+0x40>

08005708 <_malloc_usable_size_r>:
 8005708:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800570c:	1f18      	subs	r0, r3, #4
 800570e:	2b00      	cmp	r3, #0
 8005710:	bfbc      	itt	lt
 8005712:	580b      	ldrlt	r3, [r1, r0]
 8005714:	18c0      	addlt	r0, r0, r3
 8005716:	4770      	bx	lr

08005718 <_init>:
 8005718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800571a:	bf00      	nop
 800571c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571e:	bc08      	pop	{r3}
 8005720:	469e      	mov	lr, r3
 8005722:	4770      	bx	lr

08005724 <_fini>:
 8005724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005726:	bf00      	nop
 8005728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800572a:	bc08      	pop	{r3}
 800572c:	469e      	mov	lr, r3
 800572e:	4770      	bx	lr
